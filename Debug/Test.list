
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e89c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  0800e9b0  0800e9b0  0000f9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0c8  0800f0c8  000111d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f0c8  0800f0c8  000100c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0d0  0800f0d0  000111d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0d0  0800f0d0  000100d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f0d4  0800f0d4  000100d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800f0d8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c0  200001d4  0800f2ac  000111d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b94  0800f2ac  00011b94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016611  00000000  00000000  000111fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e44  00000000  00000000  0002780e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0002b658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fbf  00000000  00000000  0002caa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7e5  00000000  00000000  0002da67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aff8  00000000  00000000  0004924c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009518c  00000000  00000000  00064244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f93d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b24  00000000  00000000  000f9414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000fff38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e994 	.word	0x0800e994

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800e994 	.word	0x0800e994

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2uiz>:
 800113c:	0042      	lsls	r2, r0, #1
 800113e:	d20e      	bcs.n	800115e <__aeabi_f2uiz+0x22>
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001144:	d30b      	bcc.n	800115e <__aeabi_f2uiz+0x22>
 8001146:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d409      	bmi.n	8001164 <__aeabi_f2uiz+0x28>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001158:	fa23 f002 	lsr.w	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	4770      	bx	lr
 8001164:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001168:	d101      	bne.n	800116e <__aeabi_f2uiz+0x32>
 800116a:	0242      	lsls	r2, r0, #9
 800116c:	d102      	bne.n	8001174 <__aeabi_f2uiz+0x38>
 800116e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001172:	4770      	bx	lr
 8001174:	f04f 0000 	mov.w	r0, #0
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop

0800117c <__aeabi_uldivmod>:
 800117c:	b953      	cbnz	r3, 8001194 <__aeabi_uldivmod+0x18>
 800117e:	b94a      	cbnz	r2, 8001194 <__aeabi_uldivmod+0x18>
 8001180:	2900      	cmp	r1, #0
 8001182:	bf08      	it	eq
 8001184:	2800      	cmpeq	r0, #0
 8001186:	bf1c      	itt	ne
 8001188:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800118c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001190:	f000 b9c2 	b.w	8001518 <__aeabi_idiv0>
 8001194:	f1ad 0c08 	sub.w	ip, sp, #8
 8001198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800119c:	f000 f83c 	bl	8001218 <__udivmoddi4>
 80011a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011a8:	b004      	add	sp, #16
 80011aa:	4770      	bx	lr

080011ac <__aeabi_d2lz>:
 80011ac:	b538      	push	{r3, r4, r5, lr}
 80011ae:	2200      	movs	r2, #0
 80011b0:	2300      	movs	r3, #0
 80011b2:	4604      	mov	r4, r0
 80011b4:	460d      	mov	r5, r1
 80011b6:	f7ff fc01 	bl	80009bc <__aeabi_dcmplt>
 80011ba:	b928      	cbnz	r0, 80011c8 <__aeabi_d2lz+0x1c>
 80011bc:	4620      	mov	r0, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011c4:	f000 b80a 	b.w	80011dc <__aeabi_d2ulz>
 80011c8:	4620      	mov	r0, r4
 80011ca:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011ce:	f000 f805 	bl	80011dc <__aeabi_d2ulz>
 80011d2:	4240      	negs	r0, r0
 80011d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011d8:	bd38      	pop	{r3, r4, r5, pc}
 80011da:	bf00      	nop

080011dc <__aeabi_d2ulz>:
 80011dc:	b5d0      	push	{r4, r6, r7, lr}
 80011de:	2200      	movs	r2, #0
 80011e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <__aeabi_d2ulz+0x34>)
 80011e2:	4606      	mov	r6, r0
 80011e4:	460f      	mov	r7, r1
 80011e6:	f7ff f977 	bl	80004d8 <__aeabi_dmul>
 80011ea:	f7ff fc4d 	bl	8000a88 <__aeabi_d2uiz>
 80011ee:	4604      	mov	r4, r0
 80011f0:	f7ff f8f8 	bl	80003e4 <__aeabi_ui2d>
 80011f4:	2200      	movs	r2, #0
 80011f6:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <__aeabi_d2ulz+0x38>)
 80011f8:	f7ff f96e 	bl	80004d8 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4630      	mov	r0, r6
 8001202:	4639      	mov	r1, r7
 8001204:	f7fe ffb0 	bl	8000168 <__aeabi_dsub>
 8001208:	f7ff fc3e 	bl	8000a88 <__aeabi_d2uiz>
 800120c:	4621      	mov	r1, r4
 800120e:	bdd0      	pop	{r4, r6, r7, pc}
 8001210:	3df00000 	.word	0x3df00000
 8001214:	41f00000 	.word	0x41f00000

08001218 <__udivmoddi4>:
 8001218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800121c:	9d08      	ldr	r5, [sp, #32]
 800121e:	468e      	mov	lr, r1
 8001220:	4604      	mov	r4, r0
 8001222:	4688      	mov	r8, r1
 8001224:	2b00      	cmp	r3, #0
 8001226:	d14a      	bne.n	80012be <__udivmoddi4+0xa6>
 8001228:	428a      	cmp	r2, r1
 800122a:	4617      	mov	r7, r2
 800122c:	d962      	bls.n	80012f4 <__udivmoddi4+0xdc>
 800122e:	fab2 f682 	clz	r6, r2
 8001232:	b14e      	cbz	r6, 8001248 <__udivmoddi4+0x30>
 8001234:	f1c6 0320 	rsb	r3, r6, #32
 8001238:	fa01 f806 	lsl.w	r8, r1, r6
 800123c:	fa20 f303 	lsr.w	r3, r0, r3
 8001240:	40b7      	lsls	r7, r6
 8001242:	ea43 0808 	orr.w	r8, r3, r8
 8001246:	40b4      	lsls	r4, r6
 8001248:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800124c:	fbb8 f1fe 	udiv	r1, r8, lr
 8001250:	fa1f fc87 	uxth.w	ip, r7
 8001254:	fb0e 8811 	mls	r8, lr, r1, r8
 8001258:	fb01 f20c 	mul.w	r2, r1, ip
 800125c:	0c23      	lsrs	r3, r4, #16
 800125e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001262:	429a      	cmp	r2, r3
 8001264:	d909      	bls.n	800127a <__udivmoddi4+0x62>
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800126c:	f080 80eb 	bcs.w	8001446 <__udivmoddi4+0x22e>
 8001270:	429a      	cmp	r2, r3
 8001272:	f240 80e8 	bls.w	8001446 <__udivmoddi4+0x22e>
 8001276:	3902      	subs	r1, #2
 8001278:	443b      	add	r3, r7
 800127a:	1a9a      	subs	r2, r3, r2
 800127c:	fbb2 f0fe 	udiv	r0, r2, lr
 8001280:	fb0e 2210 	mls	r2, lr, r0, r2
 8001284:	fb00 fc0c 	mul.w	ip, r0, ip
 8001288:	b2a3      	uxth	r3, r4
 800128a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800128e:	459c      	cmp	ip, r3
 8001290:	d909      	bls.n	80012a6 <__udivmoddi4+0x8e>
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8001298:	f080 80d7 	bcs.w	800144a <__udivmoddi4+0x232>
 800129c:	459c      	cmp	ip, r3
 800129e:	f240 80d4 	bls.w	800144a <__udivmoddi4+0x232>
 80012a2:	443b      	add	r3, r7
 80012a4:	3802      	subs	r0, #2
 80012a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80012aa:	2100      	movs	r1, #0
 80012ac:	eba3 030c 	sub.w	r3, r3, ip
 80012b0:	b11d      	cbz	r5, 80012ba <__udivmoddi4+0xa2>
 80012b2:	2200      	movs	r2, #0
 80012b4:	40f3      	lsrs	r3, r6
 80012b6:	e9c5 3200 	strd	r3, r2, [r5]
 80012ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012be:	428b      	cmp	r3, r1
 80012c0:	d905      	bls.n	80012ce <__udivmoddi4+0xb6>
 80012c2:	b10d      	cbz	r5, 80012c8 <__udivmoddi4+0xb0>
 80012c4:	e9c5 0100 	strd	r0, r1, [r5]
 80012c8:	2100      	movs	r1, #0
 80012ca:	4608      	mov	r0, r1
 80012cc:	e7f5      	b.n	80012ba <__udivmoddi4+0xa2>
 80012ce:	fab3 f183 	clz	r1, r3
 80012d2:	2900      	cmp	r1, #0
 80012d4:	d146      	bne.n	8001364 <__udivmoddi4+0x14c>
 80012d6:	4573      	cmp	r3, lr
 80012d8:	d302      	bcc.n	80012e0 <__udivmoddi4+0xc8>
 80012da:	4282      	cmp	r2, r0
 80012dc:	f200 8108 	bhi.w	80014f0 <__udivmoddi4+0x2d8>
 80012e0:	1a84      	subs	r4, r0, r2
 80012e2:	eb6e 0203 	sbc.w	r2, lr, r3
 80012e6:	2001      	movs	r0, #1
 80012e8:	4690      	mov	r8, r2
 80012ea:	2d00      	cmp	r5, #0
 80012ec:	d0e5      	beq.n	80012ba <__udivmoddi4+0xa2>
 80012ee:	e9c5 4800 	strd	r4, r8, [r5]
 80012f2:	e7e2      	b.n	80012ba <__udivmoddi4+0xa2>
 80012f4:	2a00      	cmp	r2, #0
 80012f6:	f000 8091 	beq.w	800141c <__udivmoddi4+0x204>
 80012fa:	fab2 f682 	clz	r6, r2
 80012fe:	2e00      	cmp	r6, #0
 8001300:	f040 80a5 	bne.w	800144e <__udivmoddi4+0x236>
 8001304:	1a8a      	subs	r2, r1, r2
 8001306:	2101      	movs	r1, #1
 8001308:	0c03      	lsrs	r3, r0, #16
 800130a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800130e:	b280      	uxth	r0, r0
 8001310:	b2bc      	uxth	r4, r7
 8001312:	fbb2 fcfe 	udiv	ip, r2, lr
 8001316:	fb0e 221c 	mls	r2, lr, ip, r2
 800131a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800131e:	fb04 f20c 	mul.w	r2, r4, ip
 8001322:	429a      	cmp	r2, r3
 8001324:	d907      	bls.n	8001336 <__udivmoddi4+0x11e>
 8001326:	18fb      	adds	r3, r7, r3
 8001328:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800132c:	d202      	bcs.n	8001334 <__udivmoddi4+0x11c>
 800132e:	429a      	cmp	r2, r3
 8001330:	f200 80e3 	bhi.w	80014fa <__udivmoddi4+0x2e2>
 8001334:	46c4      	mov	ip, r8
 8001336:	1a9b      	subs	r3, r3, r2
 8001338:	fbb3 f2fe 	udiv	r2, r3, lr
 800133c:	fb0e 3312 	mls	r3, lr, r2, r3
 8001340:	fb02 f404 	mul.w	r4, r2, r4
 8001344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001348:	429c      	cmp	r4, r3
 800134a:	d907      	bls.n	800135c <__udivmoddi4+0x144>
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8001352:	d202      	bcs.n	800135a <__udivmoddi4+0x142>
 8001354:	429c      	cmp	r4, r3
 8001356:	f200 80cd 	bhi.w	80014f4 <__udivmoddi4+0x2dc>
 800135a:	4602      	mov	r2, r0
 800135c:	1b1b      	subs	r3, r3, r4
 800135e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8001362:	e7a5      	b.n	80012b0 <__udivmoddi4+0x98>
 8001364:	f1c1 0620 	rsb	r6, r1, #32
 8001368:	408b      	lsls	r3, r1
 800136a:	fa22 f706 	lsr.w	r7, r2, r6
 800136e:	431f      	orrs	r7, r3
 8001370:	fa2e fa06 	lsr.w	sl, lr, r6
 8001374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001378:	fbba f8f9 	udiv	r8, sl, r9
 800137c:	fa0e fe01 	lsl.w	lr, lr, r1
 8001380:	fa20 f306 	lsr.w	r3, r0, r6
 8001384:	fb09 aa18 	mls	sl, r9, r8, sl
 8001388:	fa1f fc87 	uxth.w	ip, r7
 800138c:	ea43 030e 	orr.w	r3, r3, lr
 8001390:	fa00 fe01 	lsl.w	lr, r0, r1
 8001394:	fb08 f00c 	mul.w	r0, r8, ip
 8001398:	0c1c      	lsrs	r4, r3, #16
 800139a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800139e:	42a0      	cmp	r0, r4
 80013a0:	fa02 f201 	lsl.w	r2, r2, r1
 80013a4:	d90a      	bls.n	80013bc <__udivmoddi4+0x1a4>
 80013a6:	193c      	adds	r4, r7, r4
 80013a8:	f108 3aff 	add.w	sl, r8, #4294967295	@ 0xffffffff
 80013ac:	f080 809e 	bcs.w	80014ec <__udivmoddi4+0x2d4>
 80013b0:	42a0      	cmp	r0, r4
 80013b2:	f240 809b 	bls.w	80014ec <__udivmoddi4+0x2d4>
 80013b6:	f1a8 0802 	sub.w	r8, r8, #2
 80013ba:	443c      	add	r4, r7
 80013bc:	1a24      	subs	r4, r4, r0
 80013be:	b298      	uxth	r0, r3
 80013c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80013c4:	fb09 4413 	mls	r4, r9, r3, r4
 80013c8:	fb03 fc0c 	mul.w	ip, r3, ip
 80013cc:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80013d0:	45a4      	cmp	ip, r4
 80013d2:	d909      	bls.n	80013e8 <__udivmoddi4+0x1d0>
 80013d4:	193c      	adds	r4, r7, r4
 80013d6:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80013da:	f080 8085 	bcs.w	80014e8 <__udivmoddi4+0x2d0>
 80013de:	45a4      	cmp	ip, r4
 80013e0:	f240 8082 	bls.w	80014e8 <__udivmoddi4+0x2d0>
 80013e4:	3b02      	subs	r3, #2
 80013e6:	443c      	add	r4, r7
 80013e8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80013ec:	eba4 040c 	sub.w	r4, r4, ip
 80013f0:	fba0 8c02 	umull	r8, ip, r0, r2
 80013f4:	4564      	cmp	r4, ip
 80013f6:	4643      	mov	r3, r8
 80013f8:	46e1      	mov	r9, ip
 80013fa:	d364      	bcc.n	80014c6 <__udivmoddi4+0x2ae>
 80013fc:	d061      	beq.n	80014c2 <__udivmoddi4+0x2aa>
 80013fe:	b15d      	cbz	r5, 8001418 <__udivmoddi4+0x200>
 8001400:	ebbe 0203 	subs.w	r2, lr, r3
 8001404:	eb64 0409 	sbc.w	r4, r4, r9
 8001408:	fa04 f606 	lsl.w	r6, r4, r6
 800140c:	fa22 f301 	lsr.w	r3, r2, r1
 8001410:	431e      	orrs	r6, r3
 8001412:	40cc      	lsrs	r4, r1
 8001414:	e9c5 6400 	strd	r6, r4, [r5]
 8001418:	2100      	movs	r1, #0
 800141a:	e74e      	b.n	80012ba <__udivmoddi4+0xa2>
 800141c:	fbb1 fcf2 	udiv	ip, r1, r2
 8001420:	0c01      	lsrs	r1, r0, #16
 8001422:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001426:	b280      	uxth	r0, r0
 8001428:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800142c:	463b      	mov	r3, r7
 800142e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001432:	4638      	mov	r0, r7
 8001434:	463c      	mov	r4, r7
 8001436:	46b8      	mov	r8, r7
 8001438:	46be      	mov	lr, r7
 800143a:	2620      	movs	r6, #32
 800143c:	eba2 0208 	sub.w	r2, r2, r8
 8001440:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001444:	e765      	b.n	8001312 <__udivmoddi4+0xfa>
 8001446:	4601      	mov	r1, r0
 8001448:	e717      	b.n	800127a <__udivmoddi4+0x62>
 800144a:	4610      	mov	r0, r2
 800144c:	e72b      	b.n	80012a6 <__udivmoddi4+0x8e>
 800144e:	f1c6 0120 	rsb	r1, r6, #32
 8001452:	fa2e fc01 	lsr.w	ip, lr, r1
 8001456:	40b7      	lsls	r7, r6
 8001458:	fa0e fe06 	lsl.w	lr, lr, r6
 800145c:	fa20 f101 	lsr.w	r1, r0, r1
 8001460:	ea41 010e 	orr.w	r1, r1, lr
 8001464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001468:	fbbc f8fe 	udiv	r8, ip, lr
 800146c:	b2bc      	uxth	r4, r7
 800146e:	fb0e cc18 	mls	ip, lr, r8, ip
 8001472:	fb08 f904 	mul.w	r9, r8, r4
 8001476:	0c0a      	lsrs	r2, r1, #16
 8001478:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800147c:	40b0      	lsls	r0, r6
 800147e:	4591      	cmp	r9, r2
 8001480:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001484:	b280      	uxth	r0, r0
 8001486:	d93e      	bls.n	8001506 <__udivmoddi4+0x2ee>
 8001488:	18ba      	adds	r2, r7, r2
 800148a:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800148e:	d201      	bcs.n	8001494 <__udivmoddi4+0x27c>
 8001490:	4591      	cmp	r9, r2
 8001492:	d81f      	bhi.n	80014d4 <__udivmoddi4+0x2bc>
 8001494:	eba2 0209 	sub.w	r2, r2, r9
 8001498:	fbb2 f9fe 	udiv	r9, r2, lr
 800149c:	fb09 f804 	mul.w	r8, r9, r4
 80014a0:	fb0e 2a19 	mls	sl, lr, r9, r2
 80014a4:	b28a      	uxth	r2, r1
 80014a6:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80014aa:	4542      	cmp	r2, r8
 80014ac:	d229      	bcs.n	8001502 <__udivmoddi4+0x2ea>
 80014ae:	18ba      	adds	r2, r7, r2
 80014b0:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80014b4:	d2c2      	bcs.n	800143c <__udivmoddi4+0x224>
 80014b6:	4542      	cmp	r2, r8
 80014b8:	d2c0      	bcs.n	800143c <__udivmoddi4+0x224>
 80014ba:	f1a9 0102 	sub.w	r1, r9, #2
 80014be:	443a      	add	r2, r7
 80014c0:	e7bc      	b.n	800143c <__udivmoddi4+0x224>
 80014c2:	45c6      	cmp	lr, r8
 80014c4:	d29b      	bcs.n	80013fe <__udivmoddi4+0x1e6>
 80014c6:	ebb8 0302 	subs.w	r3, r8, r2
 80014ca:	eb6c 0c07 	sbc.w	ip, ip, r7
 80014ce:	3801      	subs	r0, #1
 80014d0:	46e1      	mov	r9, ip
 80014d2:	e794      	b.n	80013fe <__udivmoddi4+0x1e6>
 80014d4:	eba7 0909 	sub.w	r9, r7, r9
 80014d8:	444a      	add	r2, r9
 80014da:	fbb2 f9fe 	udiv	r9, r2, lr
 80014de:	f1a8 0c02 	sub.w	ip, r8, #2
 80014e2:	fb09 f804 	mul.w	r8, r9, r4
 80014e6:	e7db      	b.n	80014a0 <__udivmoddi4+0x288>
 80014e8:	4603      	mov	r3, r0
 80014ea:	e77d      	b.n	80013e8 <__udivmoddi4+0x1d0>
 80014ec:	46d0      	mov	r8, sl
 80014ee:	e765      	b.n	80013bc <__udivmoddi4+0x1a4>
 80014f0:	4608      	mov	r0, r1
 80014f2:	e6fa      	b.n	80012ea <__udivmoddi4+0xd2>
 80014f4:	443b      	add	r3, r7
 80014f6:	3a02      	subs	r2, #2
 80014f8:	e730      	b.n	800135c <__udivmoddi4+0x144>
 80014fa:	f1ac 0c02 	sub.w	ip, ip, #2
 80014fe:	443b      	add	r3, r7
 8001500:	e719      	b.n	8001336 <__udivmoddi4+0x11e>
 8001502:	4649      	mov	r1, r9
 8001504:	e79a      	b.n	800143c <__udivmoddi4+0x224>
 8001506:	eba2 0209 	sub.w	r2, r2, r9
 800150a:	fbb2 f9fe 	udiv	r9, r2, lr
 800150e:	46c4      	mov	ip, r8
 8001510:	fb09 f804 	mul.w	r8, r9, r4
 8001514:	e7c4      	b.n	80014a0 <__udivmoddi4+0x288>
 8001516:	bf00      	nop

08001518 <__aeabi_idiv0>:
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop

0800151c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <MX_ADC1_Init+0x74>)
 800152e:	4a19      	ldr	r2, [pc, #100]	@ (8001594 <MX_ADC1_Init+0x78>)
 8001530:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001532:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <MX_ADC1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <MX_ADC1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800153e:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <MX_ADC1_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <MX_ADC1_Init+0x74>)
 8001546:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800154a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154c:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <MX_ADC1_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <MX_ADC1_Init+0x74>)
 8001554:	2201      	movs	r2, #1
 8001556:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001558:	480d      	ldr	r0, [pc, #52]	@ (8001590 <MX_ADC1_Init+0x74>)
 800155a:	f002 ff8d 	bl	8004478 <HAL_ADC_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001564:	f001 fb23 	bl	8002bae <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001568:	2301      	movs	r3, #1
 800156a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800156c:	2301      	movs	r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	@ (8001590 <MX_ADC1_Init+0x74>)
 800157a:	f003 fa39 	bl	80049f0 <HAL_ADC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001584:	f001 fb13 	bl	8002bae <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200001f0 	.word	0x200001f0
 8001594:	40012400 	.word	0x40012400

08001598 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001664 <HAL_ADC_MspInit+0xcc>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d151      	bne.n	800165c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001668 <HAL_ADC_MspInit+0xd0>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001668 <HAL_ADC_MspInit+0xd0>)
 80015be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <HAL_ADC_MspInit+0xd0>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b25      	ldr	r3, [pc, #148]	@ (8001668 <HAL_ADC_MspInit+0xd0>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a24      	ldr	r2, [pc, #144]	@ (8001668 <HAL_ADC_MspInit+0xd0>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b22      	ldr	r3, [pc, #136]	@ (8001668 <HAL_ADC_MspInit+0xd0>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015e8:	2302      	movs	r3, #2
 80015ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ec:	2303      	movs	r3, #3
 80015ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	4619      	mov	r1, r3
 80015f6:	481d      	ldr	r0, [pc, #116]	@ (800166c <HAL_ADC_MspInit+0xd4>)
 80015f8:	f003 ff48 	bl	800548c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <HAL_ADC_MspInit+0xd8>)
 80015fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001674 <HAL_ADC_MspInit+0xdc>)
 8001600:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001602:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <HAL_ADC_MspInit+0xd8>)
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001608:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <HAL_ADC_MspInit+0xd8>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <HAL_ADC_MspInit+0xd8>)
 8001610:	2280      	movs	r2, #128	@ 0x80
 8001612:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001614:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <HAL_ADC_MspInit+0xd8>)
 8001616:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800161a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <HAL_ADC_MspInit+0xd8>)
 800161e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001622:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <HAL_ADC_MspInit+0xd8>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <HAL_ADC_MspInit+0xd8>)
 800162c:	2200      	movs	r2, #0
 800162e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001630:	480f      	ldr	r0, [pc, #60]	@ (8001670 <HAL_ADC_MspInit+0xd8>)
 8001632:	f003 fc2d 	bl	8004e90 <HAL_DMA_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800163c:	f001 fab7 	bl	8002bae <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a0b      	ldr	r2, [pc, #44]	@ (8001670 <HAL_ADC_MspInit+0xd8>)
 8001644:	621a      	str	r2, [r3, #32]
 8001646:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <HAL_ADC_MspInit+0xd8>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	2012      	movs	r0, #18
 8001652:	f003 fbe6 	bl	8004e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001656:	2012      	movs	r0, #18
 8001658:	f003 fbff 	bl	8004e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800165c:	bf00      	nop
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40012400 	.word	0x40012400
 8001668:	40021000 	.word	0x40021000
 800166c:	40010800 	.word	0x40010800
 8001670:	20000220 	.word	0x20000220
 8001674:	40020008 	.word	0x40020008

08001678 <Battery_GetVoltage>:
void Battery_Init(void) {
    HAL_ADC_Start(&hadc1);
}

// 获取电池电压
float Battery_GetVoltage(void) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
    // 启动ADC转换
    HAL_ADC_PollForConversion(&hadc1, 10);
 800167e:	210a      	movs	r1, #10
 8001680:	4814      	ldr	r0, [pc, #80]	@ (80016d4 <Battery_GetVoltage+0x5c>)
 8001682:	f002 ffd1 	bl	8004628 <HAL_ADC_PollForConversion>

    // 读取ADC值
    adc_raw = HAL_ADC_GetValue(&hadc1);
 8001686:	4813      	ldr	r0, [pc, #76]	@ (80016d4 <Battery_GetVoltage+0x5c>)
 8001688:	f003 f8d4 	bl	8004834 <HAL_ADC_GetValue>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <Battery_GetVoltage+0x60>)
 8001692:	801a      	strh	r2, [r3, #0]

    // 转换为电压值 (3.3V参考电压，12位ADC)
    float adc_voltage = (adc_raw * 3.3f) / 4095.0f;
 8001694:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <Battery_GetVoltage+0x60>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fb1f 	bl	8000cdc <__aeabi_i2f>
 800169e:	4603      	mov	r3, r0
 80016a0:	490e      	ldr	r1, [pc, #56]	@ (80016dc <Battery_GetVoltage+0x64>)
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fb6e 	bl	8000d84 <__aeabi_fmul>
 80016a8:	4603      	mov	r3, r0
 80016aa:	490d      	ldr	r1, [pc, #52]	@ (80016e0 <Battery_GetVoltage+0x68>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fc1d 	bl	8000eec <__aeabi_fdiv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	607b      	str	r3, [r7, #4]

    // 计算实际电池电压 (考虑分压比)
    battery_voltage = adc_voltage * VOLTAGE_DIVIDER_RATIO;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4619      	mov	r1, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fa5a 	bl	8000b74 <__addsf3>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <Battery_GetVoltage+0x6c>)
 80016c6:	601a      	str	r2, [r3, #0]

    return battery_voltage;
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <Battery_GetVoltage+0x6c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200001f0 	.word	0x200001f0
 80016d8:	20000264 	.word	0x20000264
 80016dc:	40533333 	.word	0x40533333
 80016e0:	457ff000 	.word	0x457ff000
 80016e4:	20000268 	.word	0x20000268

080016e8 <Battery_GetPercentage>:

// 获取电池电量百分比
uint8_t Battery_GetPercentage(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
    float voltage = Battery_GetVoltage();
 80016ee:	f7ff ffc3 	bl	8001678 <Battery_GetVoltage>
 80016f2:	6078      	str	r0, [r7, #4]

    // 线性计算电量百分比
    float percentage = 100.0f * (voltage - BATTERY_MIN_VOLTAGE) /
 80016f4:	4915      	ldr	r1, [pc, #84]	@ (800174c <Battery_GetPercentage+0x64>)
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fa3a 	bl	8000b70 <__aeabi_fsub>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4914      	ldr	r1, [pc, #80]	@ (8001750 <Battery_GetPercentage+0x68>)
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fb3f 	bl	8000d84 <__aeabi_fmul>
 8001706:	4603      	mov	r3, r0
 8001708:	4912      	ldr	r1, [pc, #72]	@ (8001754 <Battery_GetPercentage+0x6c>)
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fbee 	bl	8000eec <__aeabi_fdiv>
 8001710:	4603      	mov	r3, r0
 8001712:	603b      	str	r3, [r7, #0]
                      (BATTERY_MAX_VOLTAGE - BATTERY_MIN_VOLTAGE);

    // 限制在0-100范围
    if (percentage < 0) return 0;
 8001714:	f04f 0100 	mov.w	r1, #0
 8001718:	6838      	ldr	r0, [r7, #0]
 800171a:	f7ff fcd1 	bl	80010c0 <__aeabi_fcmplt>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <Battery_GetPercentage+0x40>
 8001724:	2300      	movs	r3, #0
 8001726:	e00d      	b.n	8001744 <Battery_GetPercentage+0x5c>
    if (percentage > 100) return 100;
 8001728:	4909      	ldr	r1, [pc, #36]	@ (8001750 <Battery_GetPercentage+0x68>)
 800172a:	6838      	ldr	r0, [r7, #0]
 800172c:	f7ff fce6 	bl	80010fc <__aeabi_fcmpgt>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <Battery_GetPercentage+0x52>
 8001736:	2364      	movs	r3, #100	@ 0x64
 8001738:	e004      	b.n	8001744 <Battery_GetPercentage+0x5c>
    return (uint8_t)percentage;
 800173a:	6838      	ldr	r0, [r7, #0]
 800173c:	f7ff fcfe 	bl	800113c <__aeabi_f2uiz>
 8001740:	4603      	mov	r3, r0
 8001742:	b2db      	uxtb	r3, r3
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40533333 	.word	0x40533333
 8001750:	42c80000 	.word	0x42c80000
 8001754:	3f666664 	.word	0x3f666664

08001758 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_DMA_Init+0x58>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	4a13      	ldr	r2, [pc, #76]	@ (80017b0 <MX_DMA_Init+0x58>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6153      	str	r3, [r2, #20]
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_DMA_Init+0x58>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	200b      	movs	r0, #11
 800177c:	f003 fb51 	bl	8004e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001780:	200b      	movs	r0, #11
 8001782:	f003 fb6a 	bl	8004e5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2010      	movs	r0, #16
 800178c:	f003 fb49 	bl	8004e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001790:	2010      	movs	r0, #16
 8001792:	f003 fb62 	bl	8004e5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2011      	movs	r0, #17
 800179c:	f003 fb41 	bl	8004e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80017a0:	2011      	movs	r0, #17
 80017a2:	f003 fb5a 	bl	8004e5a <HAL_NVIC_EnableIRQ>

}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000

080017b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 0310 	add.w	r3, r7, #16
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c8:	4b26      	ldr	r3, [pc, #152]	@ (8001864 <MX_GPIO_Init+0xb0>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a25      	ldr	r2, [pc, #148]	@ (8001864 <MX_GPIO_Init+0xb0>)
 80017ce:	f043 0320 	orr.w	r3, r3, #32
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b23      	ldr	r3, [pc, #140]	@ (8001864 <MX_GPIO_Init+0xb0>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0320 	and.w	r3, r3, #32
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	4b20      	ldr	r3, [pc, #128]	@ (8001864 <MX_GPIO_Init+0xb0>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001864 <MX_GPIO_Init+0xb0>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001864 <MX_GPIO_Init+0xb0>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001864 <MX_GPIO_Init+0xb0>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a19      	ldr	r2, [pc, #100]	@ (8001864 <MX_GPIO_Init+0xb0>)
 80017fe:	f043 0308 	orr.w	r3, r3, #8
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <MX_GPIO_Init+0xb0>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	21f0      	movs	r1, #240	@ 0xf0
 8001814:	4814      	ldr	r0, [pc, #80]	@ (8001868 <MX_GPIO_Init+0xb4>)
 8001816:	f004 f879 	bl	800590c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	210f      	movs	r1, #15
 800181e:	4813      	ldr	r0, [pc, #76]	@ (800186c <MX_GPIO_Init+0xb8>)
 8001820:	f004 f874 	bl	800590c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001824:	23f0      	movs	r3, #240	@ 0xf0
 8001826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2302      	movs	r3, #2
 8001832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	4619      	mov	r1, r3
 800183a:	480b      	ldr	r0, [pc, #44]	@ (8001868 <MX_GPIO_Init+0xb4>)
 800183c:	f003 fe26 	bl	800548c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001840:	230f      	movs	r3, #15
 8001842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2302      	movs	r3, #2
 800184e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	4619      	mov	r1, r3
 8001856:	4805      	ldr	r0, [pc, #20]	@ (800186c <MX_GPIO_Init+0xb8>)
 8001858:	f003 fe18 	bl	800548c <HAL_GPIO_Init>

}
 800185c:	bf00      	nop
 800185e:	3720      	adds	r7, #32
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	40010800 	.word	0x40010800
 800186c:	40010c00 	.word	0x40010c00

08001870 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001874:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <MX_I2C1_Init+0x50>)
 8001876:	4a13      	ldr	r2, [pc, #76]	@ (80018c4 <MX_I2C1_Init+0x54>)
 8001878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800187a:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <MX_I2C1_Init+0x50>)
 800187c:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <MX_I2C1_Init+0x58>)
 800187e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001880:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <MX_I2C1_Init+0x50>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001886:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <MX_I2C1_Init+0x50>)
 8001888:	2200      	movs	r2, #0
 800188a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <MX_I2C1_Init+0x50>)
 800188e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001892:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001894:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <MX_I2C1_Init+0x50>)
 8001896:	2200      	movs	r2, #0
 8001898:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800189a:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <MX_I2C1_Init+0x50>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a0:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <MX_I2C1_Init+0x50>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <MX_I2C1_Init+0x50>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ac:	4804      	ldr	r0, [pc, #16]	@ (80018c0 <MX_I2C1_Init+0x50>)
 80018ae:	f004 f845 	bl	800593c <HAL_I2C_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018b8:	f001 f979 	bl	8002bae <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2000026c 	.word	0x2000026c
 80018c4:	40005400 	.word	0x40005400
 80018c8:	00061a80 	.word	0x00061a80

080018cc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <MX_I2C2_Init+0x50>)
 80018d2:	4a13      	ldr	r2, [pc, #76]	@ (8001920 <MX_I2C2_Init+0x54>)
 80018d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80018d6:	4b11      	ldr	r3, [pc, #68]	@ (800191c <MX_I2C2_Init+0x50>)
 80018d8:	4a12      	ldr	r2, [pc, #72]	@ (8001924 <MX_I2C2_Init+0x58>)
 80018da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <MX_I2C2_Init+0x50>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <MX_I2C2_Init+0x50>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <MX_I2C2_Init+0x50>)
 80018ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f0:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <MX_I2C2_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018f6:	4b09      	ldr	r3, [pc, #36]	@ (800191c <MX_I2C2_Init+0x50>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018fc:	4b07      	ldr	r3, [pc, #28]	@ (800191c <MX_I2C2_Init+0x50>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <MX_I2C2_Init+0x50>)
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001908:	4804      	ldr	r0, [pc, #16]	@ (800191c <MX_I2C2_Init+0x50>)
 800190a:	f004 f817 	bl	800593c <HAL_I2C_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001914:	f001 f94b 	bl	8002bae <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200002c0 	.word	0x200002c0
 8001920:	40005800 	.word	0x40005800
 8001924:	00061a80 	.word	0x00061a80

08001928 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	@ 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0318 	add.w	r3, r7, #24
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a3e      	ldr	r2, [pc, #248]	@ (8001a3c <HAL_I2C_MspInit+0x114>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d14b      	bne.n	80019e0 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001948:	4b3d      	ldr	r3, [pc, #244]	@ (8001a40 <HAL_I2C_MspInit+0x118>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a3c      	ldr	r2, [pc, #240]	@ (8001a40 <HAL_I2C_MspInit+0x118>)
 800194e:	f043 0308 	orr.w	r3, r3, #8
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b3a      	ldr	r3, [pc, #232]	@ (8001a40 <HAL_I2C_MspInit+0x118>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001960:	23c0      	movs	r3, #192	@ 0xc0
 8001962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001964:	2312      	movs	r3, #18
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196c:	f107 0318 	add.w	r3, r7, #24
 8001970:	4619      	mov	r1, r3
 8001972:	4834      	ldr	r0, [pc, #208]	@ (8001a44 <HAL_I2C_MspInit+0x11c>)
 8001974:	f003 fd8a 	bl	800548c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001978:	4b31      	ldr	r3, [pc, #196]	@ (8001a40 <HAL_I2C_MspInit+0x118>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	4a30      	ldr	r2, [pc, #192]	@ (8001a40 <HAL_I2C_MspInit+0x118>)
 800197e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001982:	61d3      	str	r3, [r2, #28]
 8001984:	4b2e      	ldr	r3, [pc, #184]	@ (8001a40 <HAL_I2C_MspInit+0x118>)
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001990:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <HAL_I2C_MspInit+0x120>)
 8001992:	4a2e      	ldr	r2, [pc, #184]	@ (8001a4c <HAL_I2C_MspInit+0x124>)
 8001994:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001996:	4b2c      	ldr	r3, [pc, #176]	@ (8001a48 <HAL_I2C_MspInit+0x120>)
 8001998:	2200      	movs	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800199c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a48 <HAL_I2C_MspInit+0x120>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019a2:	4b29      	ldr	r3, [pc, #164]	@ (8001a48 <HAL_I2C_MspInit+0x120>)
 80019a4:	2280      	movs	r2, #128	@ 0x80
 80019a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019a8:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <HAL_I2C_MspInit+0x120>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ae:	4b26      	ldr	r3, [pc, #152]	@ (8001a48 <HAL_I2C_MspInit+0x120>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80019b4:	4b24      	ldr	r3, [pc, #144]	@ (8001a48 <HAL_I2C_MspInit+0x120>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80019ba:	4b23      	ldr	r3, [pc, #140]	@ (8001a48 <HAL_I2C_MspInit+0x120>)
 80019bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80019c2:	4821      	ldr	r0, [pc, #132]	@ (8001a48 <HAL_I2C_MspInit+0x120>)
 80019c4:	f003 fa64 	bl	8004e90 <HAL_DMA_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 80019ce:	f001 f8ee 	bl	8002bae <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a48 <HAL_I2C_MspInit+0x120>)
 80019d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80019d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a48 <HAL_I2C_MspInit+0x120>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80019de:	e029      	b.n	8001a34 <HAL_I2C_MspInit+0x10c>
  else if(i2cHandle->Instance==I2C2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a50 <HAL_I2C_MspInit+0x128>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d124      	bne.n	8001a34 <HAL_I2C_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <HAL_I2C_MspInit+0x118>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	4a14      	ldr	r2, [pc, #80]	@ (8001a40 <HAL_I2C_MspInit+0x118>)
 80019f0:	f043 0308 	orr.w	r3, r3, #8
 80019f4:	6193      	str	r3, [r2, #24]
 80019f6:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <HAL_I2C_MspInit+0x118>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a02:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a08:	2312      	movs	r3, #18
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	4619      	mov	r1, r3
 8001a16:	480b      	ldr	r0, [pc, #44]	@ (8001a44 <HAL_I2C_MspInit+0x11c>)
 8001a18:	f003 fd38 	bl	800548c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <HAL_I2C_MspInit+0x118>)
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	4a07      	ldr	r2, [pc, #28]	@ (8001a40 <HAL_I2C_MspInit+0x118>)
 8001a22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a26:	61d3      	str	r3, [r2, #28]
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <HAL_I2C_MspInit+0x118>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
}
 8001a34:	bf00      	nop
 8001a36:	3728      	adds	r7, #40	@ 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40005400 	.word	0x40005400
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010c00 	.word	0x40010c00
 8001a48:	20000314 	.word	0x20000314
 8001a4c:	40020080 	.word	0x40020080
 8001a50:	40005800 	.word	0x40005800

08001a54 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a17      	ldr	r2, [pc, #92]	@ (8001ac0 <HAL_I2C_MspDeInit+0x6c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d113      	bne.n	8001a8e <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001a66:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <HAL_I2C_MspDeInit+0x70>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a16      	ldr	r2, [pc, #88]	@ (8001ac4 <HAL_I2C_MspDeInit+0x70>)
 8001a6c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001a70:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001a72:	2140      	movs	r1, #64	@ 0x40
 8001a74:	4814      	ldr	r0, [pc, #80]	@ (8001ac8 <HAL_I2C_MspDeInit+0x74>)
 8001a76:	f003 fe8d 	bl	8005794 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001a7a:	2180      	movs	r1, #128	@ 0x80
 8001a7c:	4812      	ldr	r0, [pc, #72]	@ (8001ac8 <HAL_I2C_MspDeInit+0x74>)
 8001a7e:	f003 fe89 	bl	8005794 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 fa5c 	bl	8004f44 <HAL_DMA_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001a8c:	e014      	b.n	8001ab8 <HAL_I2C_MspDeInit+0x64>
  else if(i2cHandle->Instance==I2C2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a0e      	ldr	r2, [pc, #56]	@ (8001acc <HAL_I2C_MspDeInit+0x78>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d10f      	bne.n	8001ab8 <HAL_I2C_MspDeInit+0x64>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001a98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <HAL_I2C_MspDeInit+0x70>)
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	4a09      	ldr	r2, [pc, #36]	@ (8001ac4 <HAL_I2C_MspDeInit+0x70>)
 8001a9e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001aa2:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001aa4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001aa8:	4807      	ldr	r0, [pc, #28]	@ (8001ac8 <HAL_I2C_MspDeInit+0x74>)
 8001aaa:	f003 fe73 	bl	8005794 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001aae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ab2:	4805      	ldr	r0, [pc, #20]	@ (8001ac8 <HAL_I2C_MspDeInit+0x74>)
 8001ab4:	f003 fe6e 	bl	8005794 <HAL_GPIO_DeInit>
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40005400 	.word	0x40005400
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40010c00 	.word	0x40010c00
 8001acc:	40005800 	.word	0x40005800

08001ad0 <JDY23_Init>:

JDY23_Command_t jdy23_cmd = {0};
uint8_t jdy23_rx_buffer[JDY23_RX_BUFFER_SIZE];

// 初始化蓝牙模块
void JDY23_Init(void) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
    // 重置指令结构体
    JDY23_ResetCommand();
 8001ad4:	f000 f816 	bl	8001b04 <JDY23_ResetCommand>

    // 启动DMA接收
    HAL_UART_Receive_DMA(&huart2, jdy23_rx_buffer, JDY23_RX_BUFFER_SIZE);
 8001ad8:	2240      	movs	r2, #64	@ 0x40
 8001ada:	4907      	ldr	r1, [pc, #28]	@ (8001af8 <JDY23_Init+0x28>)
 8001adc:	4807      	ldr	r0, [pc, #28]	@ (8001afc <JDY23_Init+0x2c>)
 8001ade:	f007 f972 	bl	8008dc6 <HAL_UART_Receive_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT); // 禁用半传输中断
 8001ae2:	4b07      	ldr	r3, [pc, #28]	@ (8001b00 <JDY23_Init+0x30>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <JDY23_Init+0x30>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0204 	bic.w	r2, r2, #4
 8001af0:	601a      	str	r2, [r3, #0]
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000036c 	.word	0x2000036c
 8001afc:	200009b8 	.word	0x200009b8
 8001b00:	20000a00 	.word	0x20000a00

08001b04 <JDY23_ResetCommand>:

// 重置指令为安全值
void JDY23_ResetCommand(void) {
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
    jdy23_cmd.throttle = 0;
 8001b08:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <JDY23_ResetCommand+0x2c>)
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
    jdy23_cmd.roll = 0;
 8001b10:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <JDY23_ResetCommand+0x2c>)
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
    jdy23_cmd.pitch = 0;
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <JDY23_ResetCommand+0x2c>)
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
    jdy23_cmd.yaw = 0;
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <JDY23_ResetCommand+0x2c>)
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	20000358 	.word	0x20000358

08001b34 <JDY23_CheckTimeout>:

// 检查指令超时
void JDY23_CheckTimeout(void) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
    if (HAL_GetTick() - jdy23_cmd.last_update > JDY23_CMD_TIMEOUT) {
 8001b38:	f002 fc70 	bl	800441c <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <JDY23_CheckTimeout+0x1c>)
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b64      	cmp	r3, #100	@ 0x64
 8001b46:	d901      	bls.n	8001b4c <JDY23_CheckTimeout+0x18>
        JDY23_ResetCommand();  // 超时后重置指令
 8001b48:	f7ff ffdc 	bl	8001b04 <JDY23_ResetCommand>
    }
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000358 	.word	0x20000358

08001b54 <JDY23_ProcessData>:

// 处理接收到的数据
void JDY23_ProcessData(uint8_t *data, uint16_t size) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
    // 查找帧头
    for (int i = 0; i < size; i++) {
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	e09b      	b.n	8001c9e <JDY23_ProcessData+0x14a>
        if (data[i] == 'T' && i + 15 < size && data[i + 15] == '\n') {
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b54      	cmp	r3, #84	@ 0x54
 8001b70:	f040 8092 	bne.w	8001c98 <JDY23_ProcessData+0x144>
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f103 020f 	add.w	r2, r3, #15
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	f280 808b 	bge.w	8001c98 <JDY23_ProcessData+0x144>
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	330f      	adds	r3, #15
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b0a      	cmp	r3, #10
 8001b8e:	f040 8083 	bne.w	8001c98 <JDY23_ProcessData+0x144>
            // 控制指令: TxxxRyyyPpppYyyy\n
            char buffer[5] = {0};
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	711a      	strb	r2, [r3, #4]

            // 解析油门
            buffer[0] = data[i+1]; buffer[1] = data[i+2]; buffer[2] = data[i+3];
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	733b      	strb	r3, [r7, #12]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3302      	adds	r3, #2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	737b      	strb	r3, [r7, #13]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	3303      	adds	r3, #3
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	73bb      	strb	r3, [r7, #14]
            jdy23_cmd.throttle = atoi(buffer);
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f007 ffc3 	bl	8009b50 <atoi>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f885 	bl	8000cdc <__aeabi_i2f>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a36      	ldr	r2, [pc, #216]	@ (8001cb0 <JDY23_ProcessData+0x15c>)
 8001bd6:	6013      	str	r3, [r2, #0]

            // 解析滚转
            buffer[0] = data[i+5]; buffer[1] = data[i+6]; buffer[2] = data[i+7];
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3305      	adds	r3, #5
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	733b      	strb	r3, [r7, #12]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3306      	adds	r3, #6
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	737b      	strb	r3, [r7, #13]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3307      	adds	r3, #7
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	73bb      	strb	r3, [r7, #14]
            jdy23_cmd.roll = atoi(buffer);
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	4618      	mov	r0, r3
 8001c02:	f007 ffa5 	bl	8009b50 <atoi>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff f867 	bl	8000cdc <__aeabi_i2f>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a27      	ldr	r2, [pc, #156]	@ (8001cb0 <JDY23_ProcessData+0x15c>)
 8001c12:	6053      	str	r3, [r2, #4]

            // 解析俯仰
            buffer[0] = data[i+9]; buffer[1] = data[i+10]; buffer[2] = data[i+11];
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3309      	adds	r3, #9
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	733b      	strb	r3, [r7, #12]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	330a      	adds	r3, #10
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	737b      	strb	r3, [r7, #13]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	330b      	adds	r3, #11
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	73bb      	strb	r3, [r7, #14]
            jdy23_cmd.pitch = atoi(buffer);
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f007 ff87 	bl	8009b50 <atoi>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff f849 	bl	8000cdc <__aeabi_i2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a18      	ldr	r2, [pc, #96]	@ (8001cb0 <JDY23_ProcessData+0x15c>)
 8001c4e:	6093      	str	r3, [r2, #8]

            // 解析偏航
            buffer[0] = data[i+13]; buffer[1] = data[i+14]; buffer[2] = data[i+15];
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	330d      	adds	r3, #13
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	733b      	strb	r3, [r7, #12]
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	330e      	adds	r3, #14
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4413      	add	r3, r2
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	737b      	strb	r3, [r7, #13]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	330f      	adds	r3, #15
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	73bb      	strb	r3, [r7, #14]
            jdy23_cmd.yaw = atoi(buffer);
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f007 ff69 	bl	8009b50 <atoi>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f82b 	bl	8000cdc <__aeabi_i2f>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4a09      	ldr	r2, [pc, #36]	@ (8001cb0 <JDY23_ProcessData+0x15c>)
 8001c8a:	60d3      	str	r3, [r2, #12]

            jdy23_cmd.last_update = HAL_GetTick();
 8001c8c:	f002 fbc6 	bl	800441c <HAL_GetTick>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4a07      	ldr	r2, [pc, #28]	@ (8001cb0 <JDY23_ProcessData+0x15c>)
 8001c94:	6113      	str	r3, [r2, #16]
 8001c96:	e007      	b.n	8001ca8 <JDY23_ProcessData+0x154>
    for (int i = 0; i < size; i++) {
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	f6ff af5f 	blt.w	8001b66 <JDY23_ProcessData+0x12>
            return;
        }
    }
}
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000358 	.word	0x20000358

08001cb4 <HAL_UART_RxCpltCallback>:

// DMA接收完成回调
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a07      	ldr	r2, [pc, #28]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d108      	bne.n	8001cd8 <HAL_UART_RxCpltCallback+0x24>
        JDY23_ProcessData(jdy23_rx_buffer, JDY23_RX_BUFFER_SIZE);
 8001cc6:	2140      	movs	r1, #64	@ 0x40
 8001cc8:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <HAL_UART_RxCpltCallback+0x30>)
 8001cca:	f7ff ff43 	bl	8001b54 <JDY23_ProcessData>
        HAL_UART_Receive_DMA(&huart2, jdy23_rx_buffer, JDY23_RX_BUFFER_SIZE);
 8001cce:	2240      	movs	r2, #64	@ 0x40
 8001cd0:	4904      	ldr	r1, [pc, #16]	@ (8001ce4 <HAL_UART_RxCpltCallback+0x30>)
 8001cd2:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x34>)
 8001cd4:	f007 f877 	bl	8008dc6 <HAL_UART_Receive_DMA>
    }
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40004400 	.word	0x40004400
 8001ce4:	2000036c 	.word	0x2000036c
 8001ce8:	200009b8 	.word	0x200009b8

08001cec <Madgwick_Init>:

#include "madgwick.h"
#include <math.h>

// 初始化滤波器
void Madgwick_Init(MadgwickFilter *filter, float beta, float sampleFreq) {
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
    filter->q0 = 1.0f;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001cfe:	601a      	str	r2, [r3, #0]
    filter->q1 = 0.0f;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	605a      	str	r2, [r3, #4]
    filter->q2 = 0.0f;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
    filter->q3 = 0.0f;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	60da      	str	r2, [r3, #12]
    filter->beta = beta;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	611a      	str	r2, [r3, #16]
    filter->sampleFreq = sampleFreq;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	615a      	str	r2, [r3, #20]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
	...

08001d30 <Madgwick_Update>:

// Madgwick滤波更新
void Madgwick_Update(MadgwickFilter *filter,
                     float gx, float gy, float gz,
                     float ax, float ay, float az) {
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b09f      	sub	sp, #124	@ 0x7c
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
    float q0 = filter->q0, q1 = filter->q1, q2 = filter->q2, q3 = filter->q3;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	65bb      	str	r3, [r7, #88]	@ 0x58
    float s0, s1, s2, s3;
    float qDot1, qDot2, qDot3, qDot4;
    float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

    // 速率转弧度/秒
    gx *= 0.0174533f; // deg/s to rad/s
 8001d56:	4917      	ldr	r1, [pc, #92]	@ (8001db4 <Madgwick_Update+0x84>)
 8001d58:	68b8      	ldr	r0, [r7, #8]
 8001d5a:	f7ff f813 	bl	8000d84 <__aeabi_fmul>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	60bb      	str	r3, [r7, #8]
    gy *= 0.0174533f;
 8001d62:	4914      	ldr	r1, [pc, #80]	@ (8001db4 <Madgwick_Update+0x84>)
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff f80d 	bl	8000d84 <__aeabi_fmul>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	607b      	str	r3, [r7, #4]
    gz *= 0.0174533f;
 8001d6e:	4911      	ldr	r1, [pc, #68]	@ (8001db4 <Madgwick_Update+0x84>)
 8001d70:	6838      	ldr	r0, [r7, #0]
 8001d72:	f7ff f807 	bl	8000d84 <__aeabi_fmul>
 8001d76:	4603      	mov	r3, r0
 8001d78:	603b      	str	r3, [r7, #0]

    // 梯度下降算法校正
    if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001d7a:	f04f 0100 	mov.w	r1, #0
 8001d7e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001d82:	f7ff f993 	bl	80010ac <__aeabi_fcmpeq>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d015      	beq.n	8001db8 <Madgwick_Update+0x88>
 8001d8c:	f04f 0100 	mov.w	r1, #0
 8001d90:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001d94:	f7ff f98a 	bl	80010ac <__aeabi_fcmpeq>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00c      	beq.n	8001db8 <Madgwick_Update+0x88>
 8001d9e:	f04f 0100 	mov.w	r1, #0
 8001da2:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001da6:	f7ff f981 	bl	80010ac <__aeabi_fcmpeq>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f040 82b1 	bne.w	8002314 <Madgwick_Update+0x5e4>
 8001db2:	e001      	b.n	8001db8 <Madgwick_Update+0x88>
 8001db4:	3c8efa39 	.word	0x3c8efa39
        // 归一化加速度计数据
        recipNorm = 1.0f / sqrtf(ax * ax + ay * ay + az * az);
 8001db8:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001dbc:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001dc0:	f7fe ffe0 	bl	8000d84 <__aeabi_fmul>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461c      	mov	r4, r3
 8001dc8:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001dcc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001dd0:	f7fe ffd8 	bl	8000d84 <__aeabi_fmul>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f7fe fecb 	bl	8000b74 <__addsf3>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461c      	mov	r4, r3
 8001de2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001de6:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001dea:	f7fe ffcb 	bl	8000d84 <__aeabi_fmul>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4619      	mov	r1, r3
 8001df2:	4620      	mov	r0, r4
 8001df4:	f7fe febe 	bl	8000b74 <__addsf3>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f00c fa66 	bl	800e2cc <sqrtf>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4619      	mov	r1, r3
 8001e04:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001e08:	f7ff f870 	bl	8000eec <__aeabi_fdiv>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	657b      	str	r3, [r7, #84]	@ 0x54
        ax *= recipNorm;
 8001e10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e12:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001e16:	f7fe ffb5 	bl	8000d84 <__aeabi_fmul>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        ay *= recipNorm;
 8001e20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e22:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001e26:	f7fe ffad 	bl	8000d84 <__aeabi_fmul>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        az *= recipNorm;
 8001e30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e32:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001e36:	f7fe ffa5 	bl	8000d84 <__aeabi_fmul>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

        // 辅助变量避免重复计算
        _2q0 = 2.0f * q0;
 8001e40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e42:	4619      	mov	r1, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fe95 	bl	8000b74 <__addsf3>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	653b      	str	r3, [r7, #80]	@ 0x50
        _2q1 = 2.0f * q1;
 8001e4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e50:	4619      	mov	r1, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fe8e 	bl	8000b74 <__addsf3>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        _2q2 = 2.0f * q2;
 8001e5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fe87 	bl	8000b74 <__addsf3>
 8001e66:	4603      	mov	r3, r0
 8001e68:	64bb      	str	r3, [r7, #72]	@ 0x48
        _2q3 = 2.0f * q3;
 8001e6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fe80 	bl	8000b74 <__addsf3>
 8001e74:	4603      	mov	r3, r0
 8001e76:	647b      	str	r3, [r7, #68]	@ 0x44
        _4q0 = 4.0f * q0;
 8001e78:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001e7c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001e7e:	f7fe ff81 	bl	8000d84 <__aeabi_fmul>
 8001e82:	4603      	mov	r3, r0
 8001e84:	643b      	str	r3, [r7, #64]	@ 0x40
        _4q1 = 4.0f * q1;
 8001e86:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001e8a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001e8c:	f7fe ff7a 	bl	8000d84 <__aeabi_fmul>
 8001e90:	4603      	mov	r3, r0
 8001e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        _4q2 = 4.0f * q2;
 8001e94:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001e98:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001e9a:	f7fe ff73 	bl	8000d84 <__aeabi_fmul>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
        _8q1 = 8.0f * q1;
 8001ea2:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8001ea6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001ea8:	f7fe ff6c 	bl	8000d84 <__aeabi_fmul>
 8001eac:	4603      	mov	r3, r0
 8001eae:	637b      	str	r3, [r7, #52]	@ 0x34
        _8q2 = 8.0f * q2;
 8001eb0:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8001eb4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001eb6:	f7fe ff65 	bl	8000d84 <__aeabi_fmul>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	633b      	str	r3, [r7, #48]	@ 0x30
        q0q0 = q0 * q0;
 8001ebe:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001ec0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001ec2:	f7fe ff5f 	bl	8000d84 <__aeabi_fmul>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        q1q1 = q1 * q1;
 8001eca:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001ecc:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001ece:	f7fe ff59 	bl	8000d84 <__aeabi_fmul>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
        q2q2 = q2 * q2;
 8001ed6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001ed8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001eda:	f7fe ff53 	bl	8000d84 <__aeabi_fmul>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
        q3q3 = q3 * q3;
 8001ee2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001ee4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001ee6:	f7fe ff4d 	bl	8000d84 <__aeabi_fmul>
 8001eea:	4603      	mov	r3, r0
 8001eec:	623b      	str	r3, [r7, #32]

        // 梯度下降目标函数
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8001eee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ef0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001ef2:	f7fe ff47 	bl	8000d84 <__aeabi_fmul>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	461c      	mov	r4, r3
 8001efa:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001efe:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001f00:	f7fe ff40 	bl	8000d84 <__aeabi_fmul>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4619      	mov	r1, r3
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7fe fe33 	bl	8000b74 <__addsf3>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461c      	mov	r4, r3
 8001f12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f14:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001f16:	f7fe ff35 	bl	8000d84 <__aeabi_fmul>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f7fe fe28 	bl	8000b74 <__addsf3>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461c      	mov	r4, r3
 8001f28:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001f2c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001f2e:	f7fe ff29 	bl	8000d84 <__aeabi_fmul>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4619      	mov	r1, r3
 8001f36:	4620      	mov	r0, r4
 8001f38:	f7fe fe1a 	bl	8000b70 <__aeabi_fsub>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	61fb      	str	r3, [r7, #28]
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001f40:	6a39      	ldr	r1, [r7, #32]
 8001f42:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f44:	f7fe ff1e 	bl	8000d84 <__aeabi_fmul>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	461c      	mov	r4, r3
 8001f4c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001f50:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001f52:	f7fe ff17 	bl	8000d84 <__aeabi_fmul>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f7fe fe08 	bl	8000b70 <__aeabi_fsub>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461c      	mov	r4, r3
 8001f64:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001f68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f6a:	f7fe ff0b 	bl	8000d84 <__aeabi_fmul>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe ff06 	bl	8000d84 <__aeabi_fmul>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f7fe fdf9 	bl	8000b74 <__addsf3>
 8001f82:	4603      	mov	r3, r0
 8001f84:	461c      	mov	r4, r3
 8001f86:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001f8a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f8c:	f7fe fefa 	bl	8000d84 <__aeabi_fmul>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4619      	mov	r1, r3
 8001f94:	4620      	mov	r0, r4
 8001f96:	f7fe fdeb 	bl	8000b70 <__aeabi_fsub>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fde6 	bl	8000b70 <__aeabi_fsub>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461c      	mov	r4, r3
 8001fa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001faa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001fac:	f7fe feea 	bl	8000d84 <__aeabi_fmul>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f7fe fddd 	bl	8000b74 <__addsf3>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461c      	mov	r4, r3
 8001fbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fc0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001fc2:	f7fe fedf 	bl	8000d84 <__aeabi_fmul>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7fe fdd2 	bl	8000b74 <__addsf3>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461c      	mov	r4, r3
 8001fd4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001fd8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001fda:	f7fe fed3 	bl	8000d84 <__aeabi_fmul>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f7fe fdc6 	bl	8000b74 <__addsf3>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	61bb      	str	r3, [r7, #24]
        s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8001fec:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001ff0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001ff2:	f7fe fec7 	bl	8000d84 <__aeabi_fmul>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fec2 	bl	8000d84 <__aeabi_fmul>
 8002000:	4603      	mov	r3, r0
 8002002:	461c      	mov	r4, r3
 8002004:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8002008:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800200a:	f7fe febb 	bl	8000d84 <__aeabi_fmul>
 800200e:	4603      	mov	r3, r0
 8002010:	4619      	mov	r1, r3
 8002012:	4620      	mov	r0, r4
 8002014:	f7fe fdae 	bl	8000b74 <__addsf3>
 8002018:	4603      	mov	r3, r0
 800201a:	461c      	mov	r4, r3
 800201c:	6a39      	ldr	r1, [r7, #32]
 800201e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002020:	f7fe feb0 	bl	8000d84 <__aeabi_fmul>
 8002024:	4603      	mov	r3, r0
 8002026:	4619      	mov	r1, r3
 8002028:	4620      	mov	r0, r4
 800202a:	f7fe fda3 	bl	8000b74 <__addsf3>
 800202e:	4603      	mov	r3, r0
 8002030:	461c      	mov	r4, r3
 8002032:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002036:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002038:	f7fe fea4 	bl	8000d84 <__aeabi_fmul>
 800203c:	4603      	mov	r3, r0
 800203e:	4619      	mov	r1, r3
 8002040:	4620      	mov	r0, r4
 8002042:	f7fe fd95 	bl	8000b70 <__aeabi_fsub>
 8002046:	4603      	mov	r3, r0
 8002048:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fd90 	bl	8000b70 <__aeabi_fsub>
 8002050:	4603      	mov	r3, r0
 8002052:	461c      	mov	r4, r3
 8002054:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002056:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002058:	f7fe fe94 	bl	8000d84 <__aeabi_fmul>
 800205c:	4603      	mov	r3, r0
 800205e:	4619      	mov	r1, r3
 8002060:	4620      	mov	r0, r4
 8002062:	f7fe fd87 	bl	8000b74 <__addsf3>
 8002066:	4603      	mov	r3, r0
 8002068:	461c      	mov	r4, r3
 800206a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800206c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800206e:	f7fe fe89 	bl	8000d84 <__aeabi_fmul>
 8002072:	4603      	mov	r3, r0
 8002074:	4619      	mov	r1, r3
 8002076:	4620      	mov	r0, r4
 8002078:	f7fe fd7c 	bl	8000b74 <__addsf3>
 800207c:	4603      	mov	r3, r0
 800207e:	461c      	mov	r4, r3
 8002080:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002084:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002086:	f7fe fe7d 	bl	8000d84 <__aeabi_fmul>
 800208a:	4603      	mov	r3, r0
 800208c:	4619      	mov	r1, r3
 800208e:	4620      	mov	r0, r4
 8002090:	f7fe fd70 	bl	8000b74 <__addsf3>
 8002094:	4603      	mov	r3, r0
 8002096:	617b      	str	r3, [r7, #20]
        s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002098:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800209c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800209e:	f7fe fe71 	bl	8000d84 <__aeabi_fmul>
 80020a2:	4603      	mov	r3, r0
 80020a4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fe6c 	bl	8000d84 <__aeabi_fmul>
 80020ac:	4603      	mov	r3, r0
 80020ae:	461c      	mov	r4, r3
 80020b0:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80020b4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80020b6:	f7fe fe65 	bl	8000d84 <__aeabi_fmul>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4619      	mov	r1, r3
 80020be:	4620      	mov	r0, r4
 80020c0:	f7fe fd56 	bl	8000b70 <__aeabi_fsub>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461c      	mov	r4, r3
 80020c8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80020cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020ce:	f7fe fe59 	bl	8000d84 <__aeabi_fmul>
 80020d2:	4603      	mov	r3, r0
 80020d4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fe54 	bl	8000d84 <__aeabi_fmul>
 80020dc:	4603      	mov	r3, r0
 80020de:	4619      	mov	r1, r3
 80020e0:	4620      	mov	r0, r4
 80020e2:	f7fe fd47 	bl	8000b74 <__addsf3>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461c      	mov	r4, r3
 80020ea:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80020ee:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80020f0:	f7fe fe48 	bl	8000d84 <__aeabi_fmul>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4619      	mov	r1, r3
 80020f8:	4620      	mov	r0, r4
 80020fa:	f7fe fd39 	bl	8000b70 <__aeabi_fsub>
 80020fe:	4603      	mov	r3, r0
 8002100:	613b      	str	r3, [r7, #16]

        // 归一化步长
        recipNorm = 1.0f / sqrtf(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8002102:	69f9      	ldr	r1, [r7, #28]
 8002104:	69f8      	ldr	r0, [r7, #28]
 8002106:	f7fe fe3d 	bl	8000d84 <__aeabi_fmul>
 800210a:	4603      	mov	r3, r0
 800210c:	461c      	mov	r4, r3
 800210e:	69b9      	ldr	r1, [r7, #24]
 8002110:	69b8      	ldr	r0, [r7, #24]
 8002112:	f7fe fe37 	bl	8000d84 <__aeabi_fmul>
 8002116:	4603      	mov	r3, r0
 8002118:	4619      	mov	r1, r3
 800211a:	4620      	mov	r0, r4
 800211c:	f7fe fd2a 	bl	8000b74 <__addsf3>
 8002120:	4603      	mov	r3, r0
 8002122:	461c      	mov	r4, r3
 8002124:	6979      	ldr	r1, [r7, #20]
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f7fe fe2c 	bl	8000d84 <__aeabi_fmul>
 800212c:	4603      	mov	r3, r0
 800212e:	4619      	mov	r1, r3
 8002130:	4620      	mov	r0, r4
 8002132:	f7fe fd1f 	bl	8000b74 <__addsf3>
 8002136:	4603      	mov	r3, r0
 8002138:	461c      	mov	r4, r3
 800213a:	6939      	ldr	r1, [r7, #16]
 800213c:	6938      	ldr	r0, [r7, #16]
 800213e:	f7fe fe21 	bl	8000d84 <__aeabi_fmul>
 8002142:	4603      	mov	r3, r0
 8002144:	4619      	mov	r1, r3
 8002146:	4620      	mov	r0, r4
 8002148:	f7fe fd14 	bl	8000b74 <__addsf3>
 800214c:	4603      	mov	r3, r0
 800214e:	4618      	mov	r0, r3
 8002150:	f00c f8bc 	bl	800e2cc <sqrtf>
 8002154:	4603      	mov	r3, r0
 8002156:	4619      	mov	r1, r3
 8002158:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800215c:	f7fe fec6 	bl	8000eec <__aeabi_fdiv>
 8002160:	4603      	mov	r3, r0
 8002162:	657b      	str	r3, [r7, #84]	@ 0x54
        s0 *= recipNorm;
 8002164:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002166:	69f8      	ldr	r0, [r7, #28]
 8002168:	f7fe fe0c 	bl	8000d84 <__aeabi_fmul>
 800216c:	4603      	mov	r3, r0
 800216e:	61fb      	str	r3, [r7, #28]
        s1 *= recipNorm;
 8002170:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002172:	69b8      	ldr	r0, [r7, #24]
 8002174:	f7fe fe06 	bl	8000d84 <__aeabi_fmul>
 8002178:	4603      	mov	r3, r0
 800217a:	61bb      	str	r3, [r7, #24]
        s2 *= recipNorm;
 800217c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800217e:	6978      	ldr	r0, [r7, #20]
 8002180:	f7fe fe00 	bl	8000d84 <__aeabi_fmul>
 8002184:	4603      	mov	r3, r0
 8002186:	617b      	str	r3, [r7, #20]
        s3 *= recipNorm;
 8002188:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800218a:	6938      	ldr	r0, [r7, #16]
 800218c:	f7fe fdfa 	bl	8000d84 <__aeabi_fmul>
 8002190:	4603      	mov	r3, r0
 8002192:	613b      	str	r3, [r7, #16]

        // 应用反馈
        qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz) - filter->beta * s0;
 8002194:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002196:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fdf1 	bl	8000d84 <__aeabi_fmul>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461c      	mov	r4, r3
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80021aa:	f7fe fdeb 	bl	8000d84 <__aeabi_fmul>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4619      	mov	r1, r3
 80021b2:	4620      	mov	r0, r4
 80021b4:	f7fe fcdc 	bl	8000b70 <__aeabi_fsub>
 80021b8:	4603      	mov	r3, r0
 80021ba:	461c      	mov	r4, r3
 80021bc:	6839      	ldr	r1, [r7, #0]
 80021be:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80021c0:	f7fe fde0 	bl	8000d84 <__aeabi_fmul>
 80021c4:	4603      	mov	r3, r0
 80021c6:	4619      	mov	r1, r3
 80021c8:	4620      	mov	r0, r4
 80021ca:	f7fe fcd1 	bl	8000b70 <__aeabi_fsub>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fdd5 	bl	8000d84 <__aeabi_fmul>
 80021da:	4603      	mov	r3, r0
 80021dc:	461c      	mov	r4, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	69f9      	ldr	r1, [r7, #28]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe fdcd 	bl	8000d84 <__aeabi_fmul>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4619      	mov	r1, r3
 80021ee:	4620      	mov	r0, r4
 80021f0:	f7fe fcbe 	bl	8000b70 <__aeabi_fsub>
 80021f4:	4603      	mov	r3, r0
 80021f6:	677b      	str	r3, [r7, #116]	@ 0x74
        qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy) - filter->beta * s1;
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80021fc:	f7fe fdc2 	bl	8000d84 <__aeabi_fmul>
 8002200:	4603      	mov	r3, r0
 8002202:	461c      	mov	r4, r3
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002208:	f7fe fdbc 	bl	8000d84 <__aeabi_fmul>
 800220c:	4603      	mov	r3, r0
 800220e:	4619      	mov	r1, r3
 8002210:	4620      	mov	r0, r4
 8002212:	f7fe fcaf 	bl	8000b74 <__addsf3>
 8002216:	4603      	mov	r3, r0
 8002218:	461c      	mov	r4, r3
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800221e:	f7fe fdb1 	bl	8000d84 <__aeabi_fmul>
 8002222:	4603      	mov	r3, r0
 8002224:	4619      	mov	r1, r3
 8002226:	4620      	mov	r0, r4
 8002228:	f7fe fca2 	bl	8000b70 <__aeabi_fsub>
 800222c:	4603      	mov	r3, r0
 800222e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fda6 	bl	8000d84 <__aeabi_fmul>
 8002238:	4603      	mov	r3, r0
 800223a:	461c      	mov	r4, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	69b9      	ldr	r1, [r7, #24]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fd9e 	bl	8000d84 <__aeabi_fmul>
 8002248:	4603      	mov	r3, r0
 800224a:	4619      	mov	r1, r3
 800224c:	4620      	mov	r0, r4
 800224e:	f7fe fc8f 	bl	8000b70 <__aeabi_fsub>
 8002252:	4603      	mov	r3, r0
 8002254:	673b      	str	r3, [r7, #112]	@ 0x70
        qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx) - filter->beta * s2;
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800225a:	f7fe fd93 	bl	8000d84 <__aeabi_fmul>
 800225e:	4603      	mov	r3, r0
 8002260:	461c      	mov	r4, r3
 8002262:	6839      	ldr	r1, [r7, #0]
 8002264:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002266:	f7fe fd8d 	bl	8000d84 <__aeabi_fmul>
 800226a:	4603      	mov	r3, r0
 800226c:	4619      	mov	r1, r3
 800226e:	4620      	mov	r0, r4
 8002270:	f7fe fc7e 	bl	8000b70 <__aeabi_fsub>
 8002274:	4603      	mov	r3, r0
 8002276:	461c      	mov	r4, r3
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800227c:	f7fe fd82 	bl	8000d84 <__aeabi_fmul>
 8002280:	4603      	mov	r3, r0
 8002282:	4619      	mov	r1, r3
 8002284:	4620      	mov	r0, r4
 8002286:	f7fe fc75 	bl	8000b74 <__addsf3>
 800228a:	4603      	mov	r3, r0
 800228c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe fd77 	bl	8000d84 <__aeabi_fmul>
 8002296:	4603      	mov	r3, r0
 8002298:	461c      	mov	r4, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	6979      	ldr	r1, [r7, #20]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe fd6f 	bl	8000d84 <__aeabi_fmul>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4619      	mov	r1, r3
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7fe fc60 	bl	8000b70 <__aeabi_fsub>
 80022b0:	4603      	mov	r3, r0
 80022b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
        qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx) - filter->beta * s3;
 80022b4:	6839      	ldr	r1, [r7, #0]
 80022b6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80022b8:	f7fe fd64 	bl	8000d84 <__aeabi_fmul>
 80022bc:	4603      	mov	r3, r0
 80022be:	461c      	mov	r4, r3
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80022c4:	f7fe fd5e 	bl	8000d84 <__aeabi_fmul>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4619      	mov	r1, r3
 80022cc:	4620      	mov	r0, r4
 80022ce:	f7fe fc51 	bl	8000b74 <__addsf3>
 80022d2:	4603      	mov	r3, r0
 80022d4:	461c      	mov	r4, r3
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80022da:	f7fe fd53 	bl	8000d84 <__aeabi_fmul>
 80022de:	4603      	mov	r3, r0
 80022e0:	4619      	mov	r1, r3
 80022e2:	4620      	mov	r0, r4
 80022e4:	f7fe fc44 	bl	8000b70 <__aeabi_fsub>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fd48 	bl	8000d84 <__aeabi_fmul>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461c      	mov	r4, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	6939      	ldr	r1, [r7, #16]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fd40 	bl	8000d84 <__aeabi_fmul>
 8002304:	4603      	mov	r3, r0
 8002306:	4619      	mov	r1, r3
 8002308:	4620      	mov	r0, r4
 800230a:	f7fe fc31 	bl	8000b70 <__aeabi_fsub>
 800230e:	4603      	mov	r3, r0
 8002310:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002312:	e08a      	b.n	800242a <Madgwick_Update+0x6fa>
    } else {
        // 无加速度计数据时仅用陀螺仪
        qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002314:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002316:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe fd31 	bl	8000d84 <__aeabi_fmul>
 8002322:	4603      	mov	r3, r0
 8002324:	461c      	mov	r4, r3
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800232a:	f7fe fd2b 	bl	8000d84 <__aeabi_fmul>
 800232e:	4603      	mov	r3, r0
 8002330:	4619      	mov	r1, r3
 8002332:	4620      	mov	r0, r4
 8002334:	f7fe fc1c 	bl	8000b70 <__aeabi_fsub>
 8002338:	4603      	mov	r3, r0
 800233a:	461c      	mov	r4, r3
 800233c:	6839      	ldr	r1, [r7, #0]
 800233e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002340:	f7fe fd20 	bl	8000d84 <__aeabi_fmul>
 8002344:	4603      	mov	r3, r0
 8002346:	4619      	mov	r1, r3
 8002348:	4620      	mov	r0, r4
 800234a:	f7fe fc11 	bl	8000b70 <__aeabi_fsub>
 800234e:	4603      	mov	r3, r0
 8002350:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fd15 	bl	8000d84 <__aeabi_fmul>
 800235a:	4603      	mov	r3, r0
 800235c:	677b      	str	r3, [r7, #116]	@ 0x74
        qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002362:	f7fe fd0f 	bl	8000d84 <__aeabi_fmul>
 8002366:	4603      	mov	r3, r0
 8002368:	461c      	mov	r4, r3
 800236a:	6839      	ldr	r1, [r7, #0]
 800236c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800236e:	f7fe fd09 	bl	8000d84 <__aeabi_fmul>
 8002372:	4603      	mov	r3, r0
 8002374:	4619      	mov	r1, r3
 8002376:	4620      	mov	r0, r4
 8002378:	f7fe fbfc 	bl	8000b74 <__addsf3>
 800237c:	4603      	mov	r3, r0
 800237e:	461c      	mov	r4, r3
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002384:	f7fe fcfe 	bl	8000d84 <__aeabi_fmul>
 8002388:	4603      	mov	r3, r0
 800238a:	4619      	mov	r1, r3
 800238c:	4620      	mov	r0, r4
 800238e:	f7fe fbef 	bl	8000b70 <__aeabi_fsub>
 8002392:	4603      	mov	r3, r0
 8002394:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe fcf3 	bl	8000d84 <__aeabi_fmul>
 800239e:	4603      	mov	r3, r0
 80023a0:	673b      	str	r3, [r7, #112]	@ 0x70
        qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80023a6:	f7fe fced 	bl	8000d84 <__aeabi_fmul>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461c      	mov	r4, r3
 80023ae:	6839      	ldr	r1, [r7, #0]
 80023b0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80023b2:	f7fe fce7 	bl	8000d84 <__aeabi_fmul>
 80023b6:	4603      	mov	r3, r0
 80023b8:	4619      	mov	r1, r3
 80023ba:	4620      	mov	r0, r4
 80023bc:	f7fe fbd8 	bl	8000b70 <__aeabi_fsub>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461c      	mov	r4, r3
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80023c8:	f7fe fcdc 	bl	8000d84 <__aeabi_fmul>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4619      	mov	r1, r3
 80023d0:	4620      	mov	r0, r4
 80023d2:	f7fe fbcf 	bl	8000b74 <__addsf3>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fcd1 	bl	8000d84 <__aeabi_fmul>
 80023e2:	4603      	mov	r3, r0
 80023e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
        qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80023e6:	6839      	ldr	r1, [r7, #0]
 80023e8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80023ea:	f7fe fccb 	bl	8000d84 <__aeabi_fmul>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461c      	mov	r4, r3
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80023f6:	f7fe fcc5 	bl	8000d84 <__aeabi_fmul>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4619      	mov	r1, r3
 80023fe:	4620      	mov	r0, r4
 8002400:	f7fe fbb8 	bl	8000b74 <__addsf3>
 8002404:	4603      	mov	r3, r0
 8002406:	461c      	mov	r4, r3
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800240c:	f7fe fcba 	bl	8000d84 <__aeabi_fmul>
 8002410:	4603      	mov	r3, r0
 8002412:	4619      	mov	r1, r3
 8002414:	4620      	mov	r0, r4
 8002416:	f7fe fbab 	bl	8000b70 <__aeabi_fsub>
 800241a:	4603      	mov	r3, r0
 800241c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fcaf 	bl	8000d84 <__aeabi_fmul>
 8002426:	4603      	mov	r3, r0
 8002428:	66bb      	str	r3, [r7, #104]	@ 0x68
    }

    // 积分四元数
    q0 += qDot1 * (1.0f / filter->sampleFreq);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002434:	f7fe fd5a 	bl	8000eec <__aeabi_fdiv>
 8002438:	4603      	mov	r3, r0
 800243a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe fca1 	bl	8000d84 <__aeabi_fmul>
 8002442:	4603      	mov	r3, r0
 8002444:	4619      	mov	r1, r3
 8002446:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002448:	f7fe fb94 	bl	8000b74 <__addsf3>
 800244c:	4603      	mov	r3, r0
 800244e:	667b      	str	r3, [r7, #100]	@ 0x64
    q1 += qDot2 * (1.0f / filter->sampleFreq);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	4619      	mov	r1, r3
 8002456:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800245a:	f7fe fd47 	bl	8000eec <__aeabi_fdiv>
 800245e:	4603      	mov	r3, r0
 8002460:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fc8e 	bl	8000d84 <__aeabi_fmul>
 8002468:	4603      	mov	r3, r0
 800246a:	4619      	mov	r1, r3
 800246c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800246e:	f7fe fb81 	bl	8000b74 <__addsf3>
 8002472:	4603      	mov	r3, r0
 8002474:	663b      	str	r3, [r7, #96]	@ 0x60
    q2 += qDot3 * (1.0f / filter->sampleFreq);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	4619      	mov	r1, r3
 800247c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002480:	f7fe fd34 	bl	8000eec <__aeabi_fdiv>
 8002484:	4603      	mov	r3, r0
 8002486:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fc7b 	bl	8000d84 <__aeabi_fmul>
 800248e:	4603      	mov	r3, r0
 8002490:	4619      	mov	r1, r3
 8002492:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002494:	f7fe fb6e 	bl	8000b74 <__addsf3>
 8002498:	4603      	mov	r3, r0
 800249a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    q3 += qDot4 * (1.0f / filter->sampleFreq);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	4619      	mov	r1, r3
 80024a2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80024a6:	f7fe fd21 	bl	8000eec <__aeabi_fdiv>
 80024aa:	4603      	mov	r3, r0
 80024ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fc68 	bl	8000d84 <__aeabi_fmul>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4619      	mov	r1, r3
 80024b8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80024ba:	f7fe fb5b 	bl	8000b74 <__addsf3>
 80024be:	4603      	mov	r3, r0
 80024c0:	65bb      	str	r3, [r7, #88]	@ 0x58

    // 归一化四元数
    recipNorm = 1.0f / sqrtf(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80024c2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80024c4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80024c6:	f7fe fc5d 	bl	8000d84 <__aeabi_fmul>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461c      	mov	r4, r3
 80024ce:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80024d0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80024d2:	f7fe fc57 	bl	8000d84 <__aeabi_fmul>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4619      	mov	r1, r3
 80024da:	4620      	mov	r0, r4
 80024dc:	f7fe fb4a 	bl	8000b74 <__addsf3>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461c      	mov	r4, r3
 80024e4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80024e6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80024e8:	f7fe fc4c 	bl	8000d84 <__aeabi_fmul>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4619      	mov	r1, r3
 80024f0:	4620      	mov	r0, r4
 80024f2:	f7fe fb3f 	bl	8000b74 <__addsf3>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461c      	mov	r4, r3
 80024fa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80024fc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80024fe:	f7fe fc41 	bl	8000d84 <__aeabi_fmul>
 8002502:	4603      	mov	r3, r0
 8002504:	4619      	mov	r1, r3
 8002506:	4620      	mov	r0, r4
 8002508:	f7fe fb34 	bl	8000b74 <__addsf3>
 800250c:	4603      	mov	r3, r0
 800250e:	4618      	mov	r0, r3
 8002510:	f00b fedc 	bl	800e2cc <sqrtf>
 8002514:	4603      	mov	r3, r0
 8002516:	4619      	mov	r1, r3
 8002518:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800251c:	f7fe fce6 	bl	8000eec <__aeabi_fdiv>
 8002520:	4603      	mov	r3, r0
 8002522:	657b      	str	r3, [r7, #84]	@ 0x54
    q0 *= recipNorm;
 8002524:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002526:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002528:	f7fe fc2c 	bl	8000d84 <__aeabi_fmul>
 800252c:	4603      	mov	r3, r0
 800252e:	667b      	str	r3, [r7, #100]	@ 0x64
    q1 *= recipNorm;
 8002530:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002532:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002534:	f7fe fc26 	bl	8000d84 <__aeabi_fmul>
 8002538:	4603      	mov	r3, r0
 800253a:	663b      	str	r3, [r7, #96]	@ 0x60
    q2 *= recipNorm;
 800253c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800253e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002540:	f7fe fc20 	bl	8000d84 <__aeabi_fmul>
 8002544:	4603      	mov	r3, r0
 8002546:	65fb      	str	r3, [r7, #92]	@ 0x5c
    q3 *= recipNorm;
 8002548:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800254a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800254c:	f7fe fc1a 	bl	8000d84 <__aeabi_fmul>
 8002550:	4603      	mov	r3, r0
 8002552:	65bb      	str	r3, [r7, #88]	@ 0x58

    // 存储更新后的四元数
    filter->q0 = q0;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002558:	601a      	str	r2, [r3, #0]
    filter->q1 = q1;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800255e:	605a      	str	r2, [r3, #4]
    filter->q2 = q2;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002564:	609a      	str	r2, [r3, #8]
    filter->q3 = q3;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800256a:	60da      	str	r2, [r3, #12]
}
 800256c:	bf00      	nop
 800256e:	377c      	adds	r7, #124	@ 0x7c
 8002570:	46bd      	mov	sp, r7
 8002572:	bd90      	pop	{r4, r7, pc}

08002574 <Get_Euler_Angles>:

// 获取欧拉角 (单位: 度)
void Get_Euler_Angles(MadgwickFilter *filter,
                      float *roll, float *pitch, float *yaw) {
 8002574:	b5b0      	push	{r4, r5, r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
    float q0 = filter->q0, q1 = filter->q1, q2 = filter->q2, q3 = filter->q3;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	613b      	str	r3, [r7, #16]

    *roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2) * 57.29578f; // rad to deg
 800259a:	69b9      	ldr	r1, [r7, #24]
 800259c:	69f8      	ldr	r0, [r7, #28]
 800259e:	f7fe fbf1 	bl	8000d84 <__aeabi_fmul>
 80025a2:	4603      	mov	r3, r0
 80025a4:	461c      	mov	r4, r3
 80025a6:	6939      	ldr	r1, [r7, #16]
 80025a8:	6978      	ldr	r0, [r7, #20]
 80025aa:	f7fe fbeb 	bl	8000d84 <__aeabi_fmul>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4619      	mov	r1, r3
 80025b2:	4620      	mov	r0, r4
 80025b4:	f7fe fade 	bl	8000b74 <__addsf3>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461c      	mov	r4, r3
 80025bc:	69b9      	ldr	r1, [r7, #24]
 80025be:	69b8      	ldr	r0, [r7, #24]
 80025c0:	f7fe fbe0 	bl	8000d84 <__aeabi_fmul>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4619      	mov	r1, r3
 80025c8:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80025cc:	f7fe fad0 	bl	8000b70 <__aeabi_fsub>
 80025d0:	4603      	mov	r3, r0
 80025d2:	461d      	mov	r5, r3
 80025d4:	6979      	ldr	r1, [r7, #20]
 80025d6:	6978      	ldr	r0, [r7, #20]
 80025d8:	f7fe fbd4 	bl	8000d84 <__aeabi_fmul>
 80025dc:	4603      	mov	r3, r0
 80025de:	4619      	mov	r1, r3
 80025e0:	4628      	mov	r0, r5
 80025e2:	f7fe fac5 	bl	8000b70 <__aeabi_fsub>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4619      	mov	r1, r3
 80025ea:	4620      	mov	r0, r4
 80025ec:	f00b fe6c 	bl	800e2c8 <atan2f>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4931      	ldr	r1, [pc, #196]	@ (80026b8 <Get_Euler_Angles+0x144>)
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe fbc5 	bl	8000d84 <__aeabi_fmul>
 80025fa:	4603      	mov	r3, r0
 80025fc:	461a      	mov	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	601a      	str	r2, [r3, #0]
    *pitch = asinf(-2.0f * (q1*q3 - q0*q2)) * 57.29578f;
 8002602:	6939      	ldr	r1, [r7, #16]
 8002604:	69b8      	ldr	r0, [r7, #24]
 8002606:	f7fe fbbd 	bl	8000d84 <__aeabi_fmul>
 800260a:	4603      	mov	r3, r0
 800260c:	461c      	mov	r4, r3
 800260e:	6979      	ldr	r1, [r7, #20]
 8002610:	69f8      	ldr	r0, [r7, #28]
 8002612:	f7fe fbb7 	bl	8000d84 <__aeabi_fmul>
 8002616:	4603      	mov	r3, r0
 8002618:	4619      	mov	r1, r3
 800261a:	4620      	mov	r0, r4
 800261c:	f7fe faa8 	bl	8000b70 <__aeabi_fsub>
 8002620:	4603      	mov	r3, r0
 8002622:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fbac 	bl	8000d84 <__aeabi_fmul>
 800262c:	4603      	mov	r3, r0
 800262e:	4618      	mov	r0, r3
 8002630:	f00b fe2a 	bl	800e288 <asinf>
 8002634:	4603      	mov	r3, r0
 8002636:	4920      	ldr	r1, [pc, #128]	@ (80026b8 <Get_Euler_Angles+0x144>)
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fba3 	bl	8000d84 <__aeabi_fmul>
 800263e:	4603      	mov	r3, r0
 8002640:	461a      	mov	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	601a      	str	r2, [r3, #0]
    *yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3) * 57.29578f;
 8002646:	6979      	ldr	r1, [r7, #20]
 8002648:	69b8      	ldr	r0, [r7, #24]
 800264a:	f7fe fb9b 	bl	8000d84 <__aeabi_fmul>
 800264e:	4603      	mov	r3, r0
 8002650:	461c      	mov	r4, r3
 8002652:	6939      	ldr	r1, [r7, #16]
 8002654:	69f8      	ldr	r0, [r7, #28]
 8002656:	f7fe fb95 	bl	8000d84 <__aeabi_fmul>
 800265a:	4603      	mov	r3, r0
 800265c:	4619      	mov	r1, r3
 800265e:	4620      	mov	r0, r4
 8002660:	f7fe fa88 	bl	8000b74 <__addsf3>
 8002664:	4603      	mov	r3, r0
 8002666:	461c      	mov	r4, r3
 8002668:	6979      	ldr	r1, [r7, #20]
 800266a:	6978      	ldr	r0, [r7, #20]
 800266c:	f7fe fb8a 	bl	8000d84 <__aeabi_fmul>
 8002670:	4603      	mov	r3, r0
 8002672:	4619      	mov	r1, r3
 8002674:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8002678:	f7fe fa7a 	bl	8000b70 <__aeabi_fsub>
 800267c:	4603      	mov	r3, r0
 800267e:	461d      	mov	r5, r3
 8002680:	6939      	ldr	r1, [r7, #16]
 8002682:	6938      	ldr	r0, [r7, #16]
 8002684:	f7fe fb7e 	bl	8000d84 <__aeabi_fmul>
 8002688:	4603      	mov	r3, r0
 800268a:	4619      	mov	r1, r3
 800268c:	4628      	mov	r0, r5
 800268e:	f7fe fa6f 	bl	8000b70 <__aeabi_fsub>
 8002692:	4603      	mov	r3, r0
 8002694:	4619      	mov	r1, r3
 8002696:	4620      	mov	r0, r4
 8002698:	f00b fe16 	bl	800e2c8 <atan2f>
 800269c:	4603      	mov	r3, r0
 800269e:	4906      	ldr	r1, [pc, #24]	@ (80026b8 <Get_Euler_Angles+0x144>)
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fe fb6f 	bl	8000d84 <__aeabi_fmul>
 80026a6:	4603      	mov	r3, r0
 80026a8:	461a      	mov	r2, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	601a      	str	r2, [r3, #0]
}
 80026ae:	bf00      	nop
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bdb0      	pop	{r4, r5, r7, pc}
 80026b6:	bf00      	nop
 80026b8:	42652ee1 	.word	0x42652ee1

080026bc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// TIM3中断处理
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3 && calibration_status) {
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a07      	ldr	r2, [pc, #28]	@ (80026e8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d107      	bne.n	80026de <HAL_TIM_PeriodElapsedCallback+0x22>
 80026ce:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <HAL_TIM_PeriodElapsedCallback+0x30>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_TIM_PeriodElapsedCallback+0x22>
        // 启动DMA读取
        MPU6050_Read_All_DMA(&mpu6050);
 80026d8:	4805      	ldr	r0, [pc, #20]	@ (80026f0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80026da:	f000 fad1 	bl	8002c80 <MPU6050_Read_All_DMA>
    }
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40000400 	.word	0x40000400
 80026ec:	20000435 	.word	0x20000435
 80026f0:	200003ac 	.word	0x200003ac

080026f4 <HAL_I2C_MemRxCpltCallback>:

// DMA传输完成回调
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1 && calibration_status) {
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a07      	ldr	r2, [pc, #28]	@ (8002720 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d107      	bne.n	8002716 <HAL_I2C_MemRxCpltCallback+0x22>
 8002706:	4b07      	ldr	r3, [pc, #28]	@ (8002724 <HAL_I2C_MemRxCpltCallback+0x30>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <HAL_I2C_MemRxCpltCallback+0x22>
        data_status = 1;
 8002710:	4b05      	ldr	r3, [pc, #20]	@ (8002728 <HAL_I2C_MemRxCpltCallback+0x34>)
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
    }
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	40005400 	.word	0x40005400
 8002724:	20000435 	.word	0x20000435
 8002728:	20000434 	.word	0x20000434

0800272c <HAL_I2C_ErrorCallback>:

// I2C错误处理
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1 && calibration_status) {
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a10      	ldr	r2, [pc, #64]	@ (800277c <HAL_I2C_ErrorCallback+0x50>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d119      	bne.n	8002772 <HAL_I2C_ErrorCallback+0x46>
 800273e:	4b10      	ldr	r3, [pc, #64]	@ (8002780 <HAL_I2C_ErrorCallback+0x54>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d014      	beq.n	8002772 <HAL_I2C_ErrorCallback+0x46>
        // 错误计数
        static uint8_t error_count = 0;
        error_count++;
 8002748:	4b0e      	ldr	r3, [pc, #56]	@ (8002784 <HAL_I2C_ErrorCallback+0x58>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	3301      	adds	r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <HAL_I2C_ErrorCallback+0x58>)
 8002752:	701a      	strb	r2, [r3, #0]

        if(error_count > 5) {
 8002754:	4b0b      	ldr	r3, [pc, #44]	@ (8002784 <HAL_I2C_ErrorCallback+0x58>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b05      	cmp	r3, #5
 800275a:	d907      	bls.n	800276c <HAL_I2C_ErrorCallback+0x40>
            // 严重错误 - 重启I2C
            HAL_I2C_DeInit(&hi2c1);
 800275c:	480a      	ldr	r0, [pc, #40]	@ (8002788 <HAL_I2C_ErrorCallback+0x5c>)
 800275e:	f003 fa31 	bl	8005bc4 <HAL_I2C_DeInit>
            MX_I2C1_Init();
 8002762:	f7ff f885 	bl	8001870 <MX_I2C1_Init>
            error_count = 0;
 8002766:	4b07      	ldr	r3, [pc, #28]	@ (8002784 <HAL_I2C_ErrorCallback+0x58>)
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
        }

        // 重新尝试读取
        MPU6050_Read_All_DMA(&mpu6050);
 800276c:	4807      	ldr	r0, [pc, #28]	@ (800278c <HAL_I2C_ErrorCallback+0x60>)
 800276e:	f000 fa87 	bl	8002c80 <MPU6050_Read_All_DMA>
    }
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40005400 	.word	0x40005400
 8002780:	20000435 	.word	0x20000435
 8002784:	20000498 	.word	0x20000498
 8002788:	2000026c 	.word	0x2000026c
 800278c:	200003ac 	.word	0x200003ac

08002790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002790:	b5b0      	push	{r4, r5, r7, lr}
 8002792:	b08e      	sub	sp, #56	@ 0x38
 8002794:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002796:	f001 fde9 	bl	800436c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800279a:	f000 f9ad 	bl	8002af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800279e:	f7ff f809 	bl	80017b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80027a2:	f7fe ffd9 	bl	8001758 <MX_DMA_Init>
  MX_I2C1_Init();
 80027a6:	f7ff f863 	bl	8001870 <MX_I2C1_Init>
  MX_I2C2_Init();
 80027aa:	f7ff f88f 	bl	80018cc <MX_I2C2_Init>
  MX_TIM3_Init();
 80027ae:	f001 fc55 	bl	800405c <MX_TIM3_Init>
  MX_TIM1_Init();
 80027b2:	f001 fb8f 	bl	8003ed4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80027b6:	f001 fd0d 	bl	80041d4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80027ba:	f7fe feaf 	bl	800151c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(20);
 80027be:	2014      	movs	r0, #20
 80027c0:	f001 fe36 	bl	8004430 <HAL_Delay>
  OLED_Init();
 80027c4:	f000 fcaa 	bl	800311c <OLED_Init>
  JDY23_Init();
 80027c8:	f7ff f982 	bl	8001ad0 <JDY23_Init>
  TB6612_Init();
 80027cc:	f001 fb08 	bl	8003de0 <TB6612_Init>

  // PID初始化
  PID_Init(&pitch_pid, 1.2f, 0.05f, 0.2f, 30.0f);  // PITCH PID参数
 80027d0:	4ba8      	ldr	r3, [pc, #672]	@ (8002a74 <main+0x2e4>)
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	4ba8      	ldr	r3, [pc, #672]	@ (8002a78 <main+0x2e8>)
 80027d6:	4aa9      	ldr	r2, [pc, #676]	@ (8002a7c <main+0x2ec>)
 80027d8:	49a9      	ldr	r1, [pc, #676]	@ (8002a80 <main+0x2f0>)
 80027da:	48aa      	ldr	r0, [pc, #680]	@ (8002a84 <main+0x2f4>)
 80027dc:	f000 ff1d 	bl	800361a <PID_Init>
  PID_Init(&roll_pid,  1.2f, 0.05f, 0.2f, 30.0f);   // ROLL PID参数
 80027e0:	4ba4      	ldr	r3, [pc, #656]	@ (8002a74 <main+0x2e4>)
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	4ba4      	ldr	r3, [pc, #656]	@ (8002a78 <main+0x2e8>)
 80027e6:	4aa5      	ldr	r2, [pc, #660]	@ (8002a7c <main+0x2ec>)
 80027e8:	49a5      	ldr	r1, [pc, #660]	@ (8002a80 <main+0x2f0>)
 80027ea:	48a7      	ldr	r0, [pc, #668]	@ (8002a88 <main+0x2f8>)
 80027ec:	f000 ff15 	bl	800361a <PID_Init>
  PID_Init(&yaw_pid,   0.8f, 0.01f, 0.1f, 20.0f);   // YAW PID参数
 80027f0:	4ba6      	ldr	r3, [pc, #664]	@ (8002a8c <main+0x2fc>)
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	4ba6      	ldr	r3, [pc, #664]	@ (8002a90 <main+0x300>)
 80027f6:	4aa7      	ldr	r2, [pc, #668]	@ (8002a94 <main+0x304>)
 80027f8:	49a7      	ldr	r1, [pc, #668]	@ (8002a98 <main+0x308>)
 80027fa:	48a8      	ldr	r0, [pc, #672]	@ (8002a9c <main+0x30c>)
 80027fc:	f000 ff0d 	bl	800361a <PID_Init>

  // 初始化MPU6050
  if (MPU6050_Init()){
 8002800:	f000 f9dc 	bl	8002bbc <MPU6050_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00d      	beq.n	8002826 <main+0x96>
	  while(1) {
		  OLED_NewFrame();
 800280a:	f000 fce3 	bl	80031d4 <OLED_NewFrame>
		  OLED_PrintASCIIString(0, 1, "MPU6050 Error!", &afont8x6, OLED_COLOR_NORMAL);
 800280e:	2300      	movs	r3, #0
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	4ba3      	ldr	r3, [pc, #652]	@ (8002aa0 <main+0x310>)
 8002814:	4aa3      	ldr	r2, [pc, #652]	@ (8002aa4 <main+0x314>)
 8002816:	2101      	movs	r1, #1
 8002818:	2000      	movs	r0, #0
 800281a:	f000 fed7 	bl	80035cc <OLED_PrintASCIIString>
		  OLED_ShowFrame();
 800281e:	f000 fce5 	bl	80031ec <OLED_ShowFrame>
		  OLED_NewFrame();
 8002822:	bf00      	nop
 8002824:	e7f1      	b.n	800280a <main+0x7a>
	  }
  }

  // 上电自动校准陀螺仪
  MPU6050_Calibrate(&mpu6050, 500); // 采集500个样本
 8002826:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800282a:	489f      	ldr	r0, [pc, #636]	@ (8002aa8 <main+0x318>)
 800282c:	f000 fb74 	bl	8002f18 <MPU6050_Calibrate>

  // 初始化Madgwick滤波器
  Madgwick_Init(&filter, 0.1f, 125.0f);
 8002830:	4a9e      	ldr	r2, [pc, #632]	@ (8002aac <main+0x31c>)
 8002832:	4997      	ldr	r1, [pc, #604]	@ (8002a90 <main+0x300>)
 8002834:	489e      	ldr	r0, [pc, #632]	@ (8002ab0 <main+0x320>)
 8002836:	f7ff fa59 	bl	8001cec <Madgwick_Init>

  // 标记校准完成
  calibration_status = 1;
 800283a:	4b9e      	ldr	r3, [pc, #632]	@ (8002ab4 <main+0x324>)
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]

  // 启动定时器
  HAL_TIM_Base_Start_IT(&htim3);
 8002840:	489d      	ldr	r0, [pc, #628]	@ (8002ab8 <main+0x328>)
 8002842:	f005 fb15 	bl	8007e70 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // 检查数据是否就绪
	  if (data_status) {
 8002846:	4b9d      	ldr	r3, [pc, #628]	@ (8002abc <main+0x32c>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80a0 	beq.w	8002992 <main+0x202>
		  data_status = 0; // 清除标志
 8002852:	4b9a      	ldr	r3, [pc, #616]	@ (8002abc <main+0x32c>)
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]

		  // 计算采样间隔 (用于滤波器)
		  uint32_t current_time = HAL_GetTick();
 8002858:	f001 fde0 	bl	800441c <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	@ 0x24
		  float dt = (current_time - last_sample_time) / 1000.0f;
 800285e:	4b98      	ldr	r3, [pc, #608]	@ (8002ac0 <main+0x330>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fa34 	bl	8000cd4 <__aeabi_ui2f>
 800286c:	4603      	mov	r3, r0
 800286e:	4995      	ldr	r1, [pc, #596]	@ (8002ac4 <main+0x334>)
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fb3b 	bl	8000eec <__aeabi_fdiv>
 8002876:	4603      	mov	r3, r0
 8002878:	623b      	str	r3, [r7, #32]
		  last_sample_time = current_time;
 800287a:	4a91      	ldr	r2, [pc, #580]	@ (8002ac0 <main+0x330>)
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	6013      	str	r3, [r2, #0]

		  // 更新采样频率
		  if(dt > 0) filter.sampleFreq = 1.0f / dt;
 8002880:	f04f 0100 	mov.w	r1, #0
 8002884:	6a38      	ldr	r0, [r7, #32]
 8002886:	f7fe fc39 	bl	80010fc <__aeabi_fcmpgt>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <main+0x112>
 8002890:	6a39      	ldr	r1, [r7, #32]
 8002892:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002896:	f7fe fb29 	bl	8000eec <__aeabi_fdiv>
 800289a:	4603      	mov	r3, r0
 800289c:	461a      	mov	r2, r3
 800289e:	4b84      	ldr	r3, [pc, #528]	@ (8002ab0 <main+0x320>)
 80028a0:	615a      	str	r2, [r3, #20]

		  // 处理数据
		  MPU6050_Process_Data(&mpu6050);
 80028a2:	4881      	ldr	r0, [pc, #516]	@ (8002aa8 <main+0x318>)
 80028a4:	f000 fa04 	bl	8002cb0 <MPU6050_Process_Data>

		  // 更新姿态
		  Madgwick_Update(&filter,
 80028a8:	4b7f      	ldr	r3, [pc, #508]	@ (8002aa8 <main+0x318>)
 80028aa:	69d8      	ldr	r0, [r3, #28]
 80028ac:	4b7e      	ldr	r3, [pc, #504]	@ (8002aa8 <main+0x318>)
 80028ae:	6a1c      	ldr	r4, [r3, #32]
 80028b0:	4b7d      	ldr	r3, [pc, #500]	@ (8002aa8 <main+0x318>)
 80028b2:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80028b4:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa8 <main+0x318>)
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	4a7b      	ldr	r2, [pc, #492]	@ (8002aa8 <main+0x318>)
 80028ba:	6952      	ldr	r2, [r2, #20]
 80028bc:	497a      	ldr	r1, [pc, #488]	@ (8002aa8 <main+0x318>)
 80028be:	6989      	ldr	r1, [r1, #24]
 80028c0:	9102      	str	r1, [sp, #8]
 80028c2:	9201      	str	r2, [sp, #4]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	462b      	mov	r3, r5
 80028c8:	4622      	mov	r2, r4
 80028ca:	4601      	mov	r1, r0
 80028cc:	4878      	ldr	r0, [pc, #480]	@ (8002ab0 <main+0x320>)
 80028ce:	f7ff fa2f 	bl	8001d30 <Madgwick_Update>
						  mpu6050.Gx, mpu6050.Gy, mpu6050.Gz,
						  mpu6050.Ax, mpu6050.Ay, mpu6050.Az);

		  // 获取欧拉角
		  Get_Euler_Angles(&filter, &current_roll, &current_pitch, &current_yaw);
 80028d2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ac8 <main+0x338>)
 80028d4:	4a7d      	ldr	r2, [pc, #500]	@ (8002acc <main+0x33c>)
 80028d6:	497e      	ldr	r1, [pc, #504]	@ (8002ad0 <main+0x340>)
 80028d8:	4875      	ldr	r0, [pc, #468]	@ (8002ab0 <main+0x320>)
 80028da:	f7ff fe4b 	bl	8002574 <Get_Euler_Angles>

		  // 检查蓝牙超时
		  JDY23_CheckTimeout();
 80028de:	f7ff f929 	bl	8001b34 <JDY23_CheckTimeout>

		  // 计算PID控制量
		  float pitch_output = PID_Calculate(&pitch_pid,  jdy23_cmd.pitch, current_pitch);
 80028e2:	4b7c      	ldr	r3, [pc, #496]	@ (8002ad4 <main+0x344>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	4a79      	ldr	r2, [pc, #484]	@ (8002acc <main+0x33c>)
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	4619      	mov	r1, r3
 80028ec:	4865      	ldr	r0, [pc, #404]	@ (8002a84 <main+0x2f4>)
 80028ee:	f000 feb4 	bl	800365a <PID_Calculate>
 80028f2:	61f8      	str	r0, [r7, #28]
		  float roll_output  = PID_Calculate(&roll_pid,  jdy23_cmd.roll,  current_roll);
 80028f4:	4b77      	ldr	r3, [pc, #476]	@ (8002ad4 <main+0x344>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a75      	ldr	r2, [pc, #468]	@ (8002ad0 <main+0x340>)
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	4619      	mov	r1, r3
 80028fe:	4862      	ldr	r0, [pc, #392]	@ (8002a88 <main+0x2f8>)
 8002900:	f000 feab 	bl	800365a <PID_Calculate>
 8002904:	61b8      	str	r0, [r7, #24]
		  float yaw_output   = PID_Calculate(&yaw_pid,   jdy23_cmd.yaw,   current_yaw);
 8002906:	4b73      	ldr	r3, [pc, #460]	@ (8002ad4 <main+0x344>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	4a6f      	ldr	r2, [pc, #444]	@ (8002ac8 <main+0x338>)
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	4619      	mov	r1, r3
 8002910:	4862      	ldr	r0, [pc, #392]	@ (8002a9c <main+0x30c>)
 8002912:	f000 fea2 	bl	800365a <PID_Calculate>
 8002916:	6178      	str	r0, [r7, #20]

		  // 电机混控
		  float motorA, motorB, motorC, motorD;
//		  Motor_Mixing(jdy23_cmd.throttle, pitch_output, roll_output, yaw_output,
//					  &motorA, &motorB, &motorC, &motorD);
		  Motor_Mixing(50, pitch_output, roll_output, yaw_output,
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	9303      	str	r3, [sp, #12]
 800291c:	f107 0308 	add.w	r3, r7, #8
 8002920:	9302      	str	r3, [sp, #8]
 8002922:	f107 030c 	add.w	r3, r7, #12
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	f107 0310 	add.w	r3, r7, #16
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	69f9      	ldr	r1, [r7, #28]
 8002934:	4868      	ldr	r0, [pc, #416]	@ (8002ad8 <main+0x348>)
 8002936:	f000 ff19 	bl	800376c <Motor_Mixing>
		  					  &motorA, &motorB, &motorC, &motorD);

		  /* 电机 0（MA）正转 */
		  TB6612_SetMotor(0, DIR_CW, (uint8_t)motorA);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fbfd 	bl	800113c <__aeabi_f2uiz>
 8002942:	4603      	mov	r3, r0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	2101      	movs	r1, #1
 800294a:	2000      	movs	r0, #0
 800294c:	f001 fa5e 	bl	8003e0c <TB6612_SetMotor>
		  /* 电机 1（MB）反转 */
		  TB6612_SetMotor(1, DIR_CCW, (uint8_t)motorB);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe fbf2 	bl	800113c <__aeabi_f2uiz>
 8002958:	4603      	mov	r3, r0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	2102      	movs	r1, #2
 8002960:	2001      	movs	r0, #1
 8002962:	f001 fa53 	bl	8003e0c <TB6612_SetMotor>
		  /* 电机 2（MC）正转 */
		  TB6612_SetMotor(2, DIR_CW, (uint8_t)motorC);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fbe7 	bl	800113c <__aeabi_f2uiz>
 800296e:	4603      	mov	r3, r0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	2101      	movs	r1, #1
 8002976:	2002      	movs	r0, #2
 8002978:	f001 fa48 	bl	8003e0c <TB6612_SetMotor>
		  /* 电机 3（MD）反转 */
		  TB6612_SetMotor(3, DIR_CCW, (uint8_t)motorD);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fbdc 	bl	800113c <__aeabi_f2uiz>
 8002984:	4603      	mov	r3, r0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	2102      	movs	r1, #2
 800298c:	2003      	movs	r0, #3
 800298e:	f001 fa3d 	bl	8003e0c <TB6612_SetMotor>
	  }

	  // 20Hz更新显示
	  if (HAL_GetTick() - display_timer >= 50) {
 8002992:	f001 fd43 	bl	800441c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	4b50      	ldr	r3, [pc, #320]	@ (8002adc <main+0x34c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b31      	cmp	r3, #49	@ 0x31
 80029a0:	d966      	bls.n	8002a70 <main+0x2e0>
		  display_timer = HAL_GetTick();
 80029a2:	f001 fd3b 	bl	800441c <HAL_GetTick>
 80029a6:	4603      	mov	r3, r0
 80029a8:	4a4c      	ldr	r2, [pc, #304]	@ (8002adc <main+0x34c>)
 80029aa:	6013      	str	r3, [r2, #0]

		  // 获取电量百分比
		  battery_percent = Battery_GetPercentage();
 80029ac:	f7fe fe9c 	bl	80016e8 <Battery_GetPercentage>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461a      	mov	r2, r3
 80029b4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae0 <main+0x350>)
 80029b6:	701a      	strb	r2, [r3, #0]

		  // 在OLED上显示姿态和温度
		  OLED_NewFrame();
 80029b8:	f000 fc0c 	bl	80031d4 <OLED_NewFrame>
		  snprintf(displayBuffer, sizeof(displayBuffer), "T:%2.1fC",mpu6050.Temp);
 80029bc:	4b3a      	ldr	r3, [pc, #232]	@ (8002aa8 <main+0x318>)
 80029be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fd31 	bl	8000428 <__aeabi_f2d>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	e9cd 2300 	strd	r2, r3, [sp]
 80029ce:	4a45      	ldr	r2, [pc, #276]	@ (8002ae4 <main+0x354>)
 80029d0:	2128      	movs	r1, #40	@ 0x28
 80029d2:	4845      	ldr	r0, [pc, #276]	@ (8002ae8 <main+0x358>)
 80029d4:	f007 ff24 	bl	800a820 <sniprintf>
		  OLED_PrintASCIIString(0, 1, displayBuffer, &afont8x6, OLED_COLOR_NORMAL);
 80029d8:	2300      	movs	r3, #0
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	4b30      	ldr	r3, [pc, #192]	@ (8002aa0 <main+0x310>)
 80029de:	4a42      	ldr	r2, [pc, #264]	@ (8002ae8 <main+0x358>)
 80029e0:	2101      	movs	r1, #1
 80029e2:	2000      	movs	r0, #0
 80029e4:	f000 fdf2 	bl	80035cc <OLED_PrintASCIIString>
		  snprintf(displayBuffer, sizeof(displayBuffer), "R:%4.1f", current_roll);
 80029e8:	4b39      	ldr	r3, [pc, #228]	@ (8002ad0 <main+0x340>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fd1b 	bl	8000428 <__aeabi_f2d>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	e9cd 2300 	strd	r2, r3, [sp]
 80029fa:	4a3c      	ldr	r2, [pc, #240]	@ (8002aec <main+0x35c>)
 80029fc:	2128      	movs	r1, #40	@ 0x28
 80029fe:	483a      	ldr	r0, [pc, #232]	@ (8002ae8 <main+0x358>)
 8002a00:	f007 ff0e 	bl	800a820 <sniprintf>
		  OLED_PrintASCIIString(0, 11, displayBuffer, &afont8x6, OLED_COLOR_NORMAL);
 8002a04:	2300      	movs	r3, #0
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	4b25      	ldr	r3, [pc, #148]	@ (8002aa0 <main+0x310>)
 8002a0a:	4a37      	ldr	r2, [pc, #220]	@ (8002ae8 <main+0x358>)
 8002a0c:	210b      	movs	r1, #11
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f000 fddc 	bl	80035cc <OLED_PrintASCIIString>
		  snprintf(displayBuffer, sizeof(displayBuffer), "P:%4.1f", current_pitch);
 8002a14:	4b2d      	ldr	r3, [pc, #180]	@ (8002acc <main+0x33c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fd05 	bl	8000428 <__aeabi_f2d>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	e9cd 2300 	strd	r2, r3, [sp]
 8002a26:	4a32      	ldr	r2, [pc, #200]	@ (8002af0 <main+0x360>)
 8002a28:	2128      	movs	r1, #40	@ 0x28
 8002a2a:	482f      	ldr	r0, [pc, #188]	@ (8002ae8 <main+0x358>)
 8002a2c:	f007 fef8 	bl	800a820 <sniprintf>
		  OLED_PrintASCIIString(0, 21, displayBuffer, &afont8x6, OLED_COLOR_NORMAL);
 8002a30:	2300      	movs	r3, #0
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa0 <main+0x310>)
 8002a36:	4a2c      	ldr	r2, [pc, #176]	@ (8002ae8 <main+0x358>)
 8002a38:	2115      	movs	r1, #21
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f000 fdc6 	bl	80035cc <OLED_PrintASCIIString>
		  snprintf(displayBuffer, sizeof(displayBuffer), "Y:%4.1f", current_yaw);
 8002a40:	4b21      	ldr	r3, [pc, #132]	@ (8002ac8 <main+0x338>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fcef 	bl	8000428 <__aeabi_f2d>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	e9cd 2300 	strd	r2, r3, [sp]
 8002a52:	4a28      	ldr	r2, [pc, #160]	@ (8002af4 <main+0x364>)
 8002a54:	2128      	movs	r1, #40	@ 0x28
 8002a56:	4824      	ldr	r0, [pc, #144]	@ (8002ae8 <main+0x358>)
 8002a58:	f007 fee2 	bl	800a820 <sniprintf>
		  OLED_PrintASCIIString(0, 31, displayBuffer, &afont8x6, OLED_COLOR_NORMAL);
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <main+0x310>)
 8002a62:	4a21      	ldr	r2, [pc, #132]	@ (8002ae8 <main+0x358>)
 8002a64:	211f      	movs	r1, #31
 8002a66:	2000      	movs	r0, #0
 8002a68:	f000 fdb0 	bl	80035cc <OLED_PrintASCIIString>
		  OLED_ShowFrame();
 8002a6c:	f000 fbbe 	bl	80031ec <OLED_ShowFrame>
	  }

	  // 低功耗等待
	  __WFI();
 8002a70:	bf30      	wfi
	  if (data_status) {
 8002a72:	e6e8      	b.n	8002846 <main+0xb6>
 8002a74:	41f00000 	.word	0x41f00000
 8002a78:	3e4ccccd 	.word	0x3e4ccccd
 8002a7c:	3d4ccccd 	.word	0x3d4ccccd
 8002a80:	3f99999a 	.word	0x3f99999a
 8002a84:	20000444 	.word	0x20000444
 8002a88:	2000045c 	.word	0x2000045c
 8002a8c:	41a00000 	.word	0x41a00000
 8002a90:	3dcccccd 	.word	0x3dcccccd
 8002a94:	3c23d70a 	.word	0x3c23d70a
 8002a98:	3f4ccccd 	.word	0x3f4ccccd
 8002a9c:	20000474 	.word	0x20000474
 8002aa0:	0800ec1c 	.word	0x0800ec1c
 8002aa4:	0800e9b0 	.word	0x0800e9b0
 8002aa8:	200003ac 	.word	0x200003ac
 8002aac:	42fa0000 	.word	0x42fa0000
 8002ab0:	200003f4 	.word	0x200003f4
 8002ab4:	20000435 	.word	0x20000435
 8002ab8:	20000970 	.word	0x20000970
 8002abc:	20000434 	.word	0x20000434
 8002ac0:	2000043c 	.word	0x2000043c
 8002ac4:	447a0000 	.word	0x447a0000
 8002ac8:	20000494 	.word	0x20000494
 8002acc:	20000490 	.word	0x20000490
 8002ad0:	2000048c 	.word	0x2000048c
 8002ad4:	20000358 	.word	0x20000358
 8002ad8:	42480000 	.word	0x42480000
 8002adc:	20000438 	.word	0x20000438
 8002ae0:	20000440 	.word	0x20000440
 8002ae4:	0800e9c0 	.word	0x0800e9c0
 8002ae8:	2000040c 	.word	0x2000040c
 8002aec:	0800e9cc 	.word	0x0800e9cc
 8002af0:	0800e9d4 	.word	0x0800e9d4
 8002af4:	0800e9dc 	.word	0x0800e9dc

08002af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b094      	sub	sp, #80	@ 0x50
 8002afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002afe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b02:	2228      	movs	r2, #40	@ 0x28
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f008 fe2c 	bl	800b764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b1c:	1d3b      	adds	r3, r7, #4
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	605a      	str	r2, [r3, #4]
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b32:	2300      	movs	r3, #0
 8002b34:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b36:	2301      	movs	r3, #1
 8002b38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b44:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f004 fbc2 	bl	80072d8 <HAL_RCC_OscConfig>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002b5a:	f000 f828 	bl	8002bae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b5e:	230f      	movs	r3, #15
 8002b60:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b62:	2302      	movs	r3, #2
 8002b64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b6e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b70:	2300      	movs	r3, #0
 8002b72:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	2102      	movs	r1, #2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f004 fe2e 	bl	80077dc <HAL_RCC_ClockConfig>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002b86:	f000 f812 	bl	8002bae <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b92:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	4618      	mov	r0, r3
 8002b98:	f004 ffae 	bl	8007af8 <HAL_RCCEx_PeriphCLKConfig>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002ba2:	f000 f804 	bl	8002bae <Error_Handler>
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	3750      	adds	r7, #80	@ 0x50
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb2:	b672      	cpsid	i
}
 8002bb4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bb6:	bf00      	nop
 8002bb8:	e7fd      	b.n	8002bb6 <Error_Handler+0x8>
	...

08002bbc <MPU6050_Init>:
#include "mpu6050.h"
#include "oled.h"
#include <math.h>

// MPU6050初始化
uint8_t MPU6050_Init() {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

    // 检测设备ID
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 100);
 8002bc2:	2364      	movs	r3, #100	@ 0x64
 8002bc4:	9302      	str	r3, [sp, #8]
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	9301      	str	r3, [sp, #4]
 8002bca:	1dfb      	adds	r3, r7, #7
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2301      	movs	r3, #1
 8002bd0:	2275      	movs	r2, #117	@ 0x75
 8002bd2:	21d0      	movs	r1, #208	@ 0xd0
 8002bd4:	4829      	ldr	r0, [pc, #164]	@ (8002c7c <MPU6050_Init+0xc0>)
 8002bd6:	f003 fa1d 	bl	8006014 <HAL_I2C_Mem_Read>
    if (check != 0x68) return 1; // 设备ID错误
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	2b68      	cmp	r3, #104	@ 0x68
 8002bde:	d001      	beq.n	8002be4 <MPU6050_Init+0x28>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e046      	b.n	8002c72 <MPU6050_Init+0xb6>

    // 唤醒设备
    Data = 0x00;
 8002be4:	2300      	movs	r3, #0
 8002be6:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 100);
 8002be8:	2364      	movs	r3, #100	@ 0x64
 8002bea:	9302      	str	r3, [sp, #8]
 8002bec:	2301      	movs	r3, #1
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	1dbb      	adds	r3, r7, #6
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	226b      	movs	r2, #107	@ 0x6b
 8002bf8:	21d0      	movs	r1, #208	@ 0xd0
 8002bfa:	4820      	ldr	r0, [pc, #128]	@ (8002c7c <MPU6050_Init+0xc0>)
 8002bfc:	f003 f910 	bl	8005e20 <HAL_I2C_Mem_Write>

    // 设置采样率 = 1kHz / (1+7) = 125Hz
    Data = 0x07;
 8002c00:	2307      	movs	r3, #7
 8002c02:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, 100);
 8002c04:	2364      	movs	r3, #100	@ 0x64
 8002c06:	9302      	str	r3, [sp, #8]
 8002c08:	2301      	movs	r3, #1
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	1dbb      	adds	r3, r7, #6
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2301      	movs	r3, #1
 8002c12:	2219      	movs	r2, #25
 8002c14:	21d0      	movs	r1, #208	@ 0xd0
 8002c16:	4819      	ldr	r0, [pc, #100]	@ (8002c7c <MPU6050_Init+0xc0>)
 8002c18:	f003 f902 	bl	8005e20 <HAL_I2C_Mem_Write>

    // 设置DLPF带宽为94Hz
    Data = 0x02;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG, 1, &Data, 1, 100);
 8002c20:	2364      	movs	r3, #100	@ 0x64
 8002c22:	9302      	str	r3, [sp, #8]
 8002c24:	2301      	movs	r3, #1
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	1dbb      	adds	r3, r7, #6
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	221a      	movs	r2, #26
 8002c30:	21d0      	movs	r1, #208	@ 0xd0
 8002c32:	4812      	ldr	r0, [pc, #72]	@ (8002c7c <MPU6050_Init+0xc0>)
 8002c34:	f003 f8f4 	bl	8005e20 <HAL_I2C_Mem_Write>

    // 设置加速度计量程 ±4g
    Data = 0x08;
 8002c38:	2308      	movs	r3, #8
 8002c3a:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1, 100);
 8002c3c:	2364      	movs	r3, #100	@ 0x64
 8002c3e:	9302      	str	r3, [sp, #8]
 8002c40:	2301      	movs	r3, #1
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	1dbb      	adds	r3, r7, #6
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	2301      	movs	r3, #1
 8002c4a:	221c      	movs	r2, #28
 8002c4c:	21d0      	movs	r1, #208	@ 0xd0
 8002c4e:	480b      	ldr	r0, [pc, #44]	@ (8002c7c <MPU6050_Init+0xc0>)
 8002c50:	f003 f8e6 	bl	8005e20 <HAL_I2C_Mem_Write>

    // 设置陀螺仪量程 ±500°/s
    Data = 0x08;
 8002c54:	2308      	movs	r3, #8
 8002c56:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, 100);
 8002c58:	2364      	movs	r3, #100	@ 0x64
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	9301      	str	r3, [sp, #4]
 8002c60:	1dbb      	adds	r3, r7, #6
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2301      	movs	r3, #1
 8002c66:	221b      	movs	r2, #27
 8002c68:	21d0      	movs	r1, #208	@ 0xd0
 8002c6a:	4804      	ldr	r0, [pc, #16]	@ (8002c7c <MPU6050_Init+0xc0>)
 8002c6c:	f003 f8d8 	bl	8005e20 <HAL_I2C_Mem_Write>

    return 0;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	2000026c 	.word	0x2000026c

08002c80 <MPU6050_Read_All_DMA>:

// 启动DMA传输读取MPU6050数据
void MPU6050_Read_All_DMA(MPU6050_t *DataStruct) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	6078      	str	r0, [r7, #4]
    // 启动I2C读取操作(DMA模式)
    HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, 1, DataStruct->dma_buffer, 14);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3338      	adds	r3, #56	@ 0x38
 8002c8c:	220e      	movs	r2, #14
 8002c8e:	9201      	str	r2, [sp, #4]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	2301      	movs	r3, #1
 8002c94:	223b      	movs	r2, #59	@ 0x3b
 8002c96:	21d0      	movs	r1, #208	@ 0xd0
 8002c98:	4803      	ldr	r0, [pc, #12]	@ (8002ca8 <MPU6050_Read_All_DMA+0x28>)
 8002c9a:	f003 fc2f 	bl	80064fc <HAL_I2C_Mem_Read_DMA>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	2000026c 	.word	0x2000026c
 8002cac:	00000000 	.word	0x00000000

08002cb0 <MPU6050_Process_Data>:

// 处理DMA接收到的数据
void MPU6050_Process_Data(MPU6050_t *DataStruct) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
    // 解析原始数据
    DataStruct->Accel_X_RAW = (int16_t)(DataStruct->dma_buffer[0] << 8 | DataStruct->dma_buffer[1]);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002cbe:	b21b      	sxth	r3, r3
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	b21a      	sxth	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002cca:	b21b      	sxth	r3, r3
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	b21a      	sxth	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(DataStruct->dma_buffer[2] << 8 | DataStruct->dma_buffer[3]);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002cda:	b21b      	sxth	r3, r3
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	b21a      	sxth	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8002ce6:	b21b      	sxth	r3, r3
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	b21a      	sxth	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(DataStruct->dma_buffer[4] << 8 | DataStruct->dma_buffer[5]);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf6:	b21b      	sxth	r3, r3
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	b21a      	sxth	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d02:	b21b      	sxth	r3, r3
 8002d04:	4313      	orrs	r3, r2
 8002d06:	b21a      	sxth	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	809a      	strh	r2, [r3, #4]
    DataStruct->Temperature_RAW = (int16_t)(DataStruct->dma_buffer[6] << 8 | DataStruct->dma_buffer[7]);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d12:	b21b      	sxth	r3, r3
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	b21a      	sxth	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d1e:	b21b      	sxth	r3, r3
 8002d20:	4313      	orrs	r3, r2
 8002d22:	b21a      	sxth	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	819a      	strh	r2, [r3, #12]
    DataStruct->Gyro_X_RAW = (int16_t)(DataStruct->dma_buffer[8] << 8 | DataStruct->dma_buffer[9]);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d2e:	b21b      	sxth	r3, r3
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	b21a      	sxth	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d3a:	b21b      	sxth	r3, r3
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	b21a      	sxth	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	80da      	strh	r2, [r3, #6]
    DataStruct->Gyro_Y_RAW = (int16_t)(DataStruct->dma_buffer[10] << 8 | DataStruct->dma_buffer[11]);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d4a:	b21b      	sxth	r3, r3
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	b21a      	sxth	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002d56:	b21b      	sxth	r3, r3
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	b21a      	sxth	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	811a      	strh	r2, [r3, #8]
    DataStruct->Gyro_Z_RAW = (int16_t)(DataStruct->dma_buffer[12] << 8 | DataStruct->dma_buffer[13]);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d66:	b21b      	sxth	r3, r3
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	b21a      	sxth	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d72:	b21b      	sxth	r3, r3
 8002d74:	4313      	orrs	r3, r2
 8002d76:	b21a      	sxth	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	815a      	strh	r2, [r3, #10]

    // 转换为物理量 (使用±4g量程)
    DataStruct->Ax = DataStruct->Accel_X_RAW / AFS_SEL_1;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd fb3e 	bl	8000404 <__aeabi_i2d>
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	4b60      	ldr	r3, [pc, #384]	@ (8002f10 <MPU6050_Process_Data+0x260>)
 8002d8e:	f7fd fccd 	bl	800072c <__aeabi_ddiv>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f7fd fe95 	bl	8000ac8 <__aeabi_d2f>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	611a      	str	r2, [r3, #16]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / AFS_SEL_1;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fb2a 	bl	8000404 <__aeabi_i2d>
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	4b56      	ldr	r3, [pc, #344]	@ (8002f10 <MPU6050_Process_Data+0x260>)
 8002db6:	f7fd fcb9 	bl	800072c <__aeabi_ddiv>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f7fd fe81 	bl	8000ac8 <__aeabi_d2f>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	615a      	str	r2, [r3, #20]
    DataStruct->Az = DataStruct->Accel_Z_RAW / AFS_SEL_1;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd fb16 	bl	8000404 <__aeabi_i2d>
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	4b4c      	ldr	r3, [pc, #304]	@ (8002f10 <MPU6050_Process_Data+0x260>)
 8002dde:	f7fd fca5 	bl	800072c <__aeabi_ddiv>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4610      	mov	r0, r2
 8002de8:	4619      	mov	r1, r3
 8002dea:	f7fd fe6d 	bl	8000ac8 <__aeabi_d2f>
 8002dee:	4602      	mov	r2, r0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	619a      	str	r2, [r3, #24]

    // 转换为物理量 (使用±500°/s量程)
    DataStruct->Gx = DataStruct->Gyro_X_RAW / GFS_SEL_1;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fd fb02 	bl	8000404 <__aeabi_i2d>
 8002e00:	a33f      	add	r3, pc, #252	@ (adr r3, 8002f00 <MPU6050_Process_Data+0x250>)
 8002e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e06:	f7fd fc91 	bl	800072c <__aeabi_ddiv>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4619      	mov	r1, r3
 8002e12:	f7fd fe59 	bl	8000ac8 <__aeabi_d2f>
 8002e16:	4602      	mov	r2, r0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	61da      	str	r2, [r3, #28]
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / GFS_SEL_1;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd faee 	bl	8000404 <__aeabi_i2d>
 8002e28:	a335      	add	r3, pc, #212	@ (adr r3, 8002f00 <MPU6050_Process_Data+0x250>)
 8002e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2e:	f7fd fc7d 	bl	800072c <__aeabi_ddiv>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f7fd fe45 	bl	8000ac8 <__aeabi_d2f>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	621a      	str	r2, [r3, #32]
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / GFS_SEL_1;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd fada 	bl	8000404 <__aeabi_i2d>
 8002e50:	a32b      	add	r3, pc, #172	@ (adr r3, 8002f00 <MPU6050_Process_Data+0x250>)
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f7fd fc69 	bl	800072c <__aeabi_ddiv>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	f7fd fe31 	bl	8000ac8 <__aeabi_d2f>
 8002e66:	4602      	mov	r2, r0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	625a      	str	r2, [r3, #36]	@ 0x24

    // 应用零偏校准
    DataStruct->Gx -= DataStruct->Gyro_Offset_X;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f7fd fe7a 	bl	8000b70 <__aeabi_fsub>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	461a      	mov	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	61da      	str	r2, [r3, #28]
    DataStruct->Gy -= DataStruct->Gyro_Offset_Y;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1a      	ldr	r2, [r3, #32]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f7fd fe6e 	bl	8000b70 <__aeabi_fsub>
 8002e94:	4603      	mov	r3, r0
 8002e96:	461a      	mov	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	621a      	str	r2, [r3, #32]
    DataStruct->Gz -= DataStruct->Gyro_Offset_Z;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	f7fd fe62 	bl	8000b70 <__aeabi_fsub>
 8002eac:	4603      	mov	r3, r0
 8002eae:	461a      	mov	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	625a      	str	r2, [r3, #36]	@ 0x24

    // 温度转换 (°C)
    DataStruct->Temp = (float)DataStruct->Temperature_RAW / 340.0 + 36.53;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd ff0e 	bl	8000cdc <__aeabi_i2f>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd fab0 	bl	8000428 <__aeabi_f2d>
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <MPU6050_Process_Data+0x264>)
 8002ece:	f7fd fc2d 	bl	800072c <__aeabi_ddiv>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	a30b      	add	r3, pc, #44	@ (adr r3, 8002f08 <MPU6050_Process_Data+0x258>)
 8002edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee0:	f7fd f944 	bl	800016c <__adddf3>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4610      	mov	r0, r2
 8002eea:	4619      	mov	r1, r3
 8002eec:	f7fd fdec 	bl	8000ac8 <__aeabi_d2f>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	00000000 	.word	0x00000000
 8002f04:	40506000 	.word	0x40506000
 8002f08:	0a3d70a4 	.word	0x0a3d70a4
 8002f0c:	404243d7 	.word	0x404243d7
 8002f10:	40c00000 	.word	0x40c00000
 8002f14:	40754000 	.word	0x40754000

08002f18 <MPU6050_Calibrate>:

// 陀螺仪校准
void MPU6050_Calibrate(MPU6050_t *DataStruct, uint16_t numSamples) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b092      	sub	sp, #72	@ 0x48
 8002f1c:	af04      	add	r7, sp, #16
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
	OLED_NewFrame();
 8002f24:	f000 f956 	bl	80031d4 <OLED_NewFrame>
	OLED_PrintASCIIString(0, 26, "Calibrating...", &afont8x6, OLED_COLOR_NORMAL);
 8002f28:	2300      	movs	r3, #0
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	4b64      	ldr	r3, [pc, #400]	@ (80030c0 <MPU6050_Calibrate+0x1a8>)
 8002f2e:	4a65      	ldr	r2, [pc, #404]	@ (80030c4 <MPU6050_Calibrate+0x1ac>)
 8002f30:	211a      	movs	r1, #26
 8002f32:	2000      	movs	r0, #0
 8002f34:	f000 fb4a 	bl	80035cc <OLED_PrintASCIIString>
	OLED_ShowFrame();
 8002f38:	f000 f958 	bl	80031ec <OLED_ShowFrame>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f3c:	b672      	cpsid	i
}
 8002f3e:	bf00      	nop
	// 禁用所有中断
	__disable_irq();

	float sumX = 0, sumY = 0, sumZ = 0;
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t Rec_Data[14]; // 用于轮询读取的缓冲区

	// 使用轮询方式安全读取
	for (uint16_t i = 0; i < numSamples; i++) {
 8002f52:	2300      	movs	r3, #0
 8002f54:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8002f56:	e07b      	b.n	8003050 <MPU6050_Calibrate+0x138>
		// 阻塞式读取
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, 1, Rec_Data, 14, 100);
 8002f58:	2364      	movs	r3, #100	@ 0x64
 8002f5a:	9302      	str	r3, [sp, #8]
 8002f5c:	230e      	movs	r3, #14
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	f107 030c 	add.w	r3, r7, #12
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	2301      	movs	r3, #1
 8002f68:	223b      	movs	r2, #59	@ 0x3b
 8002f6a:	21d0      	movs	r1, #208	@ 0xd0
 8002f6c:	4856      	ldr	r0, [pc, #344]	@ (80030c8 <MPU6050_Calibrate+0x1b0>)
 8002f6e:	f003 f851 	bl	8006014 <HAL_I2C_Mem_Read>

		// 解析原始数据
		DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002f72:	7d3b      	ldrb	r3, [r7, #20]
 8002f74:	b21b      	sxth	r3, r3
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	b21a      	sxth	r2, r3
 8002f7a:	7d7b      	ldrb	r3, [r7, #21]
 8002f7c:	b21b      	sxth	r3, r3
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	b21a      	sxth	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	80da      	strh	r2, [r3, #6]
		DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002f86:	7dbb      	ldrb	r3, [r7, #22]
 8002f88:	b21b      	sxth	r3, r3
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	b21a      	sxth	r2, r3
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
 8002f90:	b21b      	sxth	r3, r3
 8002f92:	4313      	orrs	r3, r2
 8002f94:	b21a      	sxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	811a      	strh	r2, [r3, #8]
		DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8002f9a:	7e3b      	ldrb	r3, [r7, #24]
 8002f9c:	b21b      	sxth	r3, r3
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	b21a      	sxth	r2, r3
 8002fa2:	7e7b      	ldrb	r3, [r7, #25]
 8002fa4:	b21b      	sxth	r3, r3
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	b21a      	sxth	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	815a      	strh	r2, [r3, #10]

		// 转换为物理量 (使用±500°/s量程)
		float gx = DataStruct->Gyro_X_RAW / GFS_SEL_1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fa25 	bl	8000404 <__aeabi_i2d>
 8002fba:	a33f      	add	r3, pc, #252	@ (adr r3, 80030b8 <MPU6050_Calibrate+0x1a0>)
 8002fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc0:	f7fd fbb4 	bl	800072c <__aeabi_ddiv>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f7fd fd7c 	bl	8000ac8 <__aeabi_d2f>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	627b      	str	r3, [r7, #36]	@ 0x24
		float gy = DataStruct->Gyro_Y_RAW / GFS_SEL_1;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fa12 	bl	8000404 <__aeabi_i2d>
 8002fe0:	a335      	add	r3, pc, #212	@ (adr r3, 80030b8 <MPU6050_Calibrate+0x1a0>)
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f7fd fba1 	bl	800072c <__aeabi_ddiv>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f7fd fd69 	bl	8000ac8 <__aeabi_d2f>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	623b      	str	r3, [r7, #32]
		float gz = DataStruct->Gyro_Z_RAW / GFS_SEL_1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd f9ff 	bl	8000404 <__aeabi_i2d>
 8003006:	a32c      	add	r3, pc, #176	@ (adr r3, 80030b8 <MPU6050_Calibrate+0x1a0>)
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f7fd fb8e 	bl	800072c <__aeabi_ddiv>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4610      	mov	r0, r2
 8003016:	4619      	mov	r1, r3
 8003018:	f7fd fd56 	bl	8000ac8 <__aeabi_d2f>
 800301c:	4603      	mov	r3, r0
 800301e:	61fb      	str	r3, [r7, #28]

		sumX += gx;
 8003020:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003022:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003024:	f7fd fda6 	bl	8000b74 <__addsf3>
 8003028:	4603      	mov	r3, r0
 800302a:	637b      	str	r3, [r7, #52]	@ 0x34
		sumY += gy;
 800302c:	6a39      	ldr	r1, [r7, #32]
 800302e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003030:	f7fd fda0 	bl	8000b74 <__addsf3>
 8003034:	4603      	mov	r3, r0
 8003036:	633b      	str	r3, [r7, #48]	@ 0x30
		sumZ += gz;
 8003038:	69f9      	ldr	r1, [r7, #28]
 800303a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800303c:	f7fd fd9a 	bl	8000b74 <__addsf3>
 8003040:	4603      	mov	r3, r0
 8003042:	62fb      	str	r3, [r7, #44]	@ 0x2c

		HAL_Delay(5);
 8003044:	2005      	movs	r0, #5
 8003046:	f001 f9f3 	bl	8004430 <HAL_Delay>
	for (uint16_t i = 0; i < numSamples; i++) {
 800304a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800304c:	3301      	adds	r3, #1
 800304e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003050:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8003052:	887b      	ldrh	r3, [r7, #2]
 8003054:	429a      	cmp	r2, r3
 8003056:	f4ff af7f 	bcc.w	8002f58 <MPU6050_Calibrate+0x40>
	}

	// 计算平均值作为零偏
	DataStruct->Gyro_Offset_X = sumX / numSamples;
 800305a:	887b      	ldrh	r3, [r7, #2]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fe3d 	bl	8000cdc <__aeabi_i2f>
 8003062:	4603      	mov	r3, r0
 8003064:	4619      	mov	r1, r3
 8003066:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003068:	f7fd ff40 	bl	8000eec <__aeabi_fdiv>
 800306c:	4603      	mov	r3, r0
 800306e:	461a      	mov	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	62da      	str	r2, [r3, #44]	@ 0x2c
	DataStruct->Gyro_Offset_Y = sumY / numSamples;
 8003074:	887b      	ldrh	r3, [r7, #2]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fe30 	bl	8000cdc <__aeabi_i2f>
 800307c:	4603      	mov	r3, r0
 800307e:	4619      	mov	r1, r3
 8003080:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003082:	f7fd ff33 	bl	8000eec <__aeabi_fdiv>
 8003086:	4603      	mov	r3, r0
 8003088:	461a      	mov	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	631a      	str	r2, [r3, #48]	@ 0x30
	DataStruct->Gyro_Offset_Z = sumZ / numSamples;
 800308e:	887b      	ldrh	r3, [r7, #2]
 8003090:	4618      	mov	r0, r3
 8003092:	f7fd fe23 	bl	8000cdc <__aeabi_i2f>
 8003096:	4603      	mov	r3, r0
 8003098:	4619      	mov	r1, r3
 800309a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800309c:	f7fd ff26 	bl	8000eec <__aeabi_fdiv>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsie i" : : : "memory");
 80030a8:	b662      	cpsie	i
}
 80030aa:	bf00      	nop

	// 重新启用中断
	__enable_irq();
}
 80030ac:	bf00      	nop
 80030ae:	3738      	adds	r7, #56	@ 0x38
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	f3af 8000 	nop.w
 80030b8:	00000000 	.word	0x00000000
 80030bc:	40506000 	.word	0x40506000
 80030c0:	0800ec1c 	.word	0x0800ec1c
 80030c4:	0800e9e4 	.word	0x0800e9e4
 80030c8:	2000026c 	.word	0x2000026c

080030cc <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c2, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030e0:	9200      	str	r2, [sp, #0]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	2178      	movs	r1, #120	@ 0x78
 80030e6:	4803      	ldr	r0, [pc, #12]	@ (80030f4 <OLED_Send+0x28>)
 80030e8:	f002 fd9c 	bl	8005c24 <HAL_I2C_Master_Transmit>
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	200002c0 	.word	0x200002c0

080030f8 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8003102:	4a05      	ldr	r2, [pc, #20]	@ (8003118 <OLED_SendCmd+0x20>)
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8003108:	2102      	movs	r1, #2
 800310a:	4803      	ldr	r0, [pc, #12]	@ (8003118 <OLED_SendCmd+0x20>)
 800310c:	f7ff ffde 	bl	80030cc <OLED_Send>
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	2000089c 	.word	0x2000089c

0800311c <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8003120:	20ae      	movs	r0, #174	@ 0xae
 8003122:	f7ff ffe9 	bl	80030f8 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8003126:	2020      	movs	r0, #32
 8003128:	f7ff ffe6 	bl	80030f8 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 800312c:	2010      	movs	r0, #16
 800312e:	f7ff ffe3 	bl	80030f8 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8003132:	20b0      	movs	r0, #176	@ 0xb0
 8003134:	f7ff ffe0 	bl	80030f8 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8003138:	20c8      	movs	r0, #200	@ 0xc8
 800313a:	f7ff ffdd 	bl	80030f8 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 800313e:	2000      	movs	r0, #0
 8003140:	f7ff ffda 	bl	80030f8 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8003144:	2010      	movs	r0, #16
 8003146:	f7ff ffd7 	bl	80030f8 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 800314a:	2040      	movs	r0, #64	@ 0x40
 800314c:	f7ff ffd4 	bl	80030f8 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8003150:	2081      	movs	r0, #129	@ 0x81
 8003152:	f7ff ffd1 	bl	80030f8 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8003156:	20df      	movs	r0, #223	@ 0xdf
 8003158:	f7ff ffce 	bl	80030f8 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 800315c:	20a1      	movs	r0, #161	@ 0xa1
 800315e:	f7ff ffcb 	bl	80030f8 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8003162:	20a6      	movs	r0, #166	@ 0xa6
 8003164:	f7ff ffc8 	bl	80030f8 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8003168:	20a8      	movs	r0, #168	@ 0xa8
 800316a:	f7ff ffc5 	bl	80030f8 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 800316e:	203f      	movs	r0, #63	@ 0x3f
 8003170:	f7ff ffc2 	bl	80030f8 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8003174:	20a4      	movs	r0, #164	@ 0xa4
 8003176:	f7ff ffbf 	bl	80030f8 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 800317a:	20d3      	movs	r0, #211	@ 0xd3
 800317c:	f7ff ffbc 	bl	80030f8 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8003180:	2000      	movs	r0, #0
 8003182:	f7ff ffb9 	bl	80030f8 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8003186:	20d5      	movs	r0, #213	@ 0xd5
 8003188:	f7ff ffb6 	bl	80030f8 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 800318c:	20f0      	movs	r0, #240	@ 0xf0
 800318e:	f7ff ffb3 	bl	80030f8 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 8003192:	20d9      	movs	r0, #217	@ 0xd9
 8003194:	f7ff ffb0 	bl	80030f8 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8003198:	2022      	movs	r0, #34	@ 0x22
 800319a:	f7ff ffad 	bl	80030f8 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 800319e:	20da      	movs	r0, #218	@ 0xda
 80031a0:	f7ff ffaa 	bl	80030f8 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 80031a4:	2012      	movs	r0, #18
 80031a6:	f7ff ffa7 	bl	80030f8 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 80031aa:	20db      	movs	r0, #219	@ 0xdb
 80031ac:	f7ff ffa4 	bl	80030f8 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 80031b0:	2020      	movs	r0, #32
 80031b2:	f7ff ffa1 	bl	80030f8 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 80031b6:	208d      	movs	r0, #141	@ 0x8d
 80031b8:	f7ff ff9e 	bl	80030f8 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 80031bc:	2014      	movs	r0, #20
 80031be:	f7ff ff9b 	bl	80030f8 <OLED_SendCmd>

  OLED_NewFrame();
 80031c2:	f000 f807 	bl	80031d4 <OLED_NewFrame>
  OLED_ShowFrame();
 80031c6:	f000 f811 	bl	80031ec <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 80031ca:	20af      	movs	r0, #175	@ 0xaf
 80031cc:	f7ff ff94 	bl	80030f8 <OLED_SendCmd>
}
 80031d0:	bf00      	nop
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 80031d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031dc:	2100      	movs	r1, #0
 80031de:	4802      	ldr	r0, [pc, #8]	@ (80031e8 <OLED_NewFrame+0x14>)
 80031e0:	f008 fac0 	bl	800b764 <memset>
}
 80031e4:	bf00      	nop
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	2000049c 	.word	0x2000049c

080031ec <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 80031f2:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <OLED_ShowFrame+0x5c>)
 80031f4:	2240      	movs	r2, #64	@ 0x40
 80031f6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 80031f8:	2300      	movs	r3, #0
 80031fa:	71fb      	strb	r3, [r7, #7]
 80031fc:	e01b      	b.n	8003236 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	3b50      	subs	r3, #80	@ 0x50
 8003202:	b2db      	uxtb	r3, r3
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ff77 	bl	80030f8 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 800320a:	2000      	movs	r0, #0
 800320c:	f7ff ff74 	bl	80030f8 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8003210:	2010      	movs	r0, #16
 8003212:	f7ff ff71 	bl	80030f8 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8003216:	480d      	ldr	r0, [pc, #52]	@ (800324c <OLED_ShowFrame+0x60>)
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	01db      	lsls	r3, r3, #7
 800321c:	4a0c      	ldr	r2, [pc, #48]	@ (8003250 <OLED_ShowFrame+0x64>)
 800321e:	4413      	add	r3, r2
 8003220:	2280      	movs	r2, #128	@ 0x80
 8003222:	4619      	mov	r1, r3
 8003224:	f008 faf8 	bl	800b818 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8003228:	2181      	movs	r1, #129	@ 0x81
 800322a:	4807      	ldr	r0, [pc, #28]	@ (8003248 <OLED_ShowFrame+0x5c>)
 800322c:	f7ff ff4e 	bl	80030cc <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	3301      	adds	r3, #1
 8003234:	71fb      	strb	r3, [r7, #7]
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	2b07      	cmp	r3, #7
 800323a:	d9e0      	bls.n	80031fe <OLED_ShowFrame+0x12>
  }
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	200008a0 	.word	0x200008a0
 800324c:	200008a1 	.word	0x200008a1
 8003250:	2000049c 	.word	0x2000049c

08003254 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8003254:	b490      	push	{r4, r7}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	4604      	mov	r4, r0
 800325c:	4608      	mov	r0, r1
 800325e:	4611      	mov	r1, r2
 8003260:	461a      	mov	r2, r3
 8003262:	4623      	mov	r3, r4
 8003264:	71fb      	strb	r3, [r7, #7]
 8003266:	4603      	mov	r3, r0
 8003268:	71bb      	strb	r3, [r7, #6]
 800326a:	460b      	mov	r3, r1
 800326c:	717b      	strb	r3, [r7, #5]
 800326e:	4613      	mov	r3, r2
 8003270:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	2b07      	cmp	r3, #7
 8003276:	d85f      	bhi.n	8003338 <OLED_SetByte_Fine+0xe4>
 8003278:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800327c:	2b00      	cmp	r3, #0
 800327e:	db5b      	blt.n	8003338 <OLED_SetByte_Fine+0xe4>
    return;
  if (color)
 8003280:	7d3b      	ldrb	r3, [r7, #20]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <OLED_SetByte_Fine+0x38>
    data = ~data;
 8003286:	797b      	ldrb	r3, [r7, #5]
 8003288:	43db      	mvns	r3, r3
 800328a:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 800328c:	7c3b      	ldrb	r3, [r7, #16]
 800328e:	3301      	adds	r3, #1
 8003290:	22ff      	movs	r2, #255	@ 0xff
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	b25a      	sxtb	r2, r3
 8003298:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800329c:	4313      	orrs	r3, r2
 800329e:	b25a      	sxtb	r2, r3
 80032a0:	793b      	ldrb	r3, [r7, #4]
 80032a2:	f1c3 0308 	rsb	r3, r3, #8
 80032a6:	21ff      	movs	r1, #255	@ 0xff
 80032a8:	fa41 f303 	asr.w	r3, r1, r3
 80032ac:	b25b      	sxtb	r3, r3
 80032ae:	4313      	orrs	r3, r2
 80032b0:	b25b      	sxtb	r3, r3
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	4b23      	ldr	r3, [pc, #140]	@ (8003344 <OLED_SetByte_Fine+0xf0>)
 80032b6:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 80032b8:	79fa      	ldrb	r2, [r7, #7]
 80032ba:	79bb      	ldrb	r3, [r7, #6]
 80032bc:	4922      	ldr	r1, [pc, #136]	@ (8003348 <OLED_SetByte_Fine+0xf4>)
 80032be:	01d2      	lsls	r2, r2, #7
 80032c0:	440a      	add	r2, r1
 80032c2:	4413      	add	r3, r2
 80032c4:	7818      	ldrb	r0, [r3, #0]
 80032c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003344 <OLED_SetByte_Fine+0xf0>)
 80032c8:	7819      	ldrb	r1, [r3, #0]
 80032ca:	79fa      	ldrb	r2, [r7, #7]
 80032cc:	79bb      	ldrb	r3, [r7, #6]
 80032ce:	4001      	ands	r1, r0
 80032d0:	b2c8      	uxtb	r0, r1
 80032d2:	491d      	ldr	r1, [pc, #116]	@ (8003348 <OLED_SetByte_Fine+0xf4>)
 80032d4:	01d2      	lsls	r2, r2, #7
 80032d6:	440a      	add	r2, r1
 80032d8:	4413      	add	r3, r2
 80032da:	4602      	mov	r2, r0
 80032dc:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 80032de:	7c3b      	ldrb	r3, [r7, #16]
 80032e0:	3301      	adds	r3, #1
 80032e2:	22ff      	movs	r2, #255	@ 0xff
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	b25b      	sxtb	r3, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	b25a      	sxtb	r2, r3
 80032ee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80032f2:	4013      	ands	r3, r2
 80032f4:	b25a      	sxtb	r2, r3
 80032f6:	793b      	ldrb	r3, [r7, #4]
 80032f8:	f1c3 0308 	rsb	r3, r3, #8
 80032fc:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8003300:	fa41 f303 	asr.w	r3, r1, r3
 8003304:	b25b      	sxtb	r3, r3
 8003306:	4013      	ands	r3, r2
 8003308:	b25b      	sxtb	r3, r3
 800330a:	b2da      	uxtb	r2, r3
 800330c:	4b0d      	ldr	r3, [pc, #52]	@ (8003344 <OLED_SetByte_Fine+0xf0>)
 800330e:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8003310:	79fa      	ldrb	r2, [r7, #7]
 8003312:	79bb      	ldrb	r3, [r7, #6]
 8003314:	490c      	ldr	r1, [pc, #48]	@ (8003348 <OLED_SetByte_Fine+0xf4>)
 8003316:	01d2      	lsls	r2, r2, #7
 8003318:	440a      	add	r2, r1
 800331a:	4413      	add	r3, r2
 800331c:	7818      	ldrb	r0, [r3, #0]
 800331e:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <OLED_SetByte_Fine+0xf0>)
 8003320:	7819      	ldrb	r1, [r3, #0]
 8003322:	79fa      	ldrb	r2, [r7, #7]
 8003324:	79bb      	ldrb	r3, [r7, #6]
 8003326:	4301      	orrs	r1, r0
 8003328:	b2c8      	uxtb	r0, r1
 800332a:	4907      	ldr	r1, [pc, #28]	@ (8003348 <OLED_SetByte_Fine+0xf4>)
 800332c:	01d2      	lsls	r2, r2, #7
 800332e:	440a      	add	r2, r1
 8003330:	4413      	add	r3, r2
 8003332:	4602      	mov	r2, r0
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e000      	b.n	800333a <OLED_SetByte_Fine+0xe6>
    return;
 8003338:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bc90      	pop	{r4, r7}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	20000921 	.word	0x20000921
 8003348:	2000049c 	.word	0x2000049c

0800334c <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 800334c:	b5b0      	push	{r4, r5, r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af02      	add	r7, sp, #8
 8003352:	4604      	mov	r4, r0
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4623      	mov	r3, r4
 800335c:	71fb      	strb	r3, [r7, #7]
 800335e:	4603      	mov	r3, r0
 8003360:	71bb      	strb	r3, [r7, #6]
 8003362:	460b      	mov	r3, r1
 8003364:	717b      	strb	r3, [r7, #5]
 8003366:	4613      	mov	r3, r2
 8003368:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 800336a:	79bb      	ldrb	r3, [r7, #6]
 800336c:	08db      	lsrs	r3, r3, #3
 800336e:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8003370:	79bb      	ldrb	r3, [r7, #6]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8003378:	7bba      	ldrb	r2, [r7, #14]
 800337a:	793b      	ldrb	r3, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	2b08      	cmp	r3, #8
 8003380:	dd29      	ble.n	80033d6 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8003382:	797a      	ldrb	r2, [r7, #5]
 8003384:	7bbb      	ldrb	r3, [r7, #14]
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	b2da      	uxtb	r2, r3
 800338c:	7bbc      	ldrb	r4, [r7, #14]
 800338e:	79f9      	ldrb	r1, [r7, #7]
 8003390:	7bf8      	ldrb	r0, [r7, #15]
 8003392:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	2307      	movs	r3, #7
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	4623      	mov	r3, r4
 800339e:	f7ff ff59 	bl	8003254 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	3301      	adds	r3, #1
 80033a6:	b2d8      	uxtb	r0, r3
 80033a8:	797a      	ldrb	r2, [r7, #5]
 80033aa:	7bbb      	ldrb	r3, [r7, #14]
 80033ac:	f1c3 0308 	rsb	r3, r3, #8
 80033b0:	fa42 f303 	asr.w	r3, r2, r3
 80033b4:	b2dc      	uxtb	r4, r3
 80033b6:	793a      	ldrb	r2, [r7, #4]
 80033b8:	7bbb      	ldrb	r3, [r7, #14]
 80033ba:	4413      	add	r3, r2
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	3b09      	subs	r3, #9
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	79f9      	ldrb	r1, [r7, #7]
 80033c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80033c8:	9201      	str	r2, [sp, #4]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	2300      	movs	r3, #0
 80033ce:	4622      	mov	r2, r4
 80033d0:	f7ff ff40 	bl	8003254 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 80033d4:	e015      	b.n	8003402 <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 80033d6:	797a      	ldrb	r2, [r7, #5]
 80033d8:	7bbb      	ldrb	r3, [r7, #14]
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	b2dc      	uxtb	r4, r3
 80033e0:	7bba      	ldrb	r2, [r7, #14]
 80033e2:	793b      	ldrb	r3, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	7bbd      	ldrb	r5, [r7, #14]
 80033ee:	79f9      	ldrb	r1, [r7, #7]
 80033f0:	7bf8      	ldrb	r0, [r7, #15]
 80033f2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80033f6:	9201      	str	r2, [sp, #4]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	462b      	mov	r3, r5
 80033fc:	4622      	mov	r2, r4
 80033fe:	f7ff ff29 	bl	8003254 <OLED_SetByte_Fine>
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bdb0      	pop	{r4, r5, r7, pc}

0800340a <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 800340a:	b590      	push	{r4, r7, lr}
 800340c:	b087      	sub	sp, #28
 800340e:	af02      	add	r7, sp, #8
 8003410:	4604      	mov	r4, r0
 8003412:	4608      	mov	r0, r1
 8003414:	4611      	mov	r1, r2
 8003416:	461a      	mov	r2, r3
 8003418:	4623      	mov	r3, r4
 800341a:	71fb      	strb	r3, [r7, #7]
 800341c:	4603      	mov	r3, r0
 800341e:	71bb      	strb	r3, [r7, #6]
 8003420:	460b      	mov	r3, r1
 8003422:	717b      	strb	r3, [r7, #5]
 8003424:	4613      	mov	r3, r2
 8003426:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8003428:	79bb      	ldrb	r3, [r7, #6]
 800342a:	08db      	lsrs	r3, r3, #3
 800342c:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 800342e:	79bb      	ldrb	r3, [r7, #6]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8003436:	797a      	ldrb	r2, [r7, #5]
 8003438:	7bbb      	ldrb	r3, [r7, #14]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	b2da      	uxtb	r2, r3
 8003440:	7bbc      	ldrb	r4, [r7, #14]
 8003442:	79f9      	ldrb	r1, [r7, #7]
 8003444:	7bf8      	ldrb	r0, [r7, #15]
 8003446:	793b      	ldrb	r3, [r7, #4]
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	2307      	movs	r3, #7
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	4623      	mov	r3, r4
 8003450:	f7ff ff00 	bl	8003254 <OLED_SetByte_Fine>
  if (bit)
 8003454:	7bbb      	ldrb	r3, [r7, #14]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d014      	beq.n	8003484 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	3301      	adds	r3, #1
 800345e:	b2d8      	uxtb	r0, r3
 8003460:	797a      	ldrb	r2, [r7, #5]
 8003462:	7bbb      	ldrb	r3, [r7, #14]
 8003464:	f1c3 0308 	rsb	r3, r3, #8
 8003468:	fa42 f303 	asr.w	r3, r2, r3
 800346c:	b2dc      	uxtb	r4, r3
 800346e:	7bbb      	ldrb	r3, [r7, #14]
 8003470:	3b01      	subs	r3, #1
 8003472:	b2db      	uxtb	r3, r3
 8003474:	79f9      	ldrb	r1, [r7, #7]
 8003476:	793a      	ldrb	r2, [r7, #4]
 8003478:	9201      	str	r2, [sp, #4]
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	2300      	movs	r3, #0
 800347e:	4622      	mov	r2, r4
 8003480:	f7ff fee8 	bl	8003254 <OLED_SetByte_Fine>
  }
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	bd90      	pop	{r4, r7, pc}

0800348c <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b087      	sub	sp, #28
 8003490:	af02      	add	r7, sp, #8
 8003492:	603a      	str	r2, [r7, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	4603      	mov	r3, r0
 8003498:	71fb      	strb	r3, [r7, #7]
 800349a:	460b      	mov	r3, r1
 800349c:	71bb      	strb	r3, [r7, #6]
 800349e:	4613      	mov	r3, r2
 80034a0:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 80034a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034a6:	08db      	lsrs	r3, r3, #3
 80034a8:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 80034aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]
 80034b8:	e025      	b.n	8003506 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 80034ba:	2300      	movs	r3, #0
 80034bc:	73bb      	strb	r3, [r7, #14]
 80034be:	e01b      	b.n	80034f8 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 80034c0:	79fa      	ldrb	r2, [r7, #7]
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	4413      	add	r3, r2
 80034c6:	b2d8      	uxtb	r0, r3
 80034c8:	7bbb      	ldrb	r3, [r7, #14]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	79bb      	ldrb	r3, [r7, #6]
 80034d0:	4413      	add	r3, r2
 80034d2:	b2dc      	uxtb	r4, r3
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	7bbb      	ldrb	r3, [r7, #14]
 80034d8:	7979      	ldrb	r1, [r7, #5]
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	461a      	mov	r2, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	4413      	add	r3, r2
 80034e6:	781a      	ldrb	r2, [r3, #0]
 80034e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80034ec:	4621      	mov	r1, r4
 80034ee:	f7ff ff8c 	bl	800340a <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 80034f2:	7bbb      	ldrb	r3, [r7, #14]
 80034f4:	3301      	adds	r3, #1
 80034f6:	73bb      	strb	r3, [r7, #14]
 80034f8:	7bba      	ldrb	r2, [r7, #14]
 80034fa:	7b3b      	ldrb	r3, [r7, #12]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d3df      	bcc.n	80034c0 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	3301      	adds	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	797b      	ldrb	r3, [r7, #5]
 800350a:	429a      	cmp	r2, r3
 800350c:	d3d5      	bcc.n	80034ba <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 800350e:	7afb      	ldrb	r3, [r7, #11]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d028      	beq.n	8003566 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8003514:	797b      	ldrb	r3, [r7, #5]
 8003516:	b29b      	uxth	r3, r3
 8003518:	7b3a      	ldrb	r2, [r7, #12]
 800351a:	b292      	uxth	r2, r2
 800351c:	fb02 f303 	mul.w	r3, r2, r3
 8003520:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8003522:	2300      	movs	r3, #0
 8003524:	737b      	strb	r3, [r7, #13]
 8003526:	e01a      	b.n	800355e <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8003528:	79fa      	ldrb	r2, [r7, #7]
 800352a:	7b7b      	ldrb	r3, [r7, #13]
 800352c:	4413      	add	r3, r2
 800352e:	b2d8      	uxtb	r0, r3
 8003530:	7b3b      	ldrb	r3, [r7, #12]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	b2da      	uxtb	r2, r3
 8003536:	79bb      	ldrb	r3, [r7, #6]
 8003538:	4413      	add	r3, r2
 800353a:	b2d9      	uxtb	r1, r3
 800353c:	893a      	ldrh	r2, [r7, #8]
 800353e:	7b7b      	ldrb	r3, [r7, #13]
 8003540:	4413      	add	r3, r2
 8003542:	461a      	mov	r2, r3
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4413      	add	r3, r2
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	7afc      	ldrb	r4, [r7, #11]
 800354c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	4623      	mov	r3, r4
 8003554:	f7ff fefa 	bl	800334c <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8003558:	7b7b      	ldrb	r3, [r7, #13]
 800355a:	3301      	adds	r3, #1
 800355c:	737b      	strb	r3, [r7, #13]
 800355e:	7b7a      	ldrb	r2, [r7, #13]
 8003560:	797b      	ldrb	r3, [r7, #5]
 8003562:	429a      	cmp	r2, r3
 8003564:	d3e0      	bcc.n	8003528 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	bd90      	pop	{r4, r7, pc}

0800356e <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 800356e:	b5b0      	push	{r4, r5, r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af02      	add	r7, sp, #8
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
 800357a:	460b      	mov	r3, r1
 800357c:	71bb      	strb	r3, [r7, #6]
 800357e:	4613      	mov	r3, r2
 8003580:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	797b      	ldrb	r3, [r7, #5]
 8003588:	f1a3 0120 	sub.w	r1, r3, #32
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	3307      	adds	r3, #7
 8003592:	2b00      	cmp	r3, #0
 8003594:	da00      	bge.n	8003598 <OLED_PrintASCIIChar+0x2a>
 8003596:	3307      	adds	r3, #7
 8003598:	10db      	asrs	r3, r3, #3
 800359a:	4618      	mov	r0, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	785b      	ldrb	r3, [r3, #1]
 80035a0:	fb00 f303 	mul.w	r3, r0, r3
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	18d4      	adds	r4, r2, r3
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	785d      	ldrb	r5, [r3, #1]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	79b9      	ldrb	r1, [r7, #6]
 80035b4:	79f8      	ldrb	r0, [r7, #7]
 80035b6:	7e3a      	ldrb	r2, [r7, #24]
 80035b8:	9201      	str	r2, [sp, #4]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	462b      	mov	r3, r5
 80035be:	4622      	mov	r2, r4
 80035c0:	f7ff ff64 	bl	800348c <OLED_SetBlock>
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bdb0      	pop	{r4, r5, r7, pc}

080035cc <OLED_PrintASCIIString>:
 * @param str 字符串
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIString(uint8_t x, uint8_t y, char *str, const ASCIIFont *font, OLED_ColorMode color)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	60ba      	str	r2, [r7, #8]
 80035d4:	607b      	str	r3, [r7, #4]
 80035d6:	4603      	mov	r3, r0
 80035d8:	73fb      	strb	r3, [r7, #15]
 80035da:	460b      	mov	r3, r1
 80035dc:	73bb      	strb	r3, [r7, #14]
  uint8_t x0 = x;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	75fb      	strb	r3, [r7, #23]
  while (*str)
 80035e2:	e011      	b.n	8003608 <OLED_PrintASCIIString+0x3c>
  {
    OLED_PrintASCIIChar(x0, y, *str, font, color);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	781a      	ldrb	r2, [r3, #0]
 80035e8:	7bb9      	ldrb	r1, [r7, #14]
 80035ea:	7df8      	ldrb	r0, [r7, #23]
 80035ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f7ff ffbb 	bl	800356e <OLED_PrintASCIIChar>
    x0 += font->w;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	785a      	ldrb	r2, [r3, #1]
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	4413      	add	r3, r2
 8003600:	75fb      	strb	r3, [r7, #23]
    str++;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	3301      	adds	r3, #1
 8003606:	60bb      	str	r3, [r7, #8]
  while (*str)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e9      	bne.n	80035e4 <OLED_PrintASCIIString+0x18>
  }
}
 8003610:	bf00      	nop
 8003612:	bf00      	nop
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <PID_Init>:
#include "pid.h"
#include <math.h>

// 初始化PID控制器
void PID_Init(PID_Controller* pid, float Kp, float Ki, float Kd, float output_limit) {
 800361a:	b480      	push	{r7}
 800361c:	b085      	sub	sp, #20
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	603b      	str	r3, [r7, #0]
    pid->Kp = Kp;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	609a      	str	r2, [r3, #8]
    pid->integral = 0.0f;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0.0f;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	611a      	str	r2, [r3, #16]
    pid->output_limit = output_limit;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	615a      	str	r2, [r3, #20]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <PID_Calculate>:

// 计算PID输出
float PID_Calculate(PID_Controller* pid, float setpoint, float measurement) {
 800365a:	b590      	push	{r4, r7, lr}
 800365c:	b08b      	sub	sp, #44	@ 0x2c
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
    float error = setpoint - measurement;
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	68b8      	ldr	r0, [r7, #8]
 800366a:	f7fd fa81 	bl	8000b70 <__aeabi_fsub>
 800366e:	4603      	mov	r3, r0
 8003670:	623b      	str	r3, [r7, #32]

    // 比例项
    float P = pid->Kp * error;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4619      	mov	r1, r3
 8003678:	6a38      	ldr	r0, [r7, #32]
 800367a:	f7fd fb83 	bl	8000d84 <__aeabi_fmul>
 800367e:	4603      	mov	r3, r0
 8003680:	61fb      	str	r3, [r7, #28]

    // 积分项（带抗饱和）
    pid->integral += error;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	6a39      	ldr	r1, [r7, #32]
 8003688:	4618      	mov	r0, r3
 800368a:	f7fd fa73 	bl	8000b74 <__addsf3>
 800368e:	4603      	mov	r3, r0
 8003690:	461a      	mov	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	60da      	str	r2, [r3, #12]
    if (pid->integral > pid->output_limit) pid->integral = pid->output_limit;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	4619      	mov	r1, r3
 80036a0:	4610      	mov	r0, r2
 80036a2:	f7fd fd2b 	bl	80010fc <__aeabi_fcmpgt>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <PID_Calculate+0x5a>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	695a      	ldr	r2, [r3, #20]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	60da      	str	r2, [r3, #12]
    if (pid->integral < -pid->output_limit) pid->integral = -pid->output_limit;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80036c0:	4619      	mov	r1, r3
 80036c2:	4610      	mov	r0, r2
 80036c4:	f7fd fcfc 	bl	80010c0 <__aeabi_fcmplt>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <PID_Calculate+0x80>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	60da      	str	r2, [r3, #12]
    float I = pid->Ki * pid->integral;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f7fd fb4d 	bl	8000d84 <__aeabi_fmul>
 80036ea:	4603      	mov	r3, r0
 80036ec:	61bb      	str	r3, [r7, #24]

    // 微分项
    float D = pid->Kd * (error - pid->prev_error);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689c      	ldr	r4, [r3, #8]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	4619      	mov	r1, r3
 80036f8:	6a38      	ldr	r0, [r7, #32]
 80036fa:	f7fd fa39 	bl	8000b70 <__aeabi_fsub>
 80036fe:	4603      	mov	r3, r0
 8003700:	4619      	mov	r1, r3
 8003702:	4620      	mov	r0, r4
 8003704:	f7fd fb3e 	bl	8000d84 <__aeabi_fmul>
 8003708:	4603      	mov	r3, r0
 800370a:	617b      	str	r3, [r7, #20]
    pid->prev_error = error;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a3a      	ldr	r2, [r7, #32]
 8003710:	611a      	str	r2, [r3, #16]

    // 总和并限幅
    float output = P + I + D;
 8003712:	69b9      	ldr	r1, [r7, #24]
 8003714:	69f8      	ldr	r0, [r7, #28]
 8003716:	f7fd fa2d 	bl	8000b74 <__addsf3>
 800371a:	4603      	mov	r3, r0
 800371c:	4619      	mov	r1, r3
 800371e:	6978      	ldr	r0, [r7, #20]
 8003720:	f7fd fa28 	bl	8000b74 <__addsf3>
 8003724:	4603      	mov	r3, r0
 8003726:	627b      	str	r3, [r7, #36]	@ 0x24
    if (output > pid->output_limit) output = pid->output_limit;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	4619      	mov	r1, r3
 800372e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003730:	f7fd fce4 	bl	80010fc <__aeabi_fcmpgt>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <PID_Calculate+0xe6>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (output < -pid->output_limit) output = -pid->output_limit;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003748:	4619      	mov	r1, r3
 800374a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800374c:	f7fd fcb8 	bl	80010c0 <__aeabi_fcmplt>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d004      	beq.n	8003760 <PID_Calculate+0x106>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24

    return output;
 8003760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003762:	4618      	mov	r0, r3
 8003764:	372c      	adds	r7, #44	@ 0x2c
 8003766:	46bd      	mov	sp, r7
 8003768:	bd90      	pop	{r4, r7, pc}
	...

0800376c <Motor_Mixing>:

// 电机混控函数（X型布局）
void Motor_Mixing(float throttle, float pitch_ctrl, float roll_ctrl, float yaw_ctrl,
                 float* motorA, float* motorB, float* motorC, float* motorD) {
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]
    // 基础油门 + 姿态控制混合
    *motorA = throttle - pitch_ctrl - roll_ctrl - yaw_ctrl;  // 前左(A)
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7fd f9f7 	bl	8000b70 <__aeabi_fsub>
 8003782:	4603      	mov	r3, r0
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd f9f2 	bl	8000b70 <__aeabi_fsub>
 800378c:	4603      	mov	r3, r0
 800378e:	6839      	ldr	r1, [r7, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7fd f9ed 	bl	8000b70 <__aeabi_fsub>
 8003796:	4603      	mov	r3, r0
 8003798:	461a      	mov	r2, r3
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	601a      	str	r2, [r3, #0]
    *motorB = throttle - pitch_ctrl + roll_ctrl + yaw_ctrl;  // 前右(B)
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f7fd f9e5 	bl	8000b70 <__aeabi_fsub>
 80037a6:	4603      	mov	r3, r0
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fd f9e2 	bl	8000b74 <__addsf3>
 80037b0:	4603      	mov	r3, r0
 80037b2:	6839      	ldr	r1, [r7, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fd f9dd 	bl	8000b74 <__addsf3>
 80037ba:	4603      	mov	r3, r0
 80037bc:	461a      	mov	r2, r3
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	601a      	str	r2, [r3, #0]
    *motorC = throttle + pitch_ctrl + roll_ctrl - yaw_ctrl;  // 后右(C)
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f7fd f9d5 	bl	8000b74 <__addsf3>
 80037ca:	4603      	mov	r3, r0
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fd f9d0 	bl	8000b74 <__addsf3>
 80037d4:	4603      	mov	r3, r0
 80037d6:	6839      	ldr	r1, [r7, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fd f9c9 	bl	8000b70 <__aeabi_fsub>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	601a      	str	r2, [r3, #0]
    *motorD = throttle + pitch_ctrl - roll_ctrl + yaw_ctrl;  // 后左(D)
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f7fd f9c3 	bl	8000b74 <__addsf3>
 80037ee:	4603      	mov	r3, r0
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fd f9bc 	bl	8000b70 <__aeabi_fsub>
 80037f8:	4603      	mov	r3, r0
 80037fa:	6839      	ldr	r1, [r7, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd f9b9 	bl	8000b74 <__addsf3>
 8003802:	4603      	mov	r3, r0
 8003804:	461a      	mov	r2, r3
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	601a      	str	r2, [r3, #0]

    // 电机输出限幅(0-100)
    #define CLAMP(x) (x < 0 ? 0 : (x > 100 ? 100 : x))
    *motorA = CLAMP(*motorA);
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f04f 0100 	mov.w	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd fc54 	bl	80010c0 <__aeabi_fcmplt>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <Motor_Mixing+0xb8>
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	e00c      	b.n	800383e <Motor_Mixing+0xd2>
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4932      	ldr	r1, [pc, #200]	@ (80038f4 <Motor_Mixing+0x188>)
 800382a:	4618      	mov	r0, r3
 800382c:	f7fd fc66 	bl	80010fc <__aeabi_fcmpgt>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <Motor_Mixing+0xce>
 8003836:	4b2f      	ldr	r3, [pc, #188]	@ (80038f4 <Motor_Mixing+0x188>)
 8003838:	e001      	b.n	800383e <Motor_Mixing+0xd2>
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	6013      	str	r3, [r2, #0]
    *motorB = CLAMP(*motorB);
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f04f 0100 	mov.w	r1, #0
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd fc38 	bl	80010c0 <__aeabi_fcmplt>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <Motor_Mixing+0xf0>
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	e00c      	b.n	8003876 <Motor_Mixing+0x10a>
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4924      	ldr	r1, [pc, #144]	@ (80038f4 <Motor_Mixing+0x188>)
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fc4a 	bl	80010fc <__aeabi_fcmpgt>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <Motor_Mixing+0x106>
 800386e:	4b21      	ldr	r3, [pc, #132]	@ (80038f4 <Motor_Mixing+0x188>)
 8003870:	e001      	b.n	8003876 <Motor_Mixing+0x10a>
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	6013      	str	r3, [r2, #0]
    *motorC = CLAMP(*motorC);
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f04f 0100 	mov.w	r1, #0
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd fc1c 	bl	80010c0 <__aeabi_fcmplt>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <Motor_Mixing+0x128>
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	e00c      	b.n	80038ae <Motor_Mixing+0x142>
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4916      	ldr	r1, [pc, #88]	@ (80038f4 <Motor_Mixing+0x188>)
 800389a:	4618      	mov	r0, r3
 800389c:	f7fd fc2e 	bl	80010fc <__aeabi_fcmpgt>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <Motor_Mixing+0x13e>
 80038a6:	4b13      	ldr	r3, [pc, #76]	@ (80038f4 <Motor_Mixing+0x188>)
 80038a8:	e001      	b.n	80038ae <Motor_Mixing+0x142>
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6a3a      	ldr	r2, [r7, #32]
 80038b0:	6013      	str	r3, [r2, #0]
    *motorD = CLAMP(*motorD);
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f04f 0100 	mov.w	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fd fc00 	bl	80010c0 <__aeabi_fcmplt>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <Motor_Mixing+0x160>
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e00c      	b.n	80038e6 <Motor_Mixing+0x17a>
 80038cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4908      	ldr	r1, [pc, #32]	@ (80038f4 <Motor_Mixing+0x188>)
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fd fc12 	bl	80010fc <__aeabi_fcmpgt>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <Motor_Mixing+0x176>
 80038de:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <Motor_Mixing+0x188>)
 80038e0:	e001      	b.n	80038e6 <Motor_Mixing+0x17a>
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e8:	6013      	str	r3, [r2, #0]
}
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	42c80000 	.word	0x42c80000

080038f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80038fe:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <HAL_MspInit+0x5c>)
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	4a14      	ldr	r2, [pc, #80]	@ (8003954 <HAL_MspInit+0x5c>)
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	6193      	str	r3, [r2, #24]
 800390a:	4b12      	ldr	r3, [pc, #72]	@ (8003954 <HAL_MspInit+0x5c>)
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003916:	4b0f      	ldr	r3, [pc, #60]	@ (8003954 <HAL_MspInit+0x5c>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	4a0e      	ldr	r2, [pc, #56]	@ (8003954 <HAL_MspInit+0x5c>)
 800391c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003920:	61d3      	str	r3, [r2, #28]
 8003922:	4b0c      	ldr	r3, [pc, #48]	@ (8003954 <HAL_MspInit+0x5c>)
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800392e:	4b0a      	ldr	r3, [pc, #40]	@ (8003958 <HAL_MspInit+0x60>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	4a04      	ldr	r2, [pc, #16]	@ (8003958 <HAL_MspInit+0x60>)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800394a:	bf00      	nop
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr
 8003954:	40021000 	.word	0x40021000
 8003958:	40010000 	.word	0x40010000

0800395c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003960:	bf00      	nop
 8003962:	e7fd      	b.n	8003960 <NMI_Handler+0x4>

08003964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003968:	bf00      	nop
 800396a:	e7fd      	b.n	8003968 <HardFault_Handler+0x4>

0800396c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003970:	bf00      	nop
 8003972:	e7fd      	b.n	8003970 <MemManage_Handler+0x4>

08003974 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003978:	bf00      	nop
 800397a:	e7fd      	b.n	8003978 <BusFault_Handler+0x4>

0800397c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003980:	bf00      	nop
 8003982:	e7fd      	b.n	8003980 <UsageFault_Handler+0x4>

08003984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003988:	bf00      	nop
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003994:	bf00      	nop
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr

080039a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039ac:	f000 fd24 	bl	80043f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039b0:	bf00      	nop
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039b8:	4802      	ldr	r0, [pc, #8]	@ (80039c4 <DMA1_Channel1_IRQHandler+0x10>)
 80039ba:	f001 fc33 	bl	8005224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000220 	.word	0x20000220

080039c8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80039cc:	4802      	ldr	r0, [pc, #8]	@ (80039d8 <DMA1_Channel6_IRQHandler+0x10>)
 80039ce:	f001 fc29 	bl	8005224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000a00 	.word	0x20000a00

080039dc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80039e0:	4802      	ldr	r0, [pc, #8]	@ (80039ec <DMA1_Channel7_IRQHandler+0x10>)
 80039e2:	f001 fc1f 	bl	8005224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20000314 	.word	0x20000314

080039f0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80039f4:	4802      	ldr	r0, [pc, #8]	@ (8003a00 <ADC1_2_IRQHandler+0x10>)
 80039f6:	f000 ff29 	bl	800484c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200001f0 	.word	0x200001f0

08003a04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a08:	4802      	ldr	r0, [pc, #8]	@ (8003a14 <TIM3_IRQHandler+0x10>)
 8003a0a:	f004 fb7d 	bl	8008108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000970 	.word	0x20000970

08003a18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a1c:	4802      	ldr	r0, [pc, #8]	@ (8003a28 <USART2_IRQHandler+0x10>)
 8003a1e:	f005 f9f7 	bl	8008e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	200009b8 	.word	0x200009b8

08003a2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return 1;
 8003a30:	2301      	movs	r3, #1
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr

08003a3a <_kill>:

int _kill(int pid, int sig)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a44:	f007 fea8 	bl	800b798 <__errno>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2216      	movs	r2, #22
 8003a4c:	601a      	str	r2, [r3, #0]
  return -1;
 8003a4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <_exit>:

void _exit (int status)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a62:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ffe7 	bl	8003a3a <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a6c:	bf00      	nop
 8003a6e:	e7fd      	b.n	8003a6c <_exit+0x12>

08003a70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	e00a      	b.n	8003a98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a82:	f3af 8000 	nop.w
 8003a86:	4601      	mov	r1, r0
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	60ba      	str	r2, [r7, #8]
 8003a8e:	b2ca      	uxtb	r2, r1
 8003a90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	3301      	adds	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	dbf0      	blt.n	8003a82 <_read+0x12>
  }

  return len;
 8003aa0:	687b      	ldr	r3, [r7, #4]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b086      	sub	sp, #24
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	e009      	b.n	8003ad0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	60ba      	str	r2, [r7, #8]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	3301      	adds	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	dbf1      	blt.n	8003abc <_write+0x12>
  }
  return len;
 8003ad8:	687b      	ldr	r3, [r7, #4]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <_close>:

int _close(int file)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003aea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr

08003af8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b08:	605a      	str	r2, [r3, #4]
  return 0;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <_isatty>:

int _isatty(int file)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b1e:	2301      	movs	r3, #1
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b085      	sub	sp, #20
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr
	...

08003b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b4c:	4a14      	ldr	r2, [pc, #80]	@ (8003ba0 <_sbrk+0x5c>)
 8003b4e:	4b15      	ldr	r3, [pc, #84]	@ (8003ba4 <_sbrk+0x60>)
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b58:	4b13      	ldr	r3, [pc, #76]	@ (8003ba8 <_sbrk+0x64>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d102      	bne.n	8003b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b60:	4b11      	ldr	r3, [pc, #68]	@ (8003ba8 <_sbrk+0x64>)
 8003b62:	4a12      	ldr	r2, [pc, #72]	@ (8003bac <_sbrk+0x68>)
 8003b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b66:	4b10      	ldr	r3, [pc, #64]	@ (8003ba8 <_sbrk+0x64>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d207      	bcs.n	8003b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b74:	f007 fe10 	bl	800b798 <__errno>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	220c      	movs	r2, #12
 8003b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b82:	e009      	b.n	8003b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b84:	4b08      	ldr	r3, [pc, #32]	@ (8003ba8 <_sbrk+0x64>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b8a:	4b07      	ldr	r3, [pc, #28]	@ (8003ba8 <_sbrk+0x64>)
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4413      	add	r3, r2
 8003b92:	4a05      	ldr	r2, [pc, #20]	@ (8003ba8 <_sbrk+0x64>)
 8003b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b96:	68fb      	ldr	r3, [r7, #12]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20005000 	.word	0x20005000
 8003ba4:	00000400 	.word	0x00000400
 8003ba8:	20000924 	.word	0x20000924
 8003bac:	20000b98 	.word	0x20000b98

08003bb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <__SetPwm>:
#define MIN_SPEED   0


/*------------- 内部静态函数 -------------*/
static inline void __SetPwm(TIM_HandleTypeDef *tim, uint32_t ch, uint8_t spd)
{
 8003bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc0:	b098      	sub	sp, #96	@ 0x60
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6578      	str	r0, [r7, #84]	@ 0x54
 8003bc6:	6539      	str	r1, [r7, #80]	@ 0x50
 8003bc8:	4613      	mov	r3, r2
 8003bca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	// 获取定时器的 Period 值
	uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8003bce:	4b65      	ldr	r3, [pc, #404]	@ (8003d64 <__SetPwm+0x1a8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    __HAL_TIM_SET_COMPARE(tim, ch, (uint32_t)((uint64_t)spd * period / 100u));
 8003bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d122      	bne.n	8003c22 <__SetPwm+0x66>
 8003bdc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003be0:	2200      	movs	r2, #0
 8003be2:	469a      	mov	sl, r3
 8003be4:	4693      	mov	fp, r2
 8003be6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003be8:	2200      	movs	r2, #0
 8003bea:	4698      	mov	r8, r3
 8003bec:	4691      	mov	r9, r2
 8003bee:	fb08 f20b 	mul.w	r2, r8, fp
 8003bf2:	fb0a f309 	mul.w	r3, sl, r9
 8003bf6:	4413      	add	r3, r2
 8003bf8:	fbaa 4508 	umull	r4, r5, sl, r8
 8003bfc:	442b      	add	r3, r5
 8003bfe:	461d      	mov	r5, r3
 8003c00:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	4620      	mov	r0, r4
 8003c0a:	4629      	mov	r1, r5
 8003c0c:	f7fd fab6 	bl	800117c <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003c20:	e09a      	b.n	8003d58 <__SetPwm+0x19c>
    __HAL_TIM_SET_COMPARE(tim, ch, (uint32_t)((uint64_t)spd * period / 100u));
 8003c22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d131      	bne.n	8003c8c <__SetPwm+0xd0>
 8003c28:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c34:	2200      	movs	r2, #0
 8003c36:	623b      	str	r3, [r7, #32]
 8003c38:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c3a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8003c3e:	4622      	mov	r2, r4
 8003c40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c44:	4641      	mov	r1, r8
 8003c46:	fb01 f202 	mul.w	r2, r1, r2
 8003c4a:	464d      	mov	r5, r9
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	4621      	mov	r1, r4
 8003c50:	4603      	mov	r3, r0
 8003c52:	fb03 f305 	mul.w	r3, r3, r5
 8003c56:	4413      	add	r3, r2
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4641      	mov	r1, r8
 8003c5c:	fba2 2101 	umull	r2, r1, r2, r1
 8003c60:	6479      	str	r1, [r7, #68]	@ 0x44
 8003c62:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c66:	4413      	add	r3, r2
 8003c68:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c6a:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8003c76:	f7fd fa81 	bl	800117c <__aeabi_uldivmod>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4603      	mov	r3, r0
 8003c88:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003c8a:	e065      	b.n	8003d58 <__SetPwm+0x19c>
    __HAL_TIM_SET_COMPARE(tim, ch, (uint32_t)((uint64_t)spd * period / 100u));
 8003c8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d131      	bne.n	8003cf6 <__SetPwm+0x13a>
 8003c92:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003c96:	2200      	movs	r2, #0
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	61fa      	str	r2, [r7, #28]
 8003c9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	617a      	str	r2, [r7, #20]
 8003ca4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003ca8:	4622      	mov	r2, r4
 8003caa:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003cae:	4641      	mov	r1, r8
 8003cb0:	fb01 f202 	mul.w	r2, r1, r2
 8003cb4:	464d      	mov	r5, r9
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	4621      	mov	r1, r4
 8003cba:	4603      	mov	r3, r0
 8003cbc:	fb03 f305 	mul.w	r3, r3, r5
 8003cc0:	4413      	add	r3, r2
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	fba2 2101 	umull	r2, r1, r2, r1
 8003cca:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8003ccc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003cce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cd0:	4413      	add	r3, r2
 8003cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cd4:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003ce0:	f7fd fa4c 	bl	800117c <__aeabi_uldivmod>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003cf4:	e030      	b.n	8003d58 <__SetPwm+0x19c>
    __HAL_TIM_SET_COMPARE(tim, ch, (uint32_t)((uint64_t)spd * period / 100u));
 8003cf6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	60fa      	str	r2, [r7, #12]
 8003d00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d02:	2200      	movs	r2, #0
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003d0c:	4622      	mov	r2, r4
 8003d0e:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003d12:	4641      	mov	r1, r8
 8003d14:	fb01 f202 	mul.w	r2, r1, r2
 8003d18:	464d      	mov	r5, r9
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	4603      	mov	r3, r0
 8003d20:	fb03 f305 	mul.w	r3, r3, r5
 8003d24:	4413      	add	r3, r2
 8003d26:	4602      	mov	r2, r0
 8003d28:	4641      	mov	r1, r8
 8003d2a:	fba2 2101 	umull	r2, r1, r2, r1
 8003d2e:	6379      	str	r1, [r7, #52]	@ 0x34
 8003d30:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d34:	4413      	add	r3, r2
 8003d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d38:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003d44:	f7fd fa1a 	bl	800117c <__aeabi_uldivmod>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4603      	mov	r3, r0
 8003d56:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003d58:	bf00      	nop
 8003d5a:	3760      	adds	r7, #96	@ 0x60
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d62:	bf00      	nop
 8003d64:	20000928 	.word	0x20000928

08003d68 <__SetDir>:

static inline void __SetDir(GPIO_TypeDef *p1, uint16_t n1,
                            GPIO_TypeDef *p2, uint16_t n2,
                            MotorDir dir)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	461a      	mov	r2, r3
 8003d74:	460b      	mov	r3, r1
 8003d76:	817b      	strh	r3, [r7, #10]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	813b      	strh	r3, [r7, #8]
    switch (dir) {
 8003d7c:	7e3b      	ldrb	r3, [r7, #24]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d002      	beq.n	8003d88 <__SetDir+0x20>
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d00d      	beq.n	8003da2 <__SetDir+0x3a>
 8003d86:	e019      	b.n	8003dbc <__SetDir+0x54>
    case DIR_CW:
        HAL_GPIO_WritePin(p1, n1, GPIO_PIN_SET);
 8003d88:	897b      	ldrh	r3, [r7, #10]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f001 fdbc 	bl	800590c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(p2, n2, GPIO_PIN_RESET);
 8003d94:	893b      	ldrh	r3, [r7, #8]
 8003d96:	2200      	movs	r2, #0
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f001 fdb6 	bl	800590c <HAL_GPIO_WritePin>
        break;
 8003da0:	e019      	b.n	8003dd6 <__SetDir+0x6e>
    case DIR_CCW:
        HAL_GPIO_WritePin(p1, n1, GPIO_PIN_RESET);
 8003da2:	897b      	ldrh	r3, [r7, #10]
 8003da4:	2200      	movs	r2, #0
 8003da6:	4619      	mov	r1, r3
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f001 fdaf 	bl	800590c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(p2, n2, GPIO_PIN_SET);
 8003dae:	893b      	ldrh	r3, [r7, #8]
 8003db0:	2201      	movs	r2, #1
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f001 fda9 	bl	800590c <HAL_GPIO_WritePin>
        break;
 8003dba:	e00c      	b.n	8003dd6 <__SetDir+0x6e>
    case DIR_STOP:
    default:
        HAL_GPIO_WritePin(p1, n1, GPIO_PIN_RESET);
 8003dbc:	897b      	ldrh	r3, [r7, #10]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f001 fda2 	bl	800590c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(p2, n2, GPIO_PIN_RESET);
 8003dc8:	893b      	ldrh	r3, [r7, #8]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f001 fd9c 	bl	800590c <HAL_GPIO_WritePin>
        break;
 8003dd4:	bf00      	nop
    }
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <TB6612_Init>:

/*------------- API 实现 -------------*/
void TB6612_Init(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
    /* 启动所有 PWM 通道 */
    HAL_TIM_PWM_Start(PWMA_TIM, PWMA_CH);
 8003de4:	2100      	movs	r1, #0
 8003de6:	4808      	ldr	r0, [pc, #32]	@ (8003e08 <TB6612_Init+0x28>)
 8003de8:	f004 f8ec 	bl	8007fc4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(PWMB_TIM, PWMB_CH);
 8003dec:	2104      	movs	r1, #4
 8003dee:	4806      	ldr	r0, [pc, #24]	@ (8003e08 <TB6612_Init+0x28>)
 8003df0:	f004 f8e8 	bl	8007fc4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(PWMC_TIM, PWMC_CH);
 8003df4:	2108      	movs	r1, #8
 8003df6:	4804      	ldr	r0, [pc, #16]	@ (8003e08 <TB6612_Init+0x28>)
 8003df8:	f004 f8e4 	bl	8007fc4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(PWMD_TIM, PWMD_CH);
 8003dfc:	210c      	movs	r1, #12
 8003dfe:	4802      	ldr	r0, [pc, #8]	@ (8003e08 <TB6612_Init+0x28>)
 8003e00:	f004 f8e0 	bl	8007fc4 <HAL_TIM_PWM_Start>

    /* GPIO 方向脚已在 CubeMX 配置为推挽输出，无需额外初始化 */
}
 8003e04:	bf00      	nop
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	20000928 	.word	0x20000928

08003e0c <TB6612_SetMotor>:

void TB6612_SetMotor(MotorId id, MotorDir dir, uint8_t speed)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	4603      	mov	r3, r0
 8003e14:	71fb      	strb	r3, [r7, #7]
 8003e16:	460b      	mov	r3, r1
 8003e18:	71bb      	strb	r3, [r7, #6]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	717b      	strb	r3, [r7, #5]
    if (speed > MAX_SPEED) speed = MAX_SPEED;
 8003e1e:	797b      	ldrb	r3, [r7, #5]
 8003e20:	2b64      	cmp	r3, #100	@ 0x64
 8003e22:	d901      	bls.n	8003e28 <TB6612_SetMotor+0x1c>
 8003e24:	2364      	movs	r3, #100	@ 0x64
 8003e26:	717b      	strb	r3, [r7, #5]
    if (speed < MIN_SPEED) speed = MIN_SPEED;

    switch (id) {
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d846      	bhi.n	8003ebc <TB6612_SetMotor+0xb0>
 8003e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e34 <TB6612_SetMotor+0x28>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e45 	.word	0x08003e45
 8003e38:	08003e63 	.word	0x08003e63
 8003e3c:	08003e81 	.word	0x08003e81
 8003e40:	08003e9f 	.word	0x08003e9f
    case MOTOR_A: /* 第 1 片 MA */
        __SetPwm(PWMA_TIM, PWMA_CH, speed);
 8003e44:	797b      	ldrb	r3, [r7, #5]
 8003e46:	461a      	mov	r2, r3
 8003e48:	2100      	movs	r1, #0
 8003e4a:	481f      	ldr	r0, [pc, #124]	@ (8003ec8 <TB6612_SetMotor+0xbc>)
 8003e4c:	f7ff feb6 	bl	8003bbc <__SetPwm>
        __SetDir(AIN1_Port, AIN1_Pin, AIN2_Port, AIN2_Pin, dir);
 8003e50:	79bb      	ldrb	r3, [r7, #6]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	2320      	movs	r3, #32
 8003e56:	4a1d      	ldr	r2, [pc, #116]	@ (8003ecc <TB6612_SetMotor+0xc0>)
 8003e58:	2110      	movs	r1, #16
 8003e5a:	481c      	ldr	r0, [pc, #112]	@ (8003ecc <TB6612_SetMotor+0xc0>)
 8003e5c:	f7ff ff84 	bl	8003d68 <__SetDir>
        break;
 8003e60:	e02d      	b.n	8003ebe <TB6612_SetMotor+0xb2>

    case MOTOR_B: /* 第 1 片 MB */
        __SetPwm(PWMB_TIM, PWMB_CH, speed);
 8003e62:	797b      	ldrb	r3, [r7, #5]
 8003e64:	461a      	mov	r2, r3
 8003e66:	2104      	movs	r1, #4
 8003e68:	4817      	ldr	r0, [pc, #92]	@ (8003ec8 <TB6612_SetMotor+0xbc>)
 8003e6a:	f7ff fea7 	bl	8003bbc <__SetPwm>
        __SetDir(BIN1_Port, BIN1_Pin, BIN2_Port, BIN2_Pin, dir);
 8003e6e:	79bb      	ldrb	r3, [r7, #6]
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	2380      	movs	r3, #128	@ 0x80
 8003e74:	4a15      	ldr	r2, [pc, #84]	@ (8003ecc <TB6612_SetMotor+0xc0>)
 8003e76:	2140      	movs	r1, #64	@ 0x40
 8003e78:	4814      	ldr	r0, [pc, #80]	@ (8003ecc <TB6612_SetMotor+0xc0>)
 8003e7a:	f7ff ff75 	bl	8003d68 <__SetDir>
        break;
 8003e7e:	e01e      	b.n	8003ebe <TB6612_SetMotor+0xb2>

    case MOTOR_C: /* 第 2 片 MC */
        __SetPwm(PWMC_TIM, PWMC_CH, speed);
 8003e80:	797b      	ldrb	r3, [r7, #5]
 8003e82:	461a      	mov	r2, r3
 8003e84:	2108      	movs	r1, #8
 8003e86:	4810      	ldr	r0, [pc, #64]	@ (8003ec8 <TB6612_SetMotor+0xbc>)
 8003e88:	f7ff fe98 	bl	8003bbc <__SetPwm>
        __SetDir(CIN1_Port, CIN1_Pin, CIN2_Port, CIN2_Pin, dir);
 8003e8c:	79bb      	ldrb	r3, [r7, #6]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	2302      	movs	r3, #2
 8003e92:	4a0f      	ldr	r2, [pc, #60]	@ (8003ed0 <TB6612_SetMotor+0xc4>)
 8003e94:	2101      	movs	r1, #1
 8003e96:	480e      	ldr	r0, [pc, #56]	@ (8003ed0 <TB6612_SetMotor+0xc4>)
 8003e98:	f7ff ff66 	bl	8003d68 <__SetDir>
        break;
 8003e9c:	e00f      	b.n	8003ebe <TB6612_SetMotor+0xb2>

    case MOTOR_D: /* 第 2 片 MD */
        __SetPwm(PWMD_TIM, PWMD_CH, speed);
 8003e9e:	797b      	ldrb	r3, [r7, #5]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	210c      	movs	r1, #12
 8003ea4:	4808      	ldr	r0, [pc, #32]	@ (8003ec8 <TB6612_SetMotor+0xbc>)
 8003ea6:	f7ff fe89 	bl	8003bbc <__SetPwm>
        __SetDir(DIN1_Port, DIN1_Pin, DIN2_Port, DIN2_Pin, dir);
 8003eaa:	79bb      	ldrb	r3, [r7, #6]
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	2308      	movs	r3, #8
 8003eb0:	4a07      	ldr	r2, [pc, #28]	@ (8003ed0 <TB6612_SetMotor+0xc4>)
 8003eb2:	2104      	movs	r1, #4
 8003eb4:	4806      	ldr	r0, [pc, #24]	@ (8003ed0 <TB6612_SetMotor+0xc4>)
 8003eb6:	f7ff ff57 	bl	8003d68 <__SetDir>
        break;
 8003eba:	e000      	b.n	8003ebe <TB6612_SetMotor+0xb2>

    default:
        break;
 8003ebc:	bf00      	nop
    }
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000928 	.word	0x20000928
 8003ecc:	40010800 	.word	0x40010800
 8003ed0:	40010c00 	.word	0x40010c00

08003ed4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b096      	sub	sp, #88	@ 0x58
 8003ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eda:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	605a      	str	r2, [r3, #4]
 8003ee4:	609a      	str	r2, [r3, #8]
 8003ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ee8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	605a      	str	r2, [r3, #4]
 8003efc:	609a      	str	r2, [r3, #8]
 8003efe:	60da      	str	r2, [r3, #12]
 8003f00:	611a      	str	r2, [r3, #16]
 8003f02:	615a      	str	r2, [r3, #20]
 8003f04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f06:	1d3b      	adds	r3, r7, #4
 8003f08:	2220      	movs	r2, #32
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f007 fc29 	bl	800b764 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f12:	4b50      	ldr	r3, [pc, #320]	@ (8004054 <MX_TIM1_Init+0x180>)
 8003f14:	4a50      	ldr	r2, [pc, #320]	@ (8004058 <MX_TIM1_Init+0x184>)
 8003f16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8003f18:	4b4e      	ldr	r3, [pc, #312]	@ (8004054 <MX_TIM1_Init+0x180>)
 8003f1a:	2247      	movs	r2, #71	@ 0x47
 8003f1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f1e:	4b4d      	ldr	r3, [pc, #308]	@ (8004054 <MX_TIM1_Init+0x180>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500-1;
 8003f24:	4b4b      	ldr	r3, [pc, #300]	@ (8004054 <MX_TIM1_Init+0x180>)
 8003f26:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8003f2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f2c:	4b49      	ldr	r3, [pc, #292]	@ (8004054 <MX_TIM1_Init+0x180>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f32:	4b48      	ldr	r3, [pc, #288]	@ (8004054 <MX_TIM1_Init+0x180>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f38:	4b46      	ldr	r3, [pc, #280]	@ (8004054 <MX_TIM1_Init+0x180>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f3e:	4845      	ldr	r0, [pc, #276]	@ (8004054 <MX_TIM1_Init+0x180>)
 8003f40:	f003 ff46 	bl	8007dd0 <HAL_TIM_Base_Init>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003f4a:	f7fe fe30 	bl	8002bae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f52:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f54:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003f58:	4619      	mov	r1, r3
 8003f5a:	483e      	ldr	r0, [pc, #248]	@ (8004054 <MX_TIM1_Init+0x180>)
 8003f5c:	f004 fa86 	bl	800846c <HAL_TIM_ConfigClockSource>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003f66:	f7fe fe22 	bl	8002bae <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003f6a:	483a      	ldr	r0, [pc, #232]	@ (8004054 <MX_TIM1_Init+0x180>)
 8003f6c:	f003 ffd2 	bl	8007f14 <HAL_TIM_PWM_Init>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003f76:	f7fe fe1a 	bl	8002bae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f82:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003f86:	4619      	mov	r1, r3
 8003f88:	4832      	ldr	r0, [pc, #200]	@ (8004054 <MX_TIM1_Init+0x180>)
 8003f8a:	f004 fe0b 	bl	8008ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003f94:	f7fe fe0b 	bl	8002bae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f98:	2360      	movs	r3, #96	@ 0x60
 8003f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003fac:	2300      	movs	r3, #0
 8003fae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fb8:	2200      	movs	r2, #0
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4825      	ldr	r0, [pc, #148]	@ (8004054 <MX_TIM1_Init+0x180>)
 8003fbe:	f004 f993 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003fc8:	f7fe fdf1 	bl	8002bae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003fcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	481f      	ldr	r0, [pc, #124]	@ (8004054 <MX_TIM1_Init+0x180>)
 8003fd6:	f004 f987 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003fe0:	f7fe fde5 	bl	8002bae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003fe4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fe8:	2208      	movs	r2, #8
 8003fea:	4619      	mov	r1, r3
 8003fec:	4819      	ldr	r0, [pc, #100]	@ (8004054 <MX_TIM1_Init+0x180>)
 8003fee:	f004 f97b 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003ff8:	f7fe fdd9 	bl	8002bae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003ffc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004000:	220c      	movs	r2, #12
 8004002:	4619      	mov	r1, r3
 8004004:	4813      	ldr	r0, [pc, #76]	@ (8004054 <MX_TIM1_Init+0x180>)
 8004006:	f004 f96f 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8004010:	f7fe fdcd 	bl	8002bae <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004014:	2300      	movs	r3, #0
 8004016:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004018:	2300      	movs	r3, #0
 800401a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800401c:	2300      	movs	r3, #0
 800401e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004028:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800402c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800402e:	2300      	movs	r3, #0
 8004030:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	4619      	mov	r1, r3
 8004036:	4807      	ldr	r0, [pc, #28]	@ (8004054 <MX_TIM1_Init+0x180>)
 8004038:	f004 fe12 	bl	8008c60 <HAL_TIMEx_ConfigBreakDeadTime>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8004042:	f7fe fdb4 	bl	8002bae <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004046:	4803      	ldr	r0, [pc, #12]	@ (8004054 <MX_TIM1_Init+0x180>)
 8004048:	f000 f890 	bl	800416c <HAL_TIM_MspPostInit>

}
 800404c:	bf00      	nop
 800404e:	3758      	adds	r7, #88	@ 0x58
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	20000928 	.word	0x20000928
 8004058:	40012c00 	.word	0x40012c00

0800405c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004062:	f107 0308 	add.w	r3, r7, #8
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	609a      	str	r2, [r3, #8]
 800406e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004070:	463b      	mov	r3, r7
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004078:	4b1d      	ldr	r3, [pc, #116]	@ (80040f0 <MX_TIM3_Init+0x94>)
 800407a:	4a1e      	ldr	r2, [pc, #120]	@ (80040f4 <MX_TIM3_Init+0x98>)
 800407c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 800407e:	4b1c      	ldr	r3, [pc, #112]	@ (80040f0 <MX_TIM3_Init+0x94>)
 8004080:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8004084:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004086:	4b1a      	ldr	r3, [pc, #104]	@ (80040f0 <MX_TIM3_Init+0x94>)
 8004088:	2200      	movs	r2, #0
 800408a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 80-1;
 800408c:	4b18      	ldr	r3, [pc, #96]	@ (80040f0 <MX_TIM3_Init+0x94>)
 800408e:	224f      	movs	r2, #79	@ 0x4f
 8004090:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004092:	4b17      	ldr	r3, [pc, #92]	@ (80040f0 <MX_TIM3_Init+0x94>)
 8004094:	2200      	movs	r2, #0
 8004096:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004098:	4b15      	ldr	r3, [pc, #84]	@ (80040f0 <MX_TIM3_Init+0x94>)
 800409a:	2200      	movs	r2, #0
 800409c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800409e:	4814      	ldr	r0, [pc, #80]	@ (80040f0 <MX_TIM3_Init+0x94>)
 80040a0:	f003 fe96 	bl	8007dd0 <HAL_TIM_Base_Init>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80040aa:	f7fe fd80 	bl	8002bae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040b4:	f107 0308 	add.w	r3, r7, #8
 80040b8:	4619      	mov	r1, r3
 80040ba:	480d      	ldr	r0, [pc, #52]	@ (80040f0 <MX_TIM3_Init+0x94>)
 80040bc:	f004 f9d6 	bl	800846c <HAL_TIM_ConfigClockSource>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80040c6:	f7fe fd72 	bl	8002bae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040ca:	2300      	movs	r3, #0
 80040cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040ce:	2300      	movs	r3, #0
 80040d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040d2:	463b      	mov	r3, r7
 80040d4:	4619      	mov	r1, r3
 80040d6:	4806      	ldr	r0, [pc, #24]	@ (80040f0 <MX_TIM3_Init+0x94>)
 80040d8:	f004 fd64 	bl	8008ba4 <HAL_TIMEx_MasterConfigSynchronization>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80040e2:	f7fe fd64 	bl	8002bae <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80040e6:	bf00      	nop
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000970 	.word	0x20000970
 80040f4:	40000400 	.word	0x40000400

080040f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a16      	ldr	r2, [pc, #88]	@ (8004160 <HAL_TIM_Base_MspInit+0x68>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d10c      	bne.n	8004124 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800410a:	4b16      	ldr	r3, [pc, #88]	@ (8004164 <HAL_TIM_Base_MspInit+0x6c>)
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	4a15      	ldr	r2, [pc, #84]	@ (8004164 <HAL_TIM_Base_MspInit+0x6c>)
 8004110:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004114:	6193      	str	r3, [r2, #24]
 8004116:	4b13      	ldr	r3, [pc, #76]	@ (8004164 <HAL_TIM_Base_MspInit+0x6c>)
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004122:	e018      	b.n	8004156 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a0f      	ldr	r2, [pc, #60]	@ (8004168 <HAL_TIM_Base_MspInit+0x70>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d113      	bne.n	8004156 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800412e:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <HAL_TIM_Base_MspInit+0x6c>)
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	4a0c      	ldr	r2, [pc, #48]	@ (8004164 <HAL_TIM_Base_MspInit+0x6c>)
 8004134:	f043 0302 	orr.w	r3, r3, #2
 8004138:	61d3      	str	r3, [r2, #28]
 800413a:	4b0a      	ldr	r3, [pc, #40]	@ (8004164 <HAL_TIM_Base_MspInit+0x6c>)
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	60bb      	str	r3, [r7, #8]
 8004144:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004146:	2200      	movs	r2, #0
 8004148:	2100      	movs	r1, #0
 800414a:	201d      	movs	r0, #29
 800414c:	f000 fe69 	bl	8004e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004150:	201d      	movs	r0, #29
 8004152:	f000 fe82 	bl	8004e5a <HAL_NVIC_EnableIRQ>
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40012c00 	.word	0x40012c00
 8004164:	40021000 	.word	0x40021000
 8004168:	40000400 	.word	0x40000400

0800416c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004174:	f107 0310 	add.w	r3, r7, #16
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	605a      	str	r2, [r3, #4]
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a10      	ldr	r2, [pc, #64]	@ (80041c8 <HAL_TIM_MspPostInit+0x5c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d118      	bne.n	80041be <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800418c:	4b0f      	ldr	r3, [pc, #60]	@ (80041cc <HAL_TIM_MspPostInit+0x60>)
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	4a0e      	ldr	r2, [pc, #56]	@ (80041cc <HAL_TIM_MspPostInit+0x60>)
 8004192:	f043 0304 	orr.w	r3, r3, #4
 8004196:	6193      	str	r3, [r2, #24]
 8004198:	4b0c      	ldr	r3, [pc, #48]	@ (80041cc <HAL_TIM_MspPostInit+0x60>)
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80041a4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80041a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041aa:	2302      	movs	r3, #2
 80041ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ae:	2302      	movs	r3, #2
 80041b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b2:	f107 0310 	add.w	r3, r7, #16
 80041b6:	4619      	mov	r1, r3
 80041b8:	4805      	ldr	r0, [pc, #20]	@ (80041d0 <HAL_TIM_MspPostInit+0x64>)
 80041ba:	f001 f967 	bl	800548c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80041be:	bf00      	nop
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40010800 	.word	0x40010800

080041d4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80041d8:	4b11      	ldr	r3, [pc, #68]	@ (8004220 <MX_USART2_UART_Init+0x4c>)
 80041da:	4a12      	ldr	r2, [pc, #72]	@ (8004224 <MX_USART2_UART_Init+0x50>)
 80041dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80041de:	4b10      	ldr	r3, [pc, #64]	@ (8004220 <MX_USART2_UART_Init+0x4c>)
 80041e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80041e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80041e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004220 <MX_USART2_UART_Init+0x4c>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80041ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004220 <MX_USART2_UART_Init+0x4c>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80041f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <MX_USART2_UART_Init+0x4c>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80041f8:	4b09      	ldr	r3, [pc, #36]	@ (8004220 <MX_USART2_UART_Init+0x4c>)
 80041fa:	220c      	movs	r2, #12
 80041fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041fe:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <MX_USART2_UART_Init+0x4c>)
 8004200:	2200      	movs	r2, #0
 8004202:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004204:	4b06      	ldr	r3, [pc, #24]	@ (8004220 <MX_USART2_UART_Init+0x4c>)
 8004206:	2200      	movs	r2, #0
 8004208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800420a:	4805      	ldr	r0, [pc, #20]	@ (8004220 <MX_USART2_UART_Init+0x4c>)
 800420c:	f004 fd8b 	bl	8008d26 <HAL_UART_Init>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004216:	f7fe fcca 	bl	8002bae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	200009b8 	.word	0x200009b8
 8004224:	40004400 	.word	0x40004400

08004228 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004230:	f107 0310 	add.w	r3, r7, #16
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	605a      	str	r2, [r3, #4]
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a32      	ldr	r2, [pc, #200]	@ (800430c <HAL_UART_MspInit+0xe4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d15d      	bne.n	8004304 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004248:	4b31      	ldr	r3, [pc, #196]	@ (8004310 <HAL_UART_MspInit+0xe8>)
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	4a30      	ldr	r2, [pc, #192]	@ (8004310 <HAL_UART_MspInit+0xe8>)
 800424e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004252:	61d3      	str	r3, [r2, #28]
 8004254:	4b2e      	ldr	r3, [pc, #184]	@ (8004310 <HAL_UART_MspInit+0xe8>)
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004260:	4b2b      	ldr	r3, [pc, #172]	@ (8004310 <HAL_UART_MspInit+0xe8>)
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	4a2a      	ldr	r2, [pc, #168]	@ (8004310 <HAL_UART_MspInit+0xe8>)
 8004266:	f043 0304 	orr.w	r3, r3, #4
 800426a:	6193      	str	r3, [r2, #24]
 800426c:	4b28      	ldr	r3, [pc, #160]	@ (8004310 <HAL_UART_MspInit+0xe8>)
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004278:	2304      	movs	r3, #4
 800427a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427c:	2302      	movs	r3, #2
 800427e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004280:	2303      	movs	r3, #3
 8004282:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004284:	f107 0310 	add.w	r3, r7, #16
 8004288:	4619      	mov	r1, r3
 800428a:	4822      	ldr	r0, [pc, #136]	@ (8004314 <HAL_UART_MspInit+0xec>)
 800428c:	f001 f8fe 	bl	800548c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004290:	2308      	movs	r3, #8
 8004292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004298:	2300      	movs	r3, #0
 800429a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800429c:	f107 0310 	add.w	r3, r7, #16
 80042a0:	4619      	mov	r1, r3
 80042a2:	481c      	ldr	r0, [pc, #112]	@ (8004314 <HAL_UART_MspInit+0xec>)
 80042a4:	f001 f8f2 	bl	800548c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80042a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004318 <HAL_UART_MspInit+0xf0>)
 80042aa:	4a1c      	ldr	r2, [pc, #112]	@ (800431c <HAL_UART_MspInit+0xf4>)
 80042ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004318 <HAL_UART_MspInit+0xf0>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042b4:	4b18      	ldr	r3, [pc, #96]	@ (8004318 <HAL_UART_MspInit+0xf0>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042ba:	4b17      	ldr	r3, [pc, #92]	@ (8004318 <HAL_UART_MspInit+0xf0>)
 80042bc:	2280      	movs	r2, #128	@ 0x80
 80042be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042c0:	4b15      	ldr	r3, [pc, #84]	@ (8004318 <HAL_UART_MspInit+0xf0>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042c6:	4b14      	ldr	r3, [pc, #80]	@ (8004318 <HAL_UART_MspInit+0xf0>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80042cc:	4b12      	ldr	r3, [pc, #72]	@ (8004318 <HAL_UART_MspInit+0xf0>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80042d2:	4b11      	ldr	r3, [pc, #68]	@ (8004318 <HAL_UART_MspInit+0xf0>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80042d8:	480f      	ldr	r0, [pc, #60]	@ (8004318 <HAL_UART_MspInit+0xf0>)
 80042da:	f000 fdd9 	bl	8004e90 <HAL_DMA_Init>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80042e4:	f7fe fc63 	bl	8002bae <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a0b      	ldr	r2, [pc, #44]	@ (8004318 <HAL_UART_MspInit+0xf0>)
 80042ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80042ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004318 <HAL_UART_MspInit+0xf0>)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80042f4:	2200      	movs	r2, #0
 80042f6:	2100      	movs	r1, #0
 80042f8:	2026      	movs	r0, #38	@ 0x26
 80042fa:	f000 fd92 	bl	8004e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80042fe:	2026      	movs	r0, #38	@ 0x26
 8004300:	f000 fdab 	bl	8004e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004304:	bf00      	nop
 8004306:	3720      	adds	r7, #32
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40004400 	.word	0x40004400
 8004310:	40021000 	.word	0x40021000
 8004314:	40010800 	.word	0x40010800
 8004318:	20000a00 	.word	0x20000a00
 800431c:	4002006c 	.word	0x4002006c

08004320 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004320:	f7ff fc46 	bl	8003bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004324:	480b      	ldr	r0, [pc, #44]	@ (8004354 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004326:	490c      	ldr	r1, [pc, #48]	@ (8004358 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004328:	4a0c      	ldr	r2, [pc, #48]	@ (800435c <LoopFillZerobss+0x16>)
  movs r3, #0
 800432a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800432c:	e002      	b.n	8004334 <LoopCopyDataInit>

0800432e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800432e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004332:	3304      	adds	r3, #4

08004334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004338:	d3f9      	bcc.n	800432e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800433a:	4a09      	ldr	r2, [pc, #36]	@ (8004360 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800433c:	4c09      	ldr	r4, [pc, #36]	@ (8004364 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800433e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004340:	e001      	b.n	8004346 <LoopFillZerobss>

08004342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004344:	3204      	adds	r2, #4

08004346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004348:	d3fb      	bcc.n	8004342 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800434a:	f007 fa2b 	bl	800b7a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800434e:	f7fe fa1f 	bl	8002790 <main>
  bx lr
 8004352:	4770      	bx	lr
  ldr r0, =_sdata
 8004354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004358:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800435c:	0800f0d8 	.word	0x0800f0d8
  ldr r2, =_sbss
 8004360:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004364:	20000b94 	.word	0x20000b94

08004368 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004368:	e7fe      	b.n	8004368 <CAN1_RX1_IRQHandler>
	...

0800436c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004370:	4b08      	ldr	r3, [pc, #32]	@ (8004394 <HAL_Init+0x28>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a07      	ldr	r2, [pc, #28]	@ (8004394 <HAL_Init+0x28>)
 8004376:	f043 0310 	orr.w	r3, r3, #16
 800437a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800437c:	2003      	movs	r0, #3
 800437e:	f000 fd45 	bl	8004e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004382:	200f      	movs	r0, #15
 8004384:	f000 f808 	bl	8004398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004388:	f7ff fab6 	bl	80038f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40022000 	.word	0x40022000

08004398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043a0:	4b12      	ldr	r3, [pc, #72]	@ (80043ec <HAL_InitTick+0x54>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	4b12      	ldr	r3, [pc, #72]	@ (80043f0 <HAL_InitTick+0x58>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	4619      	mov	r1, r3
 80043aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80043b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fd5d 	bl	8004e76 <HAL_SYSTICK_Config>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e00e      	b.n	80043e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b0f      	cmp	r3, #15
 80043ca:	d80a      	bhi.n	80043e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043cc:	2200      	movs	r2, #0
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043d4:	f000 fd25 	bl	8004e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043d8:	4a06      	ldr	r2, [pc, #24]	@ (80043f4 <HAL_InitTick+0x5c>)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	e000      	b.n	80043e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000000 	.word	0x20000000
 80043f0:	20000008 	.word	0x20000008
 80043f4:	20000004 	.word	0x20000004

080043f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043fc:	4b05      	ldr	r3, [pc, #20]	@ (8004414 <HAL_IncTick+0x1c>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	4b05      	ldr	r3, [pc, #20]	@ (8004418 <HAL_IncTick+0x20>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4413      	add	r3, r2
 8004408:	4a03      	ldr	r2, [pc, #12]	@ (8004418 <HAL_IncTick+0x20>)
 800440a:	6013      	str	r3, [r2, #0]
}
 800440c:	bf00      	nop
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr
 8004414:	20000008 	.word	0x20000008
 8004418:	20000a44 	.word	0x20000a44

0800441c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return uwTick;
 8004420:	4b02      	ldr	r3, [pc, #8]	@ (800442c <HAL_GetTick+0x10>)
 8004422:	681b      	ldr	r3, [r3, #0]
}
 8004424:	4618      	mov	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr
 800442c:	20000a44 	.word	0x20000a44

08004430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004438:	f7ff fff0 	bl	800441c <HAL_GetTick>
 800443c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004448:	d005      	beq.n	8004456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800444a:	4b0a      	ldr	r3, [pc, #40]	@ (8004474 <HAL_Delay+0x44>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4413      	add	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004456:	bf00      	nop
 8004458:	f7ff ffe0 	bl	800441c <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	429a      	cmp	r2, r3
 8004466:	d8f7      	bhi.n	8004458 <HAL_Delay+0x28>
  {
  }
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000008 	.word	0x20000008

08004478 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e0be      	b.n	8004618 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d109      	bne.n	80044bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fd f86e 	bl	8001598 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 fb8f 	bl	8004be0 <ADC_ConversionStop_Disable>
 80044c2:	4603      	mov	r3, r0
 80044c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f040 8099 	bne.w	8004606 <HAL_ADC_Init+0x18e>
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f040 8095 	bne.w	8004606 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80044e4:	f023 0302 	bic.w	r3, r3, #2
 80044e8:	f043 0202 	orr.w	r2, r3, #2
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80044f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	7b1b      	ldrb	r3, [r3, #12]
 80044fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004500:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	4313      	orrs	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004510:	d003      	beq.n	800451a <HAL_ADC_Init+0xa2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d102      	bne.n	8004520 <HAL_ADC_Init+0xa8>
 800451a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800451e:	e000      	b.n	8004522 <HAL_ADC_Init+0xaa>
 8004520:	2300      	movs	r3, #0
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	7d1b      	ldrb	r3, [r3, #20]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d119      	bne.n	8004564 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	7b1b      	ldrb	r3, [r3, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d109      	bne.n	800454c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	3b01      	subs	r3, #1
 800453e:	035a      	lsls	r2, r3, #13
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	e00b      	b.n	8004564 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004550:	f043 0220 	orr.w	r2, r3, #32
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455c:	f043 0201 	orr.w	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	430a      	orrs	r2, r1
 8004576:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	4b28      	ldr	r3, [pc, #160]	@ (8004620 <HAL_ADC_Init+0x1a8>)
 8004580:	4013      	ands	r3, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	68b9      	ldr	r1, [r7, #8]
 8004588:	430b      	orrs	r3, r1
 800458a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004594:	d003      	beq.n	800459e <HAL_ADC_Init+0x126>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d104      	bne.n	80045a8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	051b      	lsls	r3, r3, #20
 80045a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ae:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	4b18      	ldr	r3, [pc, #96]	@ (8004624 <HAL_ADC_Init+0x1ac>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d10b      	bne.n	80045e4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d6:	f023 0303 	bic.w	r3, r3, #3
 80045da:	f043 0201 	orr.w	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80045e2:	e018      	b.n	8004616 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e8:	f023 0312 	bic.w	r3, r3, #18
 80045ec:	f043 0210 	orr.w	r2, r3, #16
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f8:	f043 0201 	orr.w	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004604:	e007      	b.n	8004616 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460a:	f043 0210 	orr.w	r2, r3, #16
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004616:	7dfb      	ldrb	r3, [r7, #23]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	ffe1f7fd 	.word	0xffe1f7fd
 8004624:	ff1f0efe 	.word	0xff1f0efe

08004628 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800463e:	f7ff feed 	bl	800441c <HAL_GetTick>
 8004642:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00b      	beq.n	800466a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004656:	f043 0220 	orr.w	r2, r3, #32
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e0d3      	b.n	8004812 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d131      	bne.n	80046dc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004682:	2b00      	cmp	r3, #0
 8004684:	d12a      	bne.n	80046dc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004686:	e021      	b.n	80046cc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800468e:	d01d      	beq.n	80046cc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <HAL_ADC_PollForConversion+0x7e>
 8004696:	f7ff fec1 	bl	800441c <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d212      	bcs.n	80046cc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10b      	bne.n	80046cc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b8:	f043 0204 	orr.w	r2, r3, #4
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e0a2      	b.n	8004812 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0d6      	beq.n	8004688 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80046da:	e070      	b.n	80047be <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80046dc:	4b4f      	ldr	r3, [pc, #316]	@ (800481c <HAL_ADC_PollForConversion+0x1f4>)
 80046de:	681c      	ldr	r4, [r3, #0]
 80046e0:	2002      	movs	r0, #2
 80046e2:	f003 fabf 	bl	8007c64 <HAL_RCCEx_GetPeriphCLKFreq>
 80046e6:	4603      	mov	r3, r0
 80046e8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6919      	ldr	r1, [r3, #16]
 80046f2:	4b4b      	ldr	r3, [pc, #300]	@ (8004820 <HAL_ADC_PollForConversion+0x1f8>)
 80046f4:	400b      	ands	r3, r1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d118      	bne.n	800472c <HAL_ADC_PollForConversion+0x104>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68d9      	ldr	r1, [r3, #12]
 8004700:	4b48      	ldr	r3, [pc, #288]	@ (8004824 <HAL_ADC_PollForConversion+0x1fc>)
 8004702:	400b      	ands	r3, r1
 8004704:	2b00      	cmp	r3, #0
 8004706:	d111      	bne.n	800472c <HAL_ADC_PollForConversion+0x104>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6919      	ldr	r1, [r3, #16]
 800470e:	4b46      	ldr	r3, [pc, #280]	@ (8004828 <HAL_ADC_PollForConversion+0x200>)
 8004710:	400b      	ands	r3, r1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d108      	bne.n	8004728 <HAL_ADC_PollForConversion+0x100>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68d9      	ldr	r1, [r3, #12]
 800471c:	4b43      	ldr	r3, [pc, #268]	@ (800482c <HAL_ADC_PollForConversion+0x204>)
 800471e:	400b      	ands	r3, r1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_ADC_PollForConversion+0x100>
 8004724:	2314      	movs	r3, #20
 8004726:	e020      	b.n	800476a <HAL_ADC_PollForConversion+0x142>
 8004728:	2329      	movs	r3, #41	@ 0x29
 800472a:	e01e      	b.n	800476a <HAL_ADC_PollForConversion+0x142>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6919      	ldr	r1, [r3, #16]
 8004732:	4b3d      	ldr	r3, [pc, #244]	@ (8004828 <HAL_ADC_PollForConversion+0x200>)
 8004734:	400b      	ands	r3, r1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <HAL_ADC_PollForConversion+0x120>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68d9      	ldr	r1, [r3, #12]
 8004740:	4b3a      	ldr	r3, [pc, #232]	@ (800482c <HAL_ADC_PollForConversion+0x204>)
 8004742:	400b      	ands	r3, r1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <HAL_ADC_PollForConversion+0x13c>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6919      	ldr	r1, [r3, #16]
 800474e:	4b38      	ldr	r3, [pc, #224]	@ (8004830 <HAL_ADC_PollForConversion+0x208>)
 8004750:	400b      	ands	r3, r1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d108      	bne.n	8004768 <HAL_ADC_PollForConversion+0x140>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68d9      	ldr	r1, [r3, #12]
 800475c:	4b34      	ldr	r3, [pc, #208]	@ (8004830 <HAL_ADC_PollForConversion+0x208>)
 800475e:	400b      	ands	r3, r1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_ADC_PollForConversion+0x140>
 8004764:	2354      	movs	r3, #84	@ 0x54
 8004766:	e000      	b.n	800476a <HAL_ADC_PollForConversion+0x142>
 8004768:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004770:	e021      	b.n	80047b6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004778:	d01a      	beq.n	80047b0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <HAL_ADC_PollForConversion+0x168>
 8004780:	f7ff fe4c 	bl	800441c <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d20f      	bcs.n	80047b0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	429a      	cmp	r2, r3
 8004796:	d90b      	bls.n	80047b0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479c:	f043 0204 	orr.w	r2, r3, #4
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e030      	b.n	8004812 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3301      	adds	r3, #1
 80047b4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d8d9      	bhi.n	8004772 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f06f 0212 	mvn.w	r2, #18
 80047c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80047de:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80047e2:	d115      	bne.n	8004810 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d111      	bne.n	8004810 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d105      	bne.n	8004810 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004808:	f043 0201 	orr.w	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	bd90      	pop	{r4, r7, pc}
 800481a:	bf00      	nop
 800481c:	20000000 	.word	0x20000000
 8004820:	24924924 	.word	0x24924924
 8004824:	00924924 	.word	0x00924924
 8004828:	12492492 	.word	0x12492492
 800482c:	00492492 	.word	0x00492492
 8004830:	00249249 	.word	0x00249249

08004834 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d03e      	beq.n	80048ec <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d039      	beq.n	80048ec <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	d105      	bne.n	8004890 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004888:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800489a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800489e:	d11d      	bne.n	80048dc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d119      	bne.n	80048dc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0220 	bic.w	r2, r2, #32
 80048b6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d105      	bne.n	80048dc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	f043 0201 	orr.w	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f874 	bl	80049ca <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f06f 0212 	mvn.w	r2, #18
 80048ea:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d04d      	beq.n	8004992 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d048      	beq.n	8004992 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b00      	cmp	r3, #0
 800490a:	d105      	bne.n	8004918 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004910:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004922:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8004926:	d012      	beq.n	800494e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004932:	2b00      	cmp	r3, #0
 8004934:	d125      	bne.n	8004982 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004940:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004944:	d11d      	bne.n	8004982 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800494a:	2b00      	cmp	r3, #0
 800494c:	d119      	bne.n	8004982 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800495c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004962:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d105      	bne.n	8004982 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497a:	f043 0201 	orr.w	r2, r3, #1
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f96d 	bl	8004c62 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 020c 	mvn.w	r2, #12
 8004990:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d012      	beq.n	80049c2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049aa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f812 	bl	80049dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0201 	mvn.w	r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80049c2:	bf00      	nop
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr
	...

080049f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_ADC_ConfigChannel+0x20>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e0dc      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1da>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b06      	cmp	r3, #6
 8004a1e:	d81c      	bhi.n	8004a5a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	3b05      	subs	r3, #5
 8004a32:	221f      	movs	r2, #31
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	4019      	ands	r1, r3
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	3b05      	subs	r3, #5
 8004a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a58:	e03c      	b.n	8004ad4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b0c      	cmp	r3, #12
 8004a60:	d81c      	bhi.n	8004a9c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	3b23      	subs	r3, #35	@ 0x23
 8004a74:	221f      	movs	r2, #31
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	4019      	ands	r1, r3
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3b23      	subs	r3, #35	@ 0x23
 8004a8e:	fa00 f203 	lsl.w	r2, r0, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a9a:	e01b      	b.n	8004ad4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	3b41      	subs	r3, #65	@ 0x41
 8004aae:	221f      	movs	r2, #31
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	4019      	ands	r1, r3
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	3b41      	subs	r3, #65	@ 0x41
 8004ac8:	fa00 f203 	lsl.w	r2, r0, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b09      	cmp	r3, #9
 8004ada:	d91c      	bls.n	8004b16 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68d9      	ldr	r1, [r3, #12]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	4413      	add	r3, r2
 8004aec:	3b1e      	subs	r3, #30
 8004aee:	2207      	movs	r2, #7
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	4019      	ands	r1, r3
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	6898      	ldr	r0, [r3, #8]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4613      	mov	r3, r2
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	4413      	add	r3, r2
 8004b06:	3b1e      	subs	r3, #30
 8004b08:	fa00 f203 	lsl.w	r2, r0, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	60da      	str	r2, [r3, #12]
 8004b14:	e019      	b.n	8004b4a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6919      	ldr	r1, [r3, #16]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	4413      	add	r3, r2
 8004b26:	2207      	movs	r2, #7
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	4019      	ands	r1, r3
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	6898      	ldr	r0, [r3, #8]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	4413      	add	r3, r2
 8004b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b10      	cmp	r3, #16
 8004b50:	d003      	beq.n	8004b5a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004b56:	2b11      	cmp	r3, #17
 8004b58:	d132      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d125      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d126      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004b80:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b10      	cmp	r3, #16
 8004b88:	d11a      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b8a:	4b13      	ldr	r3, [pc, #76]	@ (8004bd8 <HAL_ADC_ConfigChannel+0x1e8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a13      	ldr	r2, [pc, #76]	@ (8004bdc <HAL_ADC_ConfigChannel+0x1ec>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	0c9a      	lsrs	r2, r3, #18
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004ba0:	e002      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f9      	bne.n	8004ba2 <HAL_ADC_ConfigChannel+0x1b2>
 8004bae:	e007      	b.n	8004bc0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	f043 0220 	orr.w	r2, r3, #32
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr
 8004bd4:	40012400 	.word	0x40012400
 8004bd8:	20000000 	.word	0x20000000
 8004bdc:	431bde83 	.word	0x431bde83

08004be0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d12e      	bne.n	8004c58 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c0a:	f7ff fc07 	bl	800441c <HAL_GetTick>
 8004c0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004c10:	e01b      	b.n	8004c4a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c12:	f7ff fc03 	bl	800441c <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d914      	bls.n	8004c4a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d10d      	bne.n	8004c4a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c32:	f043 0210 	orr.w	r2, r3, #16
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	f043 0201 	orr.w	r2, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e007      	b.n	8004c5a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d0dc      	beq.n	8004c12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c84:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c90:	4013      	ands	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ca6:	4a04      	ldr	r2, [pc, #16]	@ (8004cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	60d3      	str	r3, [r2, #12]
}
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	e000ed00 	.word	0xe000ed00

08004cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cc0:	4b04      	ldr	r3, [pc, #16]	@ (8004cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	f003 0307 	and.w	r3, r3, #7
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	e000ed00 	.word	0xe000ed00

08004cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	db0b      	blt.n	8004d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cea:	79fb      	ldrb	r3, [r7, #7]
 8004cec:	f003 021f 	and.w	r2, r3, #31
 8004cf0:	4906      	ldr	r1, [pc, #24]	@ (8004d0c <__NVIC_EnableIRQ+0x34>)
 8004cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8004cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bc80      	pop	{r7}
 8004d0a:	4770      	bx	lr
 8004d0c:	e000e100 	.word	0xe000e100

08004d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	6039      	str	r1, [r7, #0]
 8004d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	db0a      	blt.n	8004d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	490c      	ldr	r1, [pc, #48]	@ (8004d5c <__NVIC_SetPriority+0x4c>)
 8004d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2e:	0112      	lsls	r2, r2, #4
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	440b      	add	r3, r1
 8004d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d38:	e00a      	b.n	8004d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	4908      	ldr	r1, [pc, #32]	@ (8004d60 <__NVIC_SetPriority+0x50>)
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	3b04      	subs	r3, #4
 8004d48:	0112      	lsls	r2, r2, #4
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	761a      	strb	r2, [r3, #24]
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	e000e100 	.word	0xe000e100
 8004d60:	e000ed00 	.word	0xe000ed00

08004d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b089      	sub	sp, #36	@ 0x24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f1c3 0307 	rsb	r3, r3, #7
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	bf28      	it	cs
 8004d82:	2304      	movcs	r3, #4
 8004d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	2b06      	cmp	r3, #6
 8004d8c:	d902      	bls.n	8004d94 <NVIC_EncodePriority+0x30>
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	3b03      	subs	r3, #3
 8004d92:	e000      	b.n	8004d96 <NVIC_EncodePriority+0x32>
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	43da      	mvns	r2, r3
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	401a      	ands	r2, r3
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	fa01 f303 	lsl.w	r3, r1, r3
 8004db6:	43d9      	mvns	r1, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dbc:	4313      	orrs	r3, r2
         );
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3724      	adds	r7, #36	@ 0x24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004dd8:	d301      	bcc.n	8004dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e00f      	b.n	8004dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dde:	4a0a      	ldr	r2, [pc, #40]	@ (8004e08 <SysTick_Config+0x40>)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004de6:	210f      	movs	r1, #15
 8004de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004dec:	f7ff ff90 	bl	8004d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004df0:	4b05      	ldr	r3, [pc, #20]	@ (8004e08 <SysTick_Config+0x40>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004df6:	4b04      	ldr	r3, [pc, #16]	@ (8004e08 <SysTick_Config+0x40>)
 8004df8:	2207      	movs	r2, #7
 8004dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	e000e010 	.word	0xe000e010

08004e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff ff2d 	bl	8004c74 <__NVIC_SetPriorityGrouping>
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b086      	sub	sp, #24
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	4603      	mov	r3, r0
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	607a      	str	r2, [r7, #4]
 8004e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e34:	f7ff ff42 	bl	8004cbc <__NVIC_GetPriorityGrouping>
 8004e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	6978      	ldr	r0, [r7, #20]
 8004e40:	f7ff ff90 	bl	8004d64 <NVIC_EncodePriority>
 8004e44:	4602      	mov	r2, r0
 8004e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff ff5f 	bl	8004d10 <__NVIC_SetPriority>
}
 8004e52:	bf00      	nop
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	4603      	mov	r3, r0
 8004e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff ff35 	bl	8004cd8 <__NVIC_EnableIRQ>
}
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b082      	sub	sp, #8
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff ffa2 	bl	8004dc8 <SysTick_Config>
 8004e84:	4603      	mov	r3, r0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e043      	b.n	8004f2e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	4b22      	ldr	r3, [pc, #136]	@ (8004f38 <HAL_DMA_Init+0xa8>)
 8004eae:	4413      	add	r3, r2
 8004eb0:	4a22      	ldr	r2, [pc, #136]	@ (8004f3c <HAL_DMA_Init+0xac>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	091b      	lsrs	r3, r3, #4
 8004eb8:	009a      	lsls	r2, r3, #2
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f40 <HAL_DMA_Init+0xb0>)
 8004ec2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004eda:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004ede:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr
 8004f38:	bffdfff8 	.word	0xbffdfff8
 8004f3c:	cccccccd 	.word	0xcccccccd
 8004f40:	40020000 	.word	0x40020000

08004f44 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e046      	b.n	8004fe4 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0201 	bic.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2200      	movs	r2, #0
 8004f74:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2200      	movs	r2, #0
 8004f84:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	4b18      	ldr	r3, [pc, #96]	@ (8004ff0 <HAL_DMA_DeInit+0xac>)
 8004f8e:	4413      	add	r3, r2
 8004f90:	4a18      	ldr	r2, [pc, #96]	@ (8004ff4 <HAL_DMA_DeInit+0xb0>)
 8004f92:	fba2 2303 	umull	r2, r3, r2, r3
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	009a      	lsls	r2, r3, #2
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a15      	ldr	r2, [pc, #84]	@ (8004ff8 <HAL_DMA_DeInit+0xb4>)
 8004fa2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fac:	2101      	movs	r1, #1
 8004fae:	fa01 f202 	lsl.w	r2, r1, r2
 8004fb2:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	bffdfff8 	.word	0xbffdfff8
 8004ff4:	cccccccd 	.word	0xcccccccd
 8004ff8:	40020000 	.word	0x40020000

08004ffc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_DMA_Start_IT+0x20>
 8005018:	2302      	movs	r3, #2
 800501a:	e04b      	b.n	80050b4 <HAL_DMA_Start_IT+0xb8>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b01      	cmp	r3, #1
 800502e:	d13a      	bne.n	80050a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0201 	bic.w	r2, r2, #1
 800504c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	68b9      	ldr	r1, [r7, #8]
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f9eb 	bl	8005430 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d008      	beq.n	8005074 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 020e 	orr.w	r2, r2, #14
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	e00f      	b.n	8005094 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0204 	bic.w	r2, r2, #4
 8005082:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 020a 	orr.w	r2, r2, #10
 8005092:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	e005      	b.n	80050b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80050ae:	2302      	movs	r3, #2
 80050b0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80050b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d008      	beq.n	80050e6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2204      	movs	r2, #4
 80050d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e020      	b.n	8005128 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 020e 	bic.w	r2, r2, #14
 80050f4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0201 	bic.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510e:	2101      	movs	r1, #1
 8005110:	fa01 f202 	lsl.w	r2, r1, r2
 8005114:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005126:	7bfb      	ldrb	r3, [r7, #15]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
	...

08005134 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d005      	beq.n	8005158 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2204      	movs	r2, #4
 8005150:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
 8005156:	e051      	b.n	80051fc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 020e 	bic.w	r2, r2, #14
 8005166:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a22      	ldr	r2, [pc, #136]	@ (8005208 <HAL_DMA_Abort_IT+0xd4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d029      	beq.n	80051d6 <HAL_DMA_Abort_IT+0xa2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a21      	ldr	r2, [pc, #132]	@ (800520c <HAL_DMA_Abort_IT+0xd8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d022      	beq.n	80051d2 <HAL_DMA_Abort_IT+0x9e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a1f      	ldr	r2, [pc, #124]	@ (8005210 <HAL_DMA_Abort_IT+0xdc>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d01a      	beq.n	80051cc <HAL_DMA_Abort_IT+0x98>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1e      	ldr	r2, [pc, #120]	@ (8005214 <HAL_DMA_Abort_IT+0xe0>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d012      	beq.n	80051c6 <HAL_DMA_Abort_IT+0x92>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005218 <HAL_DMA_Abort_IT+0xe4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00a      	beq.n	80051c0 <HAL_DMA_Abort_IT+0x8c>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1b      	ldr	r2, [pc, #108]	@ (800521c <HAL_DMA_Abort_IT+0xe8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d102      	bne.n	80051ba <HAL_DMA_Abort_IT+0x86>
 80051b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80051b8:	e00e      	b.n	80051d8 <HAL_DMA_Abort_IT+0xa4>
 80051ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051be:	e00b      	b.n	80051d8 <HAL_DMA_Abort_IT+0xa4>
 80051c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80051c4:	e008      	b.n	80051d8 <HAL_DMA_Abort_IT+0xa4>
 80051c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051ca:	e005      	b.n	80051d8 <HAL_DMA_Abort_IT+0xa4>
 80051cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051d0:	e002      	b.n	80051d8 <HAL_DMA_Abort_IT+0xa4>
 80051d2:	2310      	movs	r3, #16
 80051d4:	e000      	b.n	80051d8 <HAL_DMA_Abort_IT+0xa4>
 80051d6:	2301      	movs	r3, #1
 80051d8:	4a11      	ldr	r2, [pc, #68]	@ (8005220 <HAL_DMA_Abort_IT+0xec>)
 80051da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	4798      	blx	r3
    } 
  }
  return status;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40020008 	.word	0x40020008
 800520c:	4002001c 	.word	0x4002001c
 8005210:	40020030 	.word	0x40020030
 8005214:	40020044 	.word	0x40020044
 8005218:	40020058 	.word	0x40020058
 800521c:	4002006c 	.word	0x4002006c
 8005220:	40020000 	.word	0x40020000

08005224 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005240:	2204      	movs	r2, #4
 8005242:	409a      	lsls	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4013      	ands	r3, r2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d04f      	beq.n	80052ec <HAL_DMA_IRQHandler+0xc8>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	d04a      	beq.n	80052ec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0320 	and.w	r3, r3, #32
 8005260:	2b00      	cmp	r3, #0
 8005262:	d107      	bne.n	8005274 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0204 	bic.w	r2, r2, #4
 8005272:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a66      	ldr	r2, [pc, #408]	@ (8005414 <HAL_DMA_IRQHandler+0x1f0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d029      	beq.n	80052d2 <HAL_DMA_IRQHandler+0xae>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a65      	ldr	r2, [pc, #404]	@ (8005418 <HAL_DMA_IRQHandler+0x1f4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d022      	beq.n	80052ce <HAL_DMA_IRQHandler+0xaa>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a63      	ldr	r2, [pc, #396]	@ (800541c <HAL_DMA_IRQHandler+0x1f8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d01a      	beq.n	80052c8 <HAL_DMA_IRQHandler+0xa4>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a62      	ldr	r2, [pc, #392]	@ (8005420 <HAL_DMA_IRQHandler+0x1fc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d012      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x9e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a60      	ldr	r2, [pc, #384]	@ (8005424 <HAL_DMA_IRQHandler+0x200>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00a      	beq.n	80052bc <HAL_DMA_IRQHandler+0x98>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a5f      	ldr	r2, [pc, #380]	@ (8005428 <HAL_DMA_IRQHandler+0x204>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d102      	bne.n	80052b6 <HAL_DMA_IRQHandler+0x92>
 80052b0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80052b4:	e00e      	b.n	80052d4 <HAL_DMA_IRQHandler+0xb0>
 80052b6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80052ba:	e00b      	b.n	80052d4 <HAL_DMA_IRQHandler+0xb0>
 80052bc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80052c0:	e008      	b.n	80052d4 <HAL_DMA_IRQHandler+0xb0>
 80052c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80052c6:	e005      	b.n	80052d4 <HAL_DMA_IRQHandler+0xb0>
 80052c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052cc:	e002      	b.n	80052d4 <HAL_DMA_IRQHandler+0xb0>
 80052ce:	2340      	movs	r3, #64	@ 0x40
 80052d0:	e000      	b.n	80052d4 <HAL_DMA_IRQHandler+0xb0>
 80052d2:	2304      	movs	r3, #4
 80052d4:	4a55      	ldr	r2, [pc, #340]	@ (800542c <HAL_DMA_IRQHandler+0x208>)
 80052d6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 8094 	beq.w	800540a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80052ea:	e08e      	b.n	800540a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f0:	2202      	movs	r2, #2
 80052f2:	409a      	lsls	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d056      	beq.n	80053aa <HAL_DMA_IRQHandler+0x186>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d051      	beq.n	80053aa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10b      	bne.n	800532c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 020a 	bic.w	r2, r2, #10
 8005322:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a38      	ldr	r2, [pc, #224]	@ (8005414 <HAL_DMA_IRQHandler+0x1f0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d029      	beq.n	800538a <HAL_DMA_IRQHandler+0x166>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a37      	ldr	r2, [pc, #220]	@ (8005418 <HAL_DMA_IRQHandler+0x1f4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d022      	beq.n	8005386 <HAL_DMA_IRQHandler+0x162>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a35      	ldr	r2, [pc, #212]	@ (800541c <HAL_DMA_IRQHandler+0x1f8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d01a      	beq.n	8005380 <HAL_DMA_IRQHandler+0x15c>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a34      	ldr	r2, [pc, #208]	@ (8005420 <HAL_DMA_IRQHandler+0x1fc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d012      	beq.n	800537a <HAL_DMA_IRQHandler+0x156>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a32      	ldr	r2, [pc, #200]	@ (8005424 <HAL_DMA_IRQHandler+0x200>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00a      	beq.n	8005374 <HAL_DMA_IRQHandler+0x150>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a31      	ldr	r2, [pc, #196]	@ (8005428 <HAL_DMA_IRQHandler+0x204>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d102      	bne.n	800536e <HAL_DMA_IRQHandler+0x14a>
 8005368:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800536c:	e00e      	b.n	800538c <HAL_DMA_IRQHandler+0x168>
 800536e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005372:	e00b      	b.n	800538c <HAL_DMA_IRQHandler+0x168>
 8005374:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005378:	e008      	b.n	800538c <HAL_DMA_IRQHandler+0x168>
 800537a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800537e:	e005      	b.n	800538c <HAL_DMA_IRQHandler+0x168>
 8005380:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005384:	e002      	b.n	800538c <HAL_DMA_IRQHandler+0x168>
 8005386:	2320      	movs	r3, #32
 8005388:	e000      	b.n	800538c <HAL_DMA_IRQHandler+0x168>
 800538a:	2302      	movs	r3, #2
 800538c:	4a27      	ldr	r2, [pc, #156]	@ (800542c <HAL_DMA_IRQHandler+0x208>)
 800538e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539c:	2b00      	cmp	r3, #0
 800539e:	d034      	beq.n	800540a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80053a8:	e02f      	b.n	800540a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ae:	2208      	movs	r2, #8
 80053b0:	409a      	lsls	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d028      	beq.n	800540c <HAL_DMA_IRQHandler+0x1e8>
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d023      	beq.n	800540c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 020e 	bic.w	r2, r2, #14
 80053d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053dc:	2101      	movs	r1, #1
 80053de:	fa01 f202 	lsl.w	r2, r1, r2
 80053e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	4798      	blx	r3
    }
  }
  return;
 800540a:	bf00      	nop
 800540c:	bf00      	nop
}
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40020008 	.word	0x40020008
 8005418:	4002001c 	.word	0x4002001c
 800541c:	40020030 	.word	0x40020030
 8005420:	40020044 	.word	0x40020044
 8005424:	40020058 	.word	0x40020058
 8005428:	4002006c 	.word	0x4002006c
 800542c:	40020000 	.word	0x40020000

08005430 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005446:	2101      	movs	r1, #1
 8005448:	fa01 f202 	lsl.w	r2, r1, r2
 800544c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b10      	cmp	r3, #16
 800545c:	d108      	bne.n	8005470 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800546e:	e007      	b.n	8005480 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	60da      	str	r2, [r3, #12]
}
 8005480:	bf00      	nop
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr
	...

0800548c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800548c:	b480      	push	{r7}
 800548e:	b08b      	sub	sp, #44	@ 0x2c
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005496:	2300      	movs	r3, #0
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800549a:	2300      	movs	r3, #0
 800549c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800549e:	e169      	b.n	8005774 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80054a0:	2201      	movs	r2, #1
 80054a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69fa      	ldr	r2, [r7, #28]
 80054b0:	4013      	ands	r3, r2
 80054b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	f040 8158 	bne.w	800576e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	4a9a      	ldr	r2, [pc, #616]	@ (800572c <HAL_GPIO_Init+0x2a0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d05e      	beq.n	8005586 <HAL_GPIO_Init+0xfa>
 80054c8:	4a98      	ldr	r2, [pc, #608]	@ (800572c <HAL_GPIO_Init+0x2a0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d875      	bhi.n	80055ba <HAL_GPIO_Init+0x12e>
 80054ce:	4a98      	ldr	r2, [pc, #608]	@ (8005730 <HAL_GPIO_Init+0x2a4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d058      	beq.n	8005586 <HAL_GPIO_Init+0xfa>
 80054d4:	4a96      	ldr	r2, [pc, #600]	@ (8005730 <HAL_GPIO_Init+0x2a4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d86f      	bhi.n	80055ba <HAL_GPIO_Init+0x12e>
 80054da:	4a96      	ldr	r2, [pc, #600]	@ (8005734 <HAL_GPIO_Init+0x2a8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d052      	beq.n	8005586 <HAL_GPIO_Init+0xfa>
 80054e0:	4a94      	ldr	r2, [pc, #592]	@ (8005734 <HAL_GPIO_Init+0x2a8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d869      	bhi.n	80055ba <HAL_GPIO_Init+0x12e>
 80054e6:	4a94      	ldr	r2, [pc, #592]	@ (8005738 <HAL_GPIO_Init+0x2ac>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d04c      	beq.n	8005586 <HAL_GPIO_Init+0xfa>
 80054ec:	4a92      	ldr	r2, [pc, #584]	@ (8005738 <HAL_GPIO_Init+0x2ac>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d863      	bhi.n	80055ba <HAL_GPIO_Init+0x12e>
 80054f2:	4a92      	ldr	r2, [pc, #584]	@ (800573c <HAL_GPIO_Init+0x2b0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d046      	beq.n	8005586 <HAL_GPIO_Init+0xfa>
 80054f8:	4a90      	ldr	r2, [pc, #576]	@ (800573c <HAL_GPIO_Init+0x2b0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d85d      	bhi.n	80055ba <HAL_GPIO_Init+0x12e>
 80054fe:	2b12      	cmp	r3, #18
 8005500:	d82a      	bhi.n	8005558 <HAL_GPIO_Init+0xcc>
 8005502:	2b12      	cmp	r3, #18
 8005504:	d859      	bhi.n	80055ba <HAL_GPIO_Init+0x12e>
 8005506:	a201      	add	r2, pc, #4	@ (adr r2, 800550c <HAL_GPIO_Init+0x80>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005587 	.word	0x08005587
 8005510:	08005561 	.word	0x08005561
 8005514:	08005573 	.word	0x08005573
 8005518:	080055b5 	.word	0x080055b5
 800551c:	080055bb 	.word	0x080055bb
 8005520:	080055bb 	.word	0x080055bb
 8005524:	080055bb 	.word	0x080055bb
 8005528:	080055bb 	.word	0x080055bb
 800552c:	080055bb 	.word	0x080055bb
 8005530:	080055bb 	.word	0x080055bb
 8005534:	080055bb 	.word	0x080055bb
 8005538:	080055bb 	.word	0x080055bb
 800553c:	080055bb 	.word	0x080055bb
 8005540:	080055bb 	.word	0x080055bb
 8005544:	080055bb 	.word	0x080055bb
 8005548:	080055bb 	.word	0x080055bb
 800554c:	080055bb 	.word	0x080055bb
 8005550:	08005569 	.word	0x08005569
 8005554:	0800557d 	.word	0x0800557d
 8005558:	4a79      	ldr	r2, [pc, #484]	@ (8005740 <HAL_GPIO_Init+0x2b4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800555e:	e02c      	b.n	80055ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	623b      	str	r3, [r7, #32]
          break;
 8005566:	e029      	b.n	80055bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	3304      	adds	r3, #4
 800556e:	623b      	str	r3, [r7, #32]
          break;
 8005570:	e024      	b.n	80055bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	3308      	adds	r3, #8
 8005578:	623b      	str	r3, [r7, #32]
          break;
 800557a:	e01f      	b.n	80055bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	330c      	adds	r3, #12
 8005582:	623b      	str	r3, [r7, #32]
          break;
 8005584:	e01a      	b.n	80055bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800558e:	2304      	movs	r3, #4
 8005590:	623b      	str	r3, [r7, #32]
          break;
 8005592:	e013      	b.n	80055bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d105      	bne.n	80055a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800559c:	2308      	movs	r3, #8
 800559e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	611a      	str	r2, [r3, #16]
          break;
 80055a6:	e009      	b.n	80055bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80055a8:	2308      	movs	r3, #8
 80055aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	615a      	str	r2, [r3, #20]
          break;
 80055b2:	e003      	b.n	80055bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80055b4:	2300      	movs	r3, #0
 80055b6:	623b      	str	r3, [r7, #32]
          break;
 80055b8:	e000      	b.n	80055bc <HAL_GPIO_Init+0x130>
          break;
 80055ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2bff      	cmp	r3, #255	@ 0xff
 80055c0:	d801      	bhi.n	80055c6 <HAL_GPIO_Init+0x13a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	e001      	b.n	80055ca <HAL_GPIO_Init+0x13e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3304      	adds	r3, #4
 80055ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2bff      	cmp	r3, #255	@ 0xff
 80055d0:	d802      	bhi.n	80055d8 <HAL_GPIO_Init+0x14c>
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	e002      	b.n	80055de <HAL_GPIO_Init+0x152>
 80055d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055da:	3b08      	subs	r3, #8
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	210f      	movs	r1, #15
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	fa01 f303 	lsl.w	r3, r1, r3
 80055ec:	43db      	mvns	r3, r3
 80055ee:	401a      	ands	r2, r3
 80055f0:	6a39      	ldr	r1, [r7, #32]
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	fa01 f303 	lsl.w	r3, r1, r3
 80055f8:	431a      	orrs	r2, r3
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 80b1 	beq.w	800576e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800560c:	4b4d      	ldr	r3, [pc, #308]	@ (8005744 <HAL_GPIO_Init+0x2b8>)
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	4a4c      	ldr	r2, [pc, #304]	@ (8005744 <HAL_GPIO_Init+0x2b8>)
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	6193      	str	r3, [r2, #24]
 8005618:	4b4a      	ldr	r3, [pc, #296]	@ (8005744 <HAL_GPIO_Init+0x2b8>)
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005624:	4a48      	ldr	r2, [pc, #288]	@ (8005748 <HAL_GPIO_Init+0x2bc>)
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	089b      	lsrs	r3, r3, #2
 800562a:	3302      	adds	r3, #2
 800562c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005630:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	220f      	movs	r2, #15
 800563c:	fa02 f303 	lsl.w	r3, r2, r3
 8005640:	43db      	mvns	r3, r3
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4013      	ands	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a40      	ldr	r2, [pc, #256]	@ (800574c <HAL_GPIO_Init+0x2c0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d013      	beq.n	8005678 <HAL_GPIO_Init+0x1ec>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a3f      	ldr	r2, [pc, #252]	@ (8005750 <HAL_GPIO_Init+0x2c4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00d      	beq.n	8005674 <HAL_GPIO_Init+0x1e8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a3e      	ldr	r2, [pc, #248]	@ (8005754 <HAL_GPIO_Init+0x2c8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d007      	beq.n	8005670 <HAL_GPIO_Init+0x1e4>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a3d      	ldr	r2, [pc, #244]	@ (8005758 <HAL_GPIO_Init+0x2cc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d101      	bne.n	800566c <HAL_GPIO_Init+0x1e0>
 8005668:	2303      	movs	r3, #3
 800566a:	e006      	b.n	800567a <HAL_GPIO_Init+0x1ee>
 800566c:	2304      	movs	r3, #4
 800566e:	e004      	b.n	800567a <HAL_GPIO_Init+0x1ee>
 8005670:	2302      	movs	r3, #2
 8005672:	e002      	b.n	800567a <HAL_GPIO_Init+0x1ee>
 8005674:	2301      	movs	r3, #1
 8005676:	e000      	b.n	800567a <HAL_GPIO_Init+0x1ee>
 8005678:	2300      	movs	r3, #0
 800567a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800567c:	f002 0203 	and.w	r2, r2, #3
 8005680:	0092      	lsls	r2, r2, #2
 8005682:	4093      	lsls	r3, r2
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800568a:	492f      	ldr	r1, [pc, #188]	@ (8005748 <HAL_GPIO_Init+0x2bc>)
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	089b      	lsrs	r3, r3, #2
 8005690:	3302      	adds	r3, #2
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d006      	beq.n	80056b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80056a4:	4b2d      	ldr	r3, [pc, #180]	@ (800575c <HAL_GPIO_Init+0x2d0>)
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	492c      	ldr	r1, [pc, #176]	@ (800575c <HAL_GPIO_Init+0x2d0>)
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	608b      	str	r3, [r1, #8]
 80056b0:	e006      	b.n	80056c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80056b2:	4b2a      	ldr	r3, [pc, #168]	@ (800575c <HAL_GPIO_Init+0x2d0>)
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	43db      	mvns	r3, r3
 80056ba:	4928      	ldr	r1, [pc, #160]	@ (800575c <HAL_GPIO_Init+0x2d0>)
 80056bc:	4013      	ands	r3, r2
 80056be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d006      	beq.n	80056da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80056cc:	4b23      	ldr	r3, [pc, #140]	@ (800575c <HAL_GPIO_Init+0x2d0>)
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	4922      	ldr	r1, [pc, #136]	@ (800575c <HAL_GPIO_Init+0x2d0>)
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60cb      	str	r3, [r1, #12]
 80056d8:	e006      	b.n	80056e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80056da:	4b20      	ldr	r3, [pc, #128]	@ (800575c <HAL_GPIO_Init+0x2d0>)
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	43db      	mvns	r3, r3
 80056e2:	491e      	ldr	r1, [pc, #120]	@ (800575c <HAL_GPIO_Init+0x2d0>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d006      	beq.n	8005702 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80056f4:	4b19      	ldr	r3, [pc, #100]	@ (800575c <HAL_GPIO_Init+0x2d0>)
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	4918      	ldr	r1, [pc, #96]	@ (800575c <HAL_GPIO_Init+0x2d0>)
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	604b      	str	r3, [r1, #4]
 8005700:	e006      	b.n	8005710 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005702:	4b16      	ldr	r3, [pc, #88]	@ (800575c <HAL_GPIO_Init+0x2d0>)
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	43db      	mvns	r3, r3
 800570a:	4914      	ldr	r1, [pc, #80]	@ (800575c <HAL_GPIO_Init+0x2d0>)
 800570c:	4013      	ands	r3, r2
 800570e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d021      	beq.n	8005760 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800571c:	4b0f      	ldr	r3, [pc, #60]	@ (800575c <HAL_GPIO_Init+0x2d0>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	490e      	ldr	r1, [pc, #56]	@ (800575c <HAL_GPIO_Init+0x2d0>)
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	4313      	orrs	r3, r2
 8005726:	600b      	str	r3, [r1, #0]
 8005728:	e021      	b.n	800576e <HAL_GPIO_Init+0x2e2>
 800572a:	bf00      	nop
 800572c:	10320000 	.word	0x10320000
 8005730:	10310000 	.word	0x10310000
 8005734:	10220000 	.word	0x10220000
 8005738:	10210000 	.word	0x10210000
 800573c:	10120000 	.word	0x10120000
 8005740:	10110000 	.word	0x10110000
 8005744:	40021000 	.word	0x40021000
 8005748:	40010000 	.word	0x40010000
 800574c:	40010800 	.word	0x40010800
 8005750:	40010c00 	.word	0x40010c00
 8005754:	40011000 	.word	0x40011000
 8005758:	40011400 	.word	0x40011400
 800575c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005760:	4b0b      	ldr	r3, [pc, #44]	@ (8005790 <HAL_GPIO_Init+0x304>)
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	43db      	mvns	r3, r3
 8005768:	4909      	ldr	r1, [pc, #36]	@ (8005790 <HAL_GPIO_Init+0x304>)
 800576a:	4013      	ands	r3, r2
 800576c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	3301      	adds	r3, #1
 8005772:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577a:	fa22 f303 	lsr.w	r3, r2, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	f47f ae8e 	bne.w	80054a0 <HAL_GPIO_Init+0x14>
  }
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop
 8005788:	372c      	adds	r7, #44	@ 0x2c
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr
 8005790:	40010400 	.word	0x40010400

08005794 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005794:	b480      	push	{r7}
 8005796:	b089      	sub	sp, #36	@ 0x24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800579e:	2300      	movs	r3, #0
 80057a0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80057a2:	e09a      	b.n	80058da <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80057a4:	2201      	movs	r2, #1
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	4013      	ands	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 808d 	beq.w	80058d4 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80057ba:	4a4e      	ldr	r2, [pc, #312]	@ (80058f4 <HAL_GPIO_DeInit+0x160>)
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	089b      	lsrs	r3, r3, #2
 80057c0:	3302      	adds	r3, #2
 80057c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	220f      	movs	r2, #15
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4013      	ands	r3, r2
 80057da:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a46      	ldr	r2, [pc, #280]	@ (80058f8 <HAL_GPIO_DeInit+0x164>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d013      	beq.n	800580c <HAL_GPIO_DeInit+0x78>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a45      	ldr	r2, [pc, #276]	@ (80058fc <HAL_GPIO_DeInit+0x168>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00d      	beq.n	8005808 <HAL_GPIO_DeInit+0x74>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a44      	ldr	r2, [pc, #272]	@ (8005900 <HAL_GPIO_DeInit+0x16c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <HAL_GPIO_DeInit+0x70>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a43      	ldr	r2, [pc, #268]	@ (8005904 <HAL_GPIO_DeInit+0x170>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d101      	bne.n	8005800 <HAL_GPIO_DeInit+0x6c>
 80057fc:	2303      	movs	r3, #3
 80057fe:	e006      	b.n	800580e <HAL_GPIO_DeInit+0x7a>
 8005800:	2304      	movs	r3, #4
 8005802:	e004      	b.n	800580e <HAL_GPIO_DeInit+0x7a>
 8005804:	2302      	movs	r3, #2
 8005806:	e002      	b.n	800580e <HAL_GPIO_DeInit+0x7a>
 8005808:	2301      	movs	r3, #1
 800580a:	e000      	b.n	800580e <HAL_GPIO_DeInit+0x7a>
 800580c:	2300      	movs	r3, #0
 800580e:	69fa      	ldr	r2, [r7, #28]
 8005810:	f002 0203 	and.w	r2, r2, #3
 8005814:	0092      	lsls	r2, r2, #2
 8005816:	4093      	lsls	r3, r2
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	429a      	cmp	r2, r3
 800581c:	d132      	bne.n	8005884 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800581e:	4b3a      	ldr	r3, [pc, #232]	@ (8005908 <HAL_GPIO_DeInit+0x174>)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	43db      	mvns	r3, r3
 8005826:	4938      	ldr	r1, [pc, #224]	@ (8005908 <HAL_GPIO_DeInit+0x174>)
 8005828:	4013      	ands	r3, r2
 800582a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800582c:	4b36      	ldr	r3, [pc, #216]	@ (8005908 <HAL_GPIO_DeInit+0x174>)
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	43db      	mvns	r3, r3
 8005834:	4934      	ldr	r1, [pc, #208]	@ (8005908 <HAL_GPIO_DeInit+0x174>)
 8005836:	4013      	ands	r3, r2
 8005838:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800583a:	4b33      	ldr	r3, [pc, #204]	@ (8005908 <HAL_GPIO_DeInit+0x174>)
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	43db      	mvns	r3, r3
 8005842:	4931      	ldr	r1, [pc, #196]	@ (8005908 <HAL_GPIO_DeInit+0x174>)
 8005844:	4013      	ands	r3, r2
 8005846:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005848:	4b2f      	ldr	r3, [pc, #188]	@ (8005908 <HAL_GPIO_DeInit+0x174>)
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	43db      	mvns	r3, r3
 8005850:	492d      	ldr	r1, [pc, #180]	@ (8005908 <HAL_GPIO_DeInit+0x174>)
 8005852:	4013      	ands	r3, r2
 8005854:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	f003 0303 	and.w	r3, r3, #3
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	220f      	movs	r2, #15
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8005866:	4a23      	ldr	r2, [pc, #140]	@ (80058f4 <HAL_GPIO_DeInit+0x160>)
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	089b      	lsrs	r3, r3, #2
 800586c:	3302      	adds	r3, #2
 800586e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	43da      	mvns	r2, r3
 8005876:	481f      	ldr	r0, [pc, #124]	@ (80058f4 <HAL_GPIO_DeInit+0x160>)
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	089b      	lsrs	r3, r3, #2
 800587c:	400a      	ands	r2, r1
 800587e:	3302      	adds	r3, #2
 8005880:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2bff      	cmp	r3, #255	@ 0xff
 8005888:	d801      	bhi.n	800588e <HAL_GPIO_DeInit+0xfa>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	e001      	b.n	8005892 <HAL_GPIO_DeInit+0xfe>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3304      	adds	r3, #4
 8005892:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2bff      	cmp	r3, #255	@ 0xff
 8005898:	d802      	bhi.n	80058a0 <HAL_GPIO_DeInit+0x10c>
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	e002      	b.n	80058a6 <HAL_GPIO_DeInit+0x112>
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	3b08      	subs	r3, #8
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	210f      	movs	r1, #15
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	fa01 f303 	lsl.w	r3, r1, r3
 80058b4:	43db      	mvns	r3, r3
 80058b6:	401a      	ands	r2, r3
 80058b8:	2104      	movs	r1, #4
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	fa01 f303 	lsl.w	r3, r1, r3
 80058c0:	431a      	orrs	r2, r3
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	43db      	mvns	r3, r3
 80058ce:	401a      	ands	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	3301      	adds	r3, #1
 80058d8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	fa22 f303 	lsr.w	r3, r2, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f47f af5e 	bne.w	80057a4 <HAL_GPIO_DeInit+0x10>
  }
}
 80058e8:	bf00      	nop
 80058ea:	bf00      	nop
 80058ec:	3724      	adds	r7, #36	@ 0x24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr
 80058f4:	40010000 	.word	0x40010000
 80058f8:	40010800 	.word	0x40010800
 80058fc:	40010c00 	.word	0x40010c00
 8005900:	40011000 	.word	0x40011000
 8005904:	40011400 	.word	0x40011400
 8005908:	40010400 	.word	0x40010400

0800590c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	807b      	strh	r3, [r7, #2]
 8005918:	4613      	mov	r3, r2
 800591a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800591c:	787b      	ldrb	r3, [r7, #1]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005922:	887a      	ldrh	r2, [r7, #2]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005928:	e003      	b.n	8005932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800592a:	887b      	ldrh	r3, [r7, #2]
 800592c:	041a      	lsls	r2, r3, #16
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	611a      	str	r2, [r3, #16]
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr

0800593c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e12b      	b.n	8005ba6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d106      	bne.n	8005968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fb ffe0 	bl	8001928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2224      	movs	r2, #36	@ 0x24
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0201 	bic.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800598e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800599e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059a0:	f002 f864 	bl	8007a6c <HAL_RCC_GetPCLK1Freq>
 80059a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	4a81      	ldr	r2, [pc, #516]	@ (8005bb0 <HAL_I2C_Init+0x274>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d807      	bhi.n	80059c0 <HAL_I2C_Init+0x84>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4a80      	ldr	r2, [pc, #512]	@ (8005bb4 <HAL_I2C_Init+0x278>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	bf94      	ite	ls
 80059b8:	2301      	movls	r3, #1
 80059ba:	2300      	movhi	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	e006      	b.n	80059ce <HAL_I2C_Init+0x92>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4a7d      	ldr	r2, [pc, #500]	@ (8005bb8 <HAL_I2C_Init+0x27c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	bf94      	ite	ls
 80059c8:	2301      	movls	r3, #1
 80059ca:	2300      	movhi	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e0e7      	b.n	8005ba6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4a78      	ldr	r2, [pc, #480]	@ (8005bbc <HAL_I2C_Init+0x280>)
 80059da:	fba2 2303 	umull	r2, r3, r2, r3
 80059de:	0c9b      	lsrs	r3, r3, #18
 80059e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	4a6a      	ldr	r2, [pc, #424]	@ (8005bb0 <HAL_I2C_Init+0x274>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d802      	bhi.n	8005a10 <HAL_I2C_Init+0xd4>
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	e009      	b.n	8005a24 <HAL_I2C_Init+0xe8>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a16:	fb02 f303 	mul.w	r3, r2, r3
 8005a1a:	4a69      	ldr	r2, [pc, #420]	@ (8005bc0 <HAL_I2C_Init+0x284>)
 8005a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a20:	099b      	lsrs	r3, r3, #6
 8005a22:	3301      	adds	r3, #1
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	495c      	ldr	r1, [pc, #368]	@ (8005bb0 <HAL_I2C_Init+0x274>)
 8005a40:	428b      	cmp	r3, r1
 8005a42:	d819      	bhi.n	8005a78 <HAL_I2C_Init+0x13c>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	1e59      	subs	r1, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a52:	1c59      	adds	r1, r3, #1
 8005a54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005a58:	400b      	ands	r3, r1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_I2C_Init+0x138>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1e59      	subs	r1, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a72:	e051      	b.n	8005b18 <HAL_I2C_Init+0x1dc>
 8005a74:	2304      	movs	r3, #4
 8005a76:	e04f      	b.n	8005b18 <HAL_I2C_Init+0x1dc>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d111      	bne.n	8005aa4 <HAL_I2C_Init+0x168>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1e58      	subs	r0, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6859      	ldr	r1, [r3, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	440b      	add	r3, r1
 8005a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a92:	3301      	adds	r3, #1
 8005a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bf0c      	ite	eq
 8005a9c:	2301      	moveq	r3, #1
 8005a9e:	2300      	movne	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	e012      	b.n	8005aca <HAL_I2C_Init+0x18e>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	1e58      	subs	r0, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6859      	ldr	r1, [r3, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	0099      	lsls	r1, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aba:	3301      	adds	r3, #1
 8005abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	bf0c      	ite	eq
 8005ac4:	2301      	moveq	r3, #1
 8005ac6:	2300      	movne	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_I2C_Init+0x196>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e022      	b.n	8005b18 <HAL_I2C_Init+0x1dc>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10e      	bne.n	8005af8 <HAL_I2C_Init+0x1bc>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	1e58      	subs	r0, r3, #1
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6859      	ldr	r1, [r3, #4]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	440b      	add	r3, r1
 8005ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aec:	3301      	adds	r3, #1
 8005aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005af6:	e00f      	b.n	8005b18 <HAL_I2C_Init+0x1dc>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	1e58      	subs	r0, r3, #1
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6859      	ldr	r1, [r3, #4]
 8005b00:	460b      	mov	r3, r1
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	440b      	add	r3, r1
 8005b06:	0099      	lsls	r1, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b0e:	3301      	adds	r3, #1
 8005b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	6809      	ldr	r1, [r1, #0]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69da      	ldr	r2, [r3, #28]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	6911      	ldr	r1, [r2, #16]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	68d2      	ldr	r2, [r2, #12]
 8005b52:	4311      	orrs	r1, r2
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695a      	ldr	r2, [r3, #20]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0201 	orr.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	000186a0 	.word	0x000186a0
 8005bb4:	001e847f 	.word	0x001e847f
 8005bb8:	003d08ff 	.word	0x003d08ff
 8005bbc:	431bde83 	.word	0x431bde83
 8005bc0:	10624dd3 	.word	0x10624dd3

08005bc4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e021      	b.n	8005c1a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2224      	movs	r2, #36	@ 0x24
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0201 	bic.w	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fb ff30 	bl	8001a54 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	607a      	str	r2, [r7, #4]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	460b      	mov	r3, r1
 8005c32:	817b      	strh	r3, [r7, #10]
 8005c34:	4613      	mov	r3, r2
 8005c36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c38:	f7fe fbf0 	bl	800441c <HAL_GetTick>
 8005c3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	f040 80e0 	bne.w	8005e0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	2319      	movs	r3, #25
 8005c52:	2201      	movs	r2, #1
 8005c54:	4970      	ldr	r1, [pc, #448]	@ (8005e18 <HAL_I2C_Master_Transmit+0x1f4>)
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f001 f908 	bl	8006e6c <I2C_WaitOnFlagUntilTimeout>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005c62:	2302      	movs	r3, #2
 8005c64:	e0d3      	b.n	8005e0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <HAL_I2C_Master_Transmit+0x50>
 8005c70:	2302      	movs	r3, #2
 8005c72:	e0cc      	b.n	8005e0e <HAL_I2C_Master_Transmit+0x1ea>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d007      	beq.n	8005c9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0201 	orr.w	r2, r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ca8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2221      	movs	r2, #33	@ 0x21
 8005cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2210      	movs	r2, #16
 8005cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	893a      	ldrh	r2, [r7, #8]
 8005cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4a50      	ldr	r2, [pc, #320]	@ (8005e1c <HAL_I2C_Master_Transmit+0x1f8>)
 8005cda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005cdc:	8979      	ldrh	r1, [r7, #10]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	6a3a      	ldr	r2, [r7, #32]
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 fdac 	bl	8006840 <I2C_MasterRequestWrite>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e08d      	b.n	8005e0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005d08:	e066      	b.n	8005dd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	6a39      	ldr	r1, [r7, #32]
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f001 f9c6 	bl	80070a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00d      	beq.n	8005d36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d107      	bne.n	8005d32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e06b      	b.n	8005e0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3a:	781a      	ldrb	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d11b      	bne.n	8005dac <HAL_I2C_Master_Transmit+0x188>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d017      	beq.n	8005dac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	781a      	ldrb	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	6a39      	ldr	r1, [r7, #32]
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f001 f9bd 	bl	8007130 <I2C_WaitOnBTFFlagUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00d      	beq.n	8005dd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d107      	bne.n	8005dd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e01a      	b.n	8005e0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d194      	bne.n	8005d0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e000      	b.n	8005e0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005e0c:	2302      	movs	r3, #2
  }
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	00100002 	.word	0x00100002
 8005e1c:	ffff0000 	.word	0xffff0000

08005e20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	4608      	mov	r0, r1
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4603      	mov	r3, r0
 8005e30:	817b      	strh	r3, [r7, #10]
 8005e32:	460b      	mov	r3, r1
 8005e34:	813b      	strh	r3, [r7, #8]
 8005e36:	4613      	mov	r3, r2
 8005e38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e3a:	f7fe faef 	bl	800441c <HAL_GetTick>
 8005e3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	f040 80d9 	bne.w	8006000 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	2319      	movs	r3, #25
 8005e54:	2201      	movs	r2, #1
 8005e56:	496d      	ldr	r1, [pc, #436]	@ (800600c <HAL_I2C_Mem_Write+0x1ec>)
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f001 f807 	bl	8006e6c <I2C_WaitOnFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005e64:	2302      	movs	r3, #2
 8005e66:	e0cc      	b.n	8006002 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <HAL_I2C_Mem_Write+0x56>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e0c5      	b.n	8006002 <HAL_I2C_Mem_Write+0x1e2>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d007      	beq.n	8005e9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0201 	orr.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2221      	movs	r2, #33	@ 0x21
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2240      	movs	r2, #64	@ 0x40
 8005eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a3a      	ldr	r2, [r7, #32]
 8005ec6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4a4d      	ldr	r2, [pc, #308]	@ (8006010 <HAL_I2C_Mem_Write+0x1f0>)
 8005edc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ede:	88f8      	ldrh	r0, [r7, #6]
 8005ee0:	893a      	ldrh	r2, [r7, #8]
 8005ee2:	8979      	ldrh	r1, [r7, #10]
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	9301      	str	r3, [sp, #4]
 8005ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	4603      	mov	r3, r0
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 fd28 	bl	8006944 <I2C_RequestMemoryWrite>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d052      	beq.n	8005fa0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e081      	b.n	8006002 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f001 f8cc 	bl	80070a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00d      	beq.n	8005f2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d107      	bne.n	8005f26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e06b      	b.n	8006002 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2e:	781a      	ldrb	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	d11b      	bne.n	8005fa0 <HAL_I2C_Mem_Write+0x180>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d017      	beq.n	8005fa0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f74:	781a      	ldrb	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1aa      	bne.n	8005efe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f001 f8bf 	bl	8007130 <I2C_WaitOnBTFFlagUntilTimeout>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00d      	beq.n	8005fd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d107      	bne.n	8005fd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e016      	b.n	8006002 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	e000      	b.n	8006002 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006000:	2302      	movs	r3, #2
  }
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	00100002 	.word	0x00100002
 8006010:	ffff0000 	.word	0xffff0000

08006014 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08c      	sub	sp, #48	@ 0x30
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	4608      	mov	r0, r1
 800601e:	4611      	mov	r1, r2
 8006020:	461a      	mov	r2, r3
 8006022:	4603      	mov	r3, r0
 8006024:	817b      	strh	r3, [r7, #10]
 8006026:	460b      	mov	r3, r1
 8006028:	813b      	strh	r3, [r7, #8]
 800602a:	4613      	mov	r3, r2
 800602c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006032:	f7fe f9f3 	bl	800441c <HAL_GetTick>
 8006036:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b20      	cmp	r3, #32
 8006042:	f040 8250 	bne.w	80064e6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	2319      	movs	r3, #25
 800604c:	2201      	movs	r2, #1
 800604e:	4982      	ldr	r1, [pc, #520]	@ (8006258 <HAL_I2C_Mem_Read+0x244>)
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 ff0b 	bl	8006e6c <I2C_WaitOnFlagUntilTimeout>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800605c:	2302      	movs	r3, #2
 800605e:	e243      	b.n	80064e8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_I2C_Mem_Read+0x5a>
 800606a:	2302      	movs	r3, #2
 800606c:	e23c      	b.n	80064e8 <HAL_I2C_Mem_Read+0x4d4>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b01      	cmp	r3, #1
 8006082:	d007      	beq.n	8006094 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2222      	movs	r2, #34	@ 0x22
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2240      	movs	r2, #64	@ 0x40
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80060c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4a62      	ldr	r2, [pc, #392]	@ (800625c <HAL_I2C_Mem_Read+0x248>)
 80060d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060d6:	88f8      	ldrh	r0, [r7, #6]
 80060d8:	893a      	ldrh	r2, [r7, #8]
 80060da:	8979      	ldrh	r1, [r7, #10]
 80060dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	4603      	mov	r3, r0
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 fcc2 	bl	8006a70 <I2C_RequestMemoryRead>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e1f8      	b.n	80064e8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d113      	bne.n	8006126 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060fe:	2300      	movs	r3, #0
 8006100:	61fb      	str	r3, [r7, #28]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	61fb      	str	r3, [r7, #28]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	61fb      	str	r3, [r7, #28]
 8006112:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	e1cc      	b.n	80064c0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800612a:	2b01      	cmp	r3, #1
 800612c:	d11e      	bne.n	800616c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800613c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800613e:	b672      	cpsid	i
}
 8006140:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006142:	2300      	movs	r3, #0
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	61bb      	str	r3, [r7, #24]
 8006156:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006166:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006168:	b662      	cpsie	i
}
 800616a:	e035      	b.n	80061d8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006170:	2b02      	cmp	r3, #2
 8006172:	d11e      	bne.n	80061b2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006182:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006184:	b672      	cpsid	i
}
 8006186:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	617b      	str	r3, [r7, #20]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80061ae:	b662      	cpsie	i
}
 80061b0:	e012      	b.n	80061d8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061c0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061c2:	2300      	movs	r3, #0
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80061d8:	e172      	b.n	80064c0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061de:	2b03      	cmp	r3, #3
 80061e0:	f200 811f 	bhi.w	8006422 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d123      	bne.n	8006234 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 ffe5 	bl	80071c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e173      	b.n	80064e8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691a      	ldr	r2, [r3, #16]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006232:	e145      	b.n	80064c0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006238:	2b02      	cmp	r3, #2
 800623a:	d152      	bne.n	80062e2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006242:	2200      	movs	r2, #0
 8006244:	4906      	ldr	r1, [pc, #24]	@ (8006260 <HAL_I2C_Mem_Read+0x24c>)
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 fe10 	bl	8006e6c <I2C_WaitOnFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d008      	beq.n	8006264 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e148      	b.n	80064e8 <HAL_I2C_Mem_Read+0x4d4>
 8006256:	bf00      	nop
 8006258:	00100002 	.word	0x00100002
 800625c:	ffff0000 	.word	0xffff0000
 8006260:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006264:	b672      	cpsid	i
}
 8006266:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006276:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006294:	3b01      	subs	r3, #1
 8006296:	b29a      	uxth	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80062aa:	b662      	cpsie	i
}
 80062ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80062e0:	e0ee      	b.n	80064c0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e8:	2200      	movs	r2, #0
 80062ea:	4981      	ldr	r1, [pc, #516]	@ (80064f0 <HAL_I2C_Mem_Read+0x4dc>)
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 fdbd 	bl	8006e6c <I2C_WaitOnFlagUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e0f5      	b.n	80064e8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800630a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800630c:	b672      	cpsid	i
}
 800630e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691a      	ldr	r2, [r3, #16]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006342:	4b6c      	ldr	r3, [pc, #432]	@ (80064f4 <HAL_I2C_Mem_Read+0x4e0>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	08db      	lsrs	r3, r3, #3
 8006348:	4a6b      	ldr	r2, [pc, #428]	@ (80064f8 <HAL_I2C_Mem_Read+0x4e4>)
 800634a:	fba2 2303 	umull	r2, r3, r2, r3
 800634e:	0a1a      	lsrs	r2, r3, #8
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	00da      	lsls	r2, r3, #3
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	3b01      	subs	r3, #1
 8006360:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d118      	bne.n	800639a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2220      	movs	r2, #32
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006382:	f043 0220 	orr.w	r2, r3, #32
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800638a:	b662      	cpsie	i
}
 800638c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e0a6      	b.n	80064e8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d1d9      	bne.n	800635c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80063ea:	b662      	cpsie	i
}
 80063ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800640a:	3b01      	subs	r3, #1
 800640c:	b29a      	uxth	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006416:	b29b      	uxth	r3, r3
 8006418:	3b01      	subs	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006420:	e04e      	b.n	80064c0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006424:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 feca 	bl	80071c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e058      	b.n	80064e8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b04      	cmp	r3, #4
 8006474:	d124      	bne.n	80064c0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800647a:	2b03      	cmp	r3, #3
 800647c:	d107      	bne.n	800648e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800648c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f47f ae88 	bne.w	80061da <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	e000      	b.n	80064e8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80064e6:	2302      	movs	r3, #2
  }
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3728      	adds	r7, #40	@ 0x28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	00010004 	.word	0x00010004
 80064f4:	20000000 	.word	0x20000000
 80064f8:	14f8b589 	.word	0x14f8b589

080064fc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08c      	sub	sp, #48	@ 0x30
 8006500:	af02      	add	r7, sp, #8
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	4608      	mov	r0, r1
 8006506:	4611      	mov	r1, r2
 8006508:	461a      	mov	r2, r3
 800650a:	4603      	mov	r3, r0
 800650c:	817b      	strh	r3, [r7, #10]
 800650e:	460b      	mov	r3, r1
 8006510:	813b      	strh	r3, [r7, #8]
 8006512:	4613      	mov	r3, r2
 8006514:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006516:	f7fd ff81 	bl	800441c <HAL_GetTick>
 800651a:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b20      	cmp	r3, #32
 800652a:	f040 8168 	bne.w	80067fe <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800652e:	4b98      	ldr	r3, [pc, #608]	@ (8006790 <HAL_I2C_Mem_Read_DMA+0x294>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	08db      	lsrs	r3, r3, #3
 8006534:	4a97      	ldr	r2, [pc, #604]	@ (8006794 <HAL_I2C_Mem_Read_DMA+0x298>)
 8006536:	fba2 2303 	umull	r2, r3, r2, r3
 800653a:	0a1a      	lsrs	r2, r3, #8
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	009a      	lsls	r2, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	3b01      	subs	r3, #1
 800654c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d112      	bne.n	800657a <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2220      	movs	r2, #32
 800655e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656e:	f043 0220 	orr.w	r2, r3, #32
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8006576:	2302      	movs	r3, #2
 8006578:	e142      	b.n	8006800 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b02      	cmp	r3, #2
 8006586:	d0df      	beq.n	8006548 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800658e:	2b01      	cmp	r3, #1
 8006590:	d101      	bne.n	8006596 <HAL_I2C_Mem_Read_DMA+0x9a>
 8006592:	2302      	movs	r3, #2
 8006594:	e134      	b.n	8006800 <HAL_I2C_Mem_Read_DMA+0x304>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d007      	beq.n	80065bc <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0201 	orr.w	r2, r2, #1
 80065ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2222      	movs	r2, #34	@ 0x22
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2240      	movs	r2, #64	@ 0x40
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80065ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4a67      	ldr	r2, [pc, #412]	@ (8006798 <HAL_I2C_Mem_Read_DMA+0x29c>)
 80065fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80065fe:	897a      	ldrh	r2, [r7, #10]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8006604:	893a      	ldrh	r2, [r7, #8]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800660a:	88fa      	ldrh	r2, [r7, #6]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 80c2 	beq.w	80067a4 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006624:	2b00      	cmp	r3, #0
 8006626:	d024      	beq.n	8006672 <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800662c:	4a5b      	ldr	r2, [pc, #364]	@ (800679c <HAL_I2C_Mem_Read_DMA+0x2a0>)
 800662e:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006634:	4a5a      	ldr	r2, [pc, #360]	@ (80067a0 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 8006636:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663c:	2200      	movs	r2, #0
 800663e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006644:	2200      	movs	r2, #0
 8006646:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3310      	adds	r3, #16
 8006652:	4619      	mov	r1, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006658:	461a      	mov	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800665e:	f7fe fccd 	bl	8004ffc <HAL_DMA_Start_IT>
 8006662:	4603      	mov	r3, r0
 8006664:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006668:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800666c:	2b00      	cmp	r3, #0
 800666e:	d17b      	bne.n	8006768 <HAL_I2C_Mem_Read_DMA+0x26c>
 8006670:	e013      	b.n	800669a <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2220      	movs	r2, #32
 8006676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006686:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e0b2      	b.n	8006800 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800669a:	88f8      	ldrh	r0, [r7, #6]
 800669c:	893a      	ldrh	r2, [r7, #8]
 800669e:	8979      	ldrh	r1, [r7, #10]
 80066a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a2:	9301      	str	r3, [sp, #4]
 80066a4:	2323      	movs	r3, #35	@ 0x23
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	4603      	mov	r3, r0
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 f9e0 	bl	8006a70 <I2C_RequestMemoryRead>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d023      	beq.n	80066fe <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fe fd3a 	bl	8005134 <HAL_DMA_Abort_IT>
 80066c0:	4603      	mov	r3, r0
 80066c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ca:	2200      	movs	r2, #0
 80066cc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066dc:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0201 	bic.w	r2, r2, #1
 80066f8:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e080      	b.n	8006800 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006702:	2b01      	cmp	r3, #1
 8006704:	d108      	bne.n	8006718 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	e007      	b.n	8006728 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006726:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006728:	2300      	movs	r3, #0
 800672a:	61bb      	str	r3, [r7, #24]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	61bb      	str	r3, [r7, #24]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	61bb      	str	r3, [r7, #24]
 800673c:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006754:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006764:	605a      	str	r2, [r3, #4]
 8006766:	e048      	b.n	80067fa <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677c:	f043 0210 	orr.w	r2, r3, #16
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e037      	b.n	8006800 <HAL_I2C_Mem_Read_DMA+0x304>
 8006790:	20000000 	.word	0x20000000
 8006794:	14f8b589 	.word	0x14f8b589
 8006798:	ffff0000 	.word	0xffff0000
 800679c:	08006c41 	.word	0x08006c41
 80067a0:	08006dff 	.word	0x08006dff
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80067a4:	88f8      	ldrh	r0, [r7, #6]
 80067a6:	893a      	ldrh	r2, [r7, #8]
 80067a8:	8979      	ldrh	r1, [r7, #10]
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	2323      	movs	r3, #35	@ 0x23
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	4603      	mov	r3, r0
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f95b 	bl	8006a70 <I2C_RequestMemoryRead>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e01d      	b.n	8006800 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067e8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e000      	b.n	8006800 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 80067fe:	2302      	movs	r3, #2
  }
}
 8006800:	4618      	mov	r0, r3
 8006802:	3728      	adds	r7, #40	@ 0x28
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr

0800681a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr

0800682c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	bc80      	pop	{r7}
 800683c:	4770      	bx	lr
	...

08006840 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af02      	add	r7, sp, #8
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	607a      	str	r2, [r7, #4]
 800684a:	603b      	str	r3, [r7, #0]
 800684c:	460b      	mov	r3, r1
 800684e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006854:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b08      	cmp	r3, #8
 800685a:	d006      	beq.n	800686a <I2C_MasterRequestWrite+0x2a>
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d003      	beq.n	800686a <I2C_MasterRequestWrite+0x2a>
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006868:	d108      	bne.n	800687c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	e00b      	b.n	8006894 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006880:	2b12      	cmp	r3, #18
 8006882:	d107      	bne.n	8006894 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006892:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 fae3 	bl	8006e6c <I2C_WaitOnFlagUntilTimeout>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00d      	beq.n	80068c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ba:	d103      	bne.n	80068c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e035      	b.n	8006934 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068d0:	d108      	bne.n	80068e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068d2:	897b      	ldrh	r3, [r7, #10]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	461a      	mov	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80068e0:	611a      	str	r2, [r3, #16]
 80068e2:	e01b      	b.n	800691c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80068e4:	897b      	ldrh	r3, [r7, #10]
 80068e6:	11db      	asrs	r3, r3, #7
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	f003 0306 	and.w	r3, r3, #6
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	f063 030f 	orn	r3, r3, #15
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	490e      	ldr	r1, [pc, #56]	@ (800693c <I2C_MasterRequestWrite+0xfc>)
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 fb2c 	bl	8006f60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e010      	b.n	8006934 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006912:	897b      	ldrh	r3, [r7, #10]
 8006914:	b2da      	uxtb	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	4907      	ldr	r1, [pc, #28]	@ (8006940 <I2C_MasterRequestWrite+0x100>)
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 fb1c 	bl	8006f60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e000      	b.n	8006934 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	00010008 	.word	0x00010008
 8006940:	00010002 	.word	0x00010002

08006944 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af02      	add	r7, sp, #8
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	4608      	mov	r0, r1
 800694e:	4611      	mov	r1, r2
 8006950:	461a      	mov	r2, r3
 8006952:	4603      	mov	r3, r0
 8006954:	817b      	strh	r3, [r7, #10]
 8006956:	460b      	mov	r3, r1
 8006958:	813b      	strh	r3, [r7, #8]
 800695a:	4613      	mov	r3, r2
 800695c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800696c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	2200      	movs	r2, #0
 8006976:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 fa76 	bl	8006e6c <I2C_WaitOnFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00d      	beq.n	80069a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006994:	d103      	bne.n	800699e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800699c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e05f      	b.n	8006a62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069a2:	897b      	ldrh	r3, [r7, #10]
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	461a      	mov	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80069b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	6a3a      	ldr	r2, [r7, #32]
 80069b6:	492d      	ldr	r1, [pc, #180]	@ (8006a6c <I2C_RequestMemoryWrite+0x128>)
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fad1 	bl	8006f60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e04c      	b.n	8006a62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069c8:	2300      	movs	r3, #0
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069e0:	6a39      	ldr	r1, [r7, #32]
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 fb5c 	bl	80070a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00d      	beq.n	8006a0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d107      	bne.n	8006a06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e02b      	b.n	8006a62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a0a:	88fb      	ldrh	r3, [r7, #6]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d105      	bne.n	8006a1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a10:	893b      	ldrh	r3, [r7, #8]
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	611a      	str	r2, [r3, #16]
 8006a1a:	e021      	b.n	8006a60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a1c:	893b      	ldrh	r3, [r7, #8]
 8006a1e:	0a1b      	lsrs	r3, r3, #8
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a2c:	6a39      	ldr	r1, [r7, #32]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 fb36 	bl	80070a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00d      	beq.n	8006a56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d107      	bne.n	8006a52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e005      	b.n	8006a62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a56:	893b      	ldrh	r3, [r7, #8]
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	00010002 	.word	0x00010002

08006a70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	4608      	mov	r0, r1
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	4603      	mov	r3, r0
 8006a80:	817b      	strh	r3, [r7, #10]
 8006a82:	460b      	mov	r3, r1
 8006a84:	813b      	strh	r3, [r7, #8]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006a98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006aa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 f9d8 	bl	8006e6c <I2C_WaitOnFlagUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00d      	beq.n	8006ade <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ad0:	d103      	bne.n	8006ada <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ad8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e0aa      	b.n	8006c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ade:	897b      	ldrh	r3, [r7, #10]
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006aec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af0:	6a3a      	ldr	r2, [r7, #32]
 8006af2:	4952      	ldr	r1, [pc, #328]	@ (8006c3c <I2C_RequestMemoryRead+0x1cc>)
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 fa33 	bl	8006f60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e097      	b.n	8006c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b04:	2300      	movs	r3, #0
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	617b      	str	r3, [r7, #20]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b1c:	6a39      	ldr	r1, [r7, #32]
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 fabe 	bl	80070a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00d      	beq.n	8006b46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d107      	bne.n	8006b42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e076      	b.n	8006c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b46:	88fb      	ldrh	r3, [r7, #6]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d105      	bne.n	8006b58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b4c:	893b      	ldrh	r3, [r7, #8]
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	611a      	str	r2, [r3, #16]
 8006b56:	e021      	b.n	8006b9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b58:	893b      	ldrh	r3, [r7, #8]
 8006b5a:	0a1b      	lsrs	r3, r3, #8
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b68:	6a39      	ldr	r1, [r7, #32]
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 fa98 	bl	80070a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00d      	beq.n	8006b92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	d107      	bne.n	8006b8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e050      	b.n	8006c34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b92:	893b      	ldrh	r3, [r7, #8]
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b9e:	6a39      	ldr	r1, [r7, #32]
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fa7d 	bl	80070a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00d      	beq.n	8006bc8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d107      	bne.n	8006bc4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bc2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e035      	b.n	8006c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bd6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 f941 	bl	8006e6c <I2C_WaitOnFlagUntilTimeout>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00d      	beq.n	8006c0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bfe:	d103      	bne.n	8006c08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e013      	b.n	8006c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c0c:	897b      	ldrh	r3, [r7, #10]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f043 0301 	orr.w	r3, r3, #1
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1e:	6a3a      	ldr	r2, [r7, #32]
 8006c20:	4906      	ldr	r1, [pc, #24]	@ (8006c3c <I2C_RequestMemoryRead+0x1cc>)
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 f99c 	bl	8006f60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	00010002 	.word	0x00010002

08006c40 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c54:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c5c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006c72:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c80:	2200      	movs	r2, #0
 8006c82:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c90:	2200      	movs	r2, #0
 8006c92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006c94:	7cfb      	ldrb	r3, [r7, #19]
 8006c96:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006c9a:	2b21      	cmp	r3, #33	@ 0x21
 8006c9c:	d007      	beq.n	8006cae <I2C_DMAXferCplt+0x6e>
 8006c9e:	7cfb      	ldrb	r3, [r7, #19]
 8006ca0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8006ca4:	2b22      	cmp	r3, #34	@ 0x22
 8006ca6:	d131      	bne.n	8006d0c <I2C_DMAXferCplt+0xcc>
 8006ca8:	7cbb      	ldrb	r3, [r7, #18]
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d12e      	bne.n	8006d0c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cbc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006cc4:	7cfb      	ldrb	r3, [r7, #19]
 8006cc6:	2b29      	cmp	r3, #41	@ 0x29
 8006cc8:	d10a      	bne.n	8006ce0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2221      	movs	r2, #33	@ 0x21
 8006cce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	2228      	movs	r2, #40	@ 0x28
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006cd8:	6978      	ldr	r0, [r7, #20]
 8006cda:	f7ff fd9e 	bl	800681a <HAL_I2C_SlaveTxCpltCallback>
 8006cde:	e00c      	b.n	8006cfa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ce0:	7cfb      	ldrb	r3, [r7, #19]
 8006ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ce4:	d109      	bne.n	8006cfa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2222      	movs	r2, #34	@ 0x22
 8006cea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2228      	movs	r2, #40	@ 0x28
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006cf4:	6978      	ldr	r0, [r7, #20]
 8006cf6:	f7ff fd99 	bl	800682c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006d08:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006d0a:	e074      	b.n	8006df6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d06e      	beq.n	8006df6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d107      	bne.n	8006d32 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d30:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006d40:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d48:	d009      	beq.n	8006d5e <I2C_DMAXferCplt+0x11e>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	d006      	beq.n	8006d5e <I2C_DMAXferCplt+0x11e>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006d56:	d002      	beq.n	8006d5e <I2C_DMAXferCplt+0x11e>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2b20      	cmp	r3, #32
 8006d5c:	d107      	bne.n	8006d6e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d6c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d7c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d8c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2200      	movs	r2, #0
 8006d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006d9c:	6978      	ldr	r0, [r7, #20]
 8006d9e:	f7fb fcc5 	bl	800272c <HAL_I2C_ErrorCallback>
}
 8006da2:	e028      	b.n	8006df6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b40      	cmp	r3, #64	@ 0x40
 8006db6:	d10a      	bne.n	8006dce <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006dc6:	6978      	ldr	r0, [r7, #20]
 8006dc8:	f7fb fc94 	bl	80026f4 <HAL_I2C_MemRxCpltCallback>
}
 8006dcc:	e013      	b.n	8006df6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d002      	beq.n	8006de2 <I2C_DMAXferCplt+0x1a2>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d103      	bne.n	8006dea <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2200      	movs	r2, #0
 8006de6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006de8:	e002      	b.n	8006df0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2212      	movs	r2, #18
 8006dee:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006df0:	6978      	ldr	r0, [r7, #20]
 8006df2:	f7ff fd09 	bl	8006808 <HAL_I2C_MasterRxCpltCallback>
}
 8006df6:	bf00      	nop
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e18:	2200      	movs	r2, #0
 8006e1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e28:	2200      	movs	r2, #0
 8006e2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e3a:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2220      	movs	r2, #32
 8006e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e56:	f043 0210 	orr.w	r2, r3, #16
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7fb fc64 	bl	800272c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006e64:	bf00      	nop
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e7c:	e048      	b.n	8006f10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e84:	d044      	beq.n	8006f10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e86:	f7fd fac9 	bl	800441c <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d302      	bcc.n	8006e9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d139      	bne.n	8006f10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	0c1b      	lsrs	r3, r3, #16
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d10d      	bne.n	8006ec2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	43da      	mvns	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	bf0c      	ite	eq
 8006eb8:	2301      	moveq	r3, #1
 8006eba:	2300      	movne	r3, #0
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	e00c      	b.n	8006edc <I2C_WaitOnFlagUntilTimeout+0x70>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	43da      	mvns	r2, r3
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	4013      	ands	r3, r2
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	bf0c      	ite	eq
 8006ed4:	2301      	moveq	r3, #1
 8006ed6:	2300      	movne	r3, #0
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	461a      	mov	r2, r3
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d116      	bne.n	8006f10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2220      	movs	r2, #32
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efc:	f043 0220 	orr.w	r2, r3, #32
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e023      	b.n	8006f58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	0c1b      	lsrs	r3, r3, #16
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d10d      	bne.n	8006f36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	43da      	mvns	r2, r3
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	4013      	ands	r3, r2
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	bf0c      	ite	eq
 8006f2c:	2301      	moveq	r3, #1
 8006f2e:	2300      	movne	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	461a      	mov	r2, r3
 8006f34:	e00c      	b.n	8006f50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	43da      	mvns	r2, r3
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	4013      	ands	r3, r2
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	bf0c      	ite	eq
 8006f48:	2301      	moveq	r3, #1
 8006f4a:	2300      	movne	r3, #0
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	461a      	mov	r2, r3
 8006f50:	79fb      	ldrb	r3, [r7, #7]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d093      	beq.n	8006e7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f6e:	e071      	b.n	8007054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f7e:	d123      	bne.n	8006fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb4:	f043 0204 	orr.w	r2, r3, #4
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e067      	b.n	8007098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fce:	d041      	beq.n	8007054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd0:	f7fd fa24 	bl	800441c <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d302      	bcc.n	8006fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d136      	bne.n	8007054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	0c1b      	lsrs	r3, r3, #16
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d10c      	bne.n	800700a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	43da      	mvns	r2, r3
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	bf14      	ite	ne
 8007002:	2301      	movne	r3, #1
 8007004:	2300      	moveq	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	e00b      	b.n	8007022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	43da      	mvns	r2, r3
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	4013      	ands	r3, r2
 8007016:	b29b      	uxth	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	bf14      	ite	ne
 800701c:	2301      	movne	r3, #1
 800701e:	2300      	moveq	r3, #0
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d016      	beq.n	8007054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2220      	movs	r2, #32
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007040:	f043 0220 	orr.w	r2, r3, #32
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e021      	b.n	8007098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	0c1b      	lsrs	r3, r3, #16
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b01      	cmp	r3, #1
 800705c:	d10c      	bne.n	8007078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	43da      	mvns	r2, r3
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	4013      	ands	r3, r2
 800706a:	b29b      	uxth	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	bf14      	ite	ne
 8007070:	2301      	movne	r3, #1
 8007072:	2300      	moveq	r3, #0
 8007074:	b2db      	uxtb	r3, r3
 8007076:	e00b      	b.n	8007090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	43da      	mvns	r2, r3
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	4013      	ands	r3, r2
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	bf14      	ite	ne
 800708a:	2301      	movne	r3, #1
 800708c:	2300      	moveq	r3, #0
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	f47f af6d 	bne.w	8006f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070ac:	e034      	b.n	8007118 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 f8e3 	bl	800727a <I2C_IsAcknowledgeFailed>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e034      	b.n	8007128 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070c4:	d028      	beq.n	8007118 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070c6:	f7fd f9a9 	bl	800441c <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d302      	bcc.n	80070dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d11d      	bne.n	8007118 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070e6:	2b80      	cmp	r3, #128	@ 0x80
 80070e8:	d016      	beq.n	8007118 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007104:	f043 0220 	orr.w	r2, r3, #32
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e007      	b.n	8007128 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007122:	2b80      	cmp	r3, #128	@ 0x80
 8007124:	d1c3      	bne.n	80070ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800713c:	e034      	b.n	80071a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 f89b 	bl	800727a <I2C_IsAcknowledgeFailed>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e034      	b.n	80071b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007154:	d028      	beq.n	80071a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007156:	f7fd f961 	bl	800441c <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	429a      	cmp	r2, r3
 8007164:	d302      	bcc.n	800716c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d11d      	bne.n	80071a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	f003 0304 	and.w	r3, r3, #4
 8007176:	2b04      	cmp	r3, #4
 8007178:	d016      	beq.n	80071a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2220      	movs	r2, #32
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007194:	f043 0220 	orr.w	r2, r3, #32
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e007      	b.n	80071b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	f003 0304 	and.w	r3, r3, #4
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	d1c3      	bne.n	800713e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071cc:	e049      	b.n	8007262 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	f003 0310 	and.w	r3, r3, #16
 80071d8:	2b10      	cmp	r3, #16
 80071da:	d119      	bne.n	8007210 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f06f 0210 	mvn.w	r2, #16
 80071e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e030      	b.n	8007272 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007210:	f7fd f904 	bl	800441c <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	429a      	cmp	r2, r3
 800721e:	d302      	bcc.n	8007226 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d11d      	bne.n	8007262 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007230:	2b40      	cmp	r3, #64	@ 0x40
 8007232:	d016      	beq.n	8007262 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2220      	movs	r2, #32
 800723e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724e:	f043 0220 	orr.w	r2, r3, #32
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e007      	b.n	8007272 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800726c:	2b40      	cmp	r3, #64	@ 0x40
 800726e:	d1ae      	bne.n	80071ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800727a:	b480      	push	{r7}
 800727c:	b083      	sub	sp, #12
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800728c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007290:	d11b      	bne.n	80072ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800729a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2220      	movs	r2, #32
 80072a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b6:	f043 0204 	orr.w	r2, r3, #4
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e000      	b.n	80072cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bc80      	pop	{r7}
 80072d4:	4770      	bx	lr
	...

080072d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e272      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 8087 	beq.w	8007406 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80072f8:	4b92      	ldr	r3, [pc, #584]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f003 030c 	and.w	r3, r3, #12
 8007300:	2b04      	cmp	r3, #4
 8007302:	d00c      	beq.n	800731e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007304:	4b8f      	ldr	r3, [pc, #572]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f003 030c 	and.w	r3, r3, #12
 800730c:	2b08      	cmp	r3, #8
 800730e:	d112      	bne.n	8007336 <HAL_RCC_OscConfig+0x5e>
 8007310:	4b8c      	ldr	r3, [pc, #560]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800731c:	d10b      	bne.n	8007336 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800731e:	4b89      	ldr	r3, [pc, #548]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d06c      	beq.n	8007404 <HAL_RCC_OscConfig+0x12c>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d168      	bne.n	8007404 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e24c      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800733e:	d106      	bne.n	800734e <HAL_RCC_OscConfig+0x76>
 8007340:	4b80      	ldr	r3, [pc, #512]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a7f      	ldr	r2, [pc, #508]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 8007346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	e02e      	b.n	80073ac <HAL_RCC_OscConfig+0xd4>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10c      	bne.n	8007370 <HAL_RCC_OscConfig+0x98>
 8007356:	4b7b      	ldr	r3, [pc, #492]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a7a      	ldr	r2, [pc, #488]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 800735c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	4b78      	ldr	r3, [pc, #480]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a77      	ldr	r2, [pc, #476]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 8007368:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	e01d      	b.n	80073ac <HAL_RCC_OscConfig+0xd4>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007378:	d10c      	bne.n	8007394 <HAL_RCC_OscConfig+0xbc>
 800737a:	4b72      	ldr	r3, [pc, #456]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a71      	ldr	r2, [pc, #452]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 8007380:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	4b6f      	ldr	r3, [pc, #444]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a6e      	ldr	r2, [pc, #440]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 800738c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007390:	6013      	str	r3, [r2, #0]
 8007392:	e00b      	b.n	80073ac <HAL_RCC_OscConfig+0xd4>
 8007394:	4b6b      	ldr	r3, [pc, #428]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a6a      	ldr	r2, [pc, #424]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 800739a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	4b68      	ldr	r3, [pc, #416]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a67      	ldr	r2, [pc, #412]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 80073a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d013      	beq.n	80073dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073b4:	f7fd f832 	bl	800441c <HAL_GetTick>
 80073b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ba:	e008      	b.n	80073ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073bc:	f7fd f82e 	bl	800441c <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	2b64      	cmp	r3, #100	@ 0x64
 80073c8:	d901      	bls.n	80073ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e200      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ce:	4b5d      	ldr	r3, [pc, #372]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d0f0      	beq.n	80073bc <HAL_RCC_OscConfig+0xe4>
 80073da:	e014      	b.n	8007406 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073dc:	f7fd f81e 	bl	800441c <HAL_GetTick>
 80073e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073e2:	e008      	b.n	80073f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073e4:	f7fd f81a 	bl	800441c <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	2b64      	cmp	r3, #100	@ 0x64
 80073f0:	d901      	bls.n	80073f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e1ec      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073f6:	4b53      	ldr	r3, [pc, #332]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1f0      	bne.n	80073e4 <HAL_RCC_OscConfig+0x10c>
 8007402:	e000      	b.n	8007406 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d063      	beq.n	80074da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007412:	4b4c      	ldr	r3, [pc, #304]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f003 030c 	and.w	r3, r3, #12
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00b      	beq.n	8007436 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800741e:	4b49      	ldr	r3, [pc, #292]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f003 030c 	and.w	r3, r3, #12
 8007426:	2b08      	cmp	r3, #8
 8007428:	d11c      	bne.n	8007464 <HAL_RCC_OscConfig+0x18c>
 800742a:	4b46      	ldr	r3, [pc, #280]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d116      	bne.n	8007464 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007436:	4b43      	ldr	r3, [pc, #268]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d005      	beq.n	800744e <HAL_RCC_OscConfig+0x176>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d001      	beq.n	800744e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e1c0      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800744e:	4b3d      	ldr	r3, [pc, #244]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	4939      	ldr	r1, [pc, #228]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 800745e:	4313      	orrs	r3, r2
 8007460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007462:	e03a      	b.n	80074da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d020      	beq.n	80074ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800746c:	4b36      	ldr	r3, [pc, #216]	@ (8007548 <HAL_RCC_OscConfig+0x270>)
 800746e:	2201      	movs	r2, #1
 8007470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007472:	f7fc ffd3 	bl	800441c <HAL_GetTick>
 8007476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007478:	e008      	b.n	800748c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800747a:	f7fc ffcf 	bl	800441c <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d901      	bls.n	800748c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e1a1      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800748c:	4b2d      	ldr	r3, [pc, #180]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0f0      	beq.n	800747a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007498:	4b2a      	ldr	r3, [pc, #168]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	4927      	ldr	r1, [pc, #156]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	600b      	str	r3, [r1, #0]
 80074ac:	e015      	b.n	80074da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074ae:	4b26      	ldr	r3, [pc, #152]	@ (8007548 <HAL_RCC_OscConfig+0x270>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074b4:	f7fc ffb2 	bl	800441c <HAL_GetTick>
 80074b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074ba:	e008      	b.n	80074ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074bc:	f7fc ffae 	bl	800441c <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d901      	bls.n	80074ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e180      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074ce:	4b1d      	ldr	r3, [pc, #116]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1f0      	bne.n	80074bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d03a      	beq.n	800755c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d019      	beq.n	8007522 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074ee:	4b17      	ldr	r3, [pc, #92]	@ (800754c <HAL_RCC_OscConfig+0x274>)
 80074f0:	2201      	movs	r2, #1
 80074f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074f4:	f7fc ff92 	bl	800441c <HAL_GetTick>
 80074f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074fa:	e008      	b.n	800750e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074fc:	f7fc ff8e 	bl	800441c <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d901      	bls.n	800750e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e160      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800750e:	4b0d      	ldr	r3, [pc, #52]	@ (8007544 <HAL_RCC_OscConfig+0x26c>)
 8007510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0f0      	beq.n	80074fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800751a:	2001      	movs	r0, #1
 800751c:	f000 face 	bl	8007abc <RCC_Delay>
 8007520:	e01c      	b.n	800755c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007522:	4b0a      	ldr	r3, [pc, #40]	@ (800754c <HAL_RCC_OscConfig+0x274>)
 8007524:	2200      	movs	r2, #0
 8007526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007528:	f7fc ff78 	bl	800441c <HAL_GetTick>
 800752c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800752e:	e00f      	b.n	8007550 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007530:	f7fc ff74 	bl	800441c <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d908      	bls.n	8007550 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e146      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>
 8007542:	bf00      	nop
 8007544:	40021000 	.word	0x40021000
 8007548:	42420000 	.word	0x42420000
 800754c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007550:	4b92      	ldr	r3, [pc, #584]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 8007552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e9      	bne.n	8007530 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 80a6 	beq.w	80076b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800756a:	2300      	movs	r3, #0
 800756c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800756e:	4b8b      	ldr	r3, [pc, #556]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10d      	bne.n	8007596 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800757a:	4b88      	ldr	r3, [pc, #544]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	4a87      	ldr	r2, [pc, #540]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 8007580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007584:	61d3      	str	r3, [r2, #28]
 8007586:	4b85      	ldr	r3, [pc, #532]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800758e:	60bb      	str	r3, [r7, #8]
 8007590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007592:	2301      	movs	r3, #1
 8007594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007596:	4b82      	ldr	r3, [pc, #520]	@ (80077a0 <HAL_RCC_OscConfig+0x4c8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d118      	bne.n	80075d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075a2:	4b7f      	ldr	r3, [pc, #508]	@ (80077a0 <HAL_RCC_OscConfig+0x4c8>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a7e      	ldr	r2, [pc, #504]	@ (80077a0 <HAL_RCC_OscConfig+0x4c8>)
 80075a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075ae:	f7fc ff35 	bl	800441c <HAL_GetTick>
 80075b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075b4:	e008      	b.n	80075c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075b6:	f7fc ff31 	bl	800441c <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b64      	cmp	r3, #100	@ 0x64
 80075c2:	d901      	bls.n	80075c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e103      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075c8:	4b75      	ldr	r3, [pc, #468]	@ (80077a0 <HAL_RCC_OscConfig+0x4c8>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0f0      	beq.n	80075b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d106      	bne.n	80075ea <HAL_RCC_OscConfig+0x312>
 80075dc:	4b6f      	ldr	r3, [pc, #444]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	4a6e      	ldr	r2, [pc, #440]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 80075e2:	f043 0301 	orr.w	r3, r3, #1
 80075e6:	6213      	str	r3, [r2, #32]
 80075e8:	e02d      	b.n	8007646 <HAL_RCC_OscConfig+0x36e>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10c      	bne.n	800760c <HAL_RCC_OscConfig+0x334>
 80075f2:	4b6a      	ldr	r3, [pc, #424]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	4a69      	ldr	r2, [pc, #420]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 80075f8:	f023 0301 	bic.w	r3, r3, #1
 80075fc:	6213      	str	r3, [r2, #32]
 80075fe:	4b67      	ldr	r3, [pc, #412]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	4a66      	ldr	r2, [pc, #408]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 8007604:	f023 0304 	bic.w	r3, r3, #4
 8007608:	6213      	str	r3, [r2, #32]
 800760a:	e01c      	b.n	8007646 <HAL_RCC_OscConfig+0x36e>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	2b05      	cmp	r3, #5
 8007612:	d10c      	bne.n	800762e <HAL_RCC_OscConfig+0x356>
 8007614:	4b61      	ldr	r3, [pc, #388]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	4a60      	ldr	r2, [pc, #384]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 800761a:	f043 0304 	orr.w	r3, r3, #4
 800761e:	6213      	str	r3, [r2, #32]
 8007620:	4b5e      	ldr	r3, [pc, #376]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	4a5d      	ldr	r2, [pc, #372]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 8007626:	f043 0301 	orr.w	r3, r3, #1
 800762a:	6213      	str	r3, [r2, #32]
 800762c:	e00b      	b.n	8007646 <HAL_RCC_OscConfig+0x36e>
 800762e:	4b5b      	ldr	r3, [pc, #364]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	4a5a      	ldr	r2, [pc, #360]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 8007634:	f023 0301 	bic.w	r3, r3, #1
 8007638:	6213      	str	r3, [r2, #32]
 800763a:	4b58      	ldr	r3, [pc, #352]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	4a57      	ldr	r2, [pc, #348]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 8007640:	f023 0304 	bic.w	r3, r3, #4
 8007644:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d015      	beq.n	800767a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800764e:	f7fc fee5 	bl	800441c <HAL_GetTick>
 8007652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007654:	e00a      	b.n	800766c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007656:	f7fc fee1 	bl	800441c <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007664:	4293      	cmp	r3, r2
 8007666:	d901      	bls.n	800766c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e0b1      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800766c:	4b4b      	ldr	r3, [pc, #300]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0ee      	beq.n	8007656 <HAL_RCC_OscConfig+0x37e>
 8007678:	e014      	b.n	80076a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800767a:	f7fc fecf 	bl	800441c <HAL_GetTick>
 800767e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007680:	e00a      	b.n	8007698 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007682:	f7fc fecb 	bl	800441c <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007690:	4293      	cmp	r3, r2
 8007692:	d901      	bls.n	8007698 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e09b      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007698:	4b40      	ldr	r3, [pc, #256]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 800769a:	6a1b      	ldr	r3, [r3, #32]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1ee      	bne.n	8007682 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d105      	bne.n	80076b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076aa:	4b3c      	ldr	r3, [pc, #240]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	4a3b      	ldr	r2, [pc, #236]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 80076b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 8087 	beq.w	80077ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076c0:	4b36      	ldr	r3, [pc, #216]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f003 030c 	and.w	r3, r3, #12
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d061      	beq.n	8007790 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d146      	bne.n	8007762 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076d4:	4b33      	ldr	r3, [pc, #204]	@ (80077a4 <HAL_RCC_OscConfig+0x4cc>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076da:	f7fc fe9f 	bl	800441c <HAL_GetTick>
 80076de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076e0:	e008      	b.n	80076f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076e2:	f7fc fe9b 	bl	800441c <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d901      	bls.n	80076f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e06d      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076f4:	4b29      	ldr	r3, [pc, #164]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1f0      	bne.n	80076e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007708:	d108      	bne.n	800771c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800770a:	4b24      	ldr	r3, [pc, #144]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	4921      	ldr	r1, [pc, #132]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 8007718:	4313      	orrs	r3, r2
 800771a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800771c:	4b1f      	ldr	r3, [pc, #124]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a19      	ldr	r1, [r3, #32]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800772c:	430b      	orrs	r3, r1
 800772e:	491b      	ldr	r1, [pc, #108]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 8007730:	4313      	orrs	r3, r2
 8007732:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007734:	4b1b      	ldr	r3, [pc, #108]	@ (80077a4 <HAL_RCC_OscConfig+0x4cc>)
 8007736:	2201      	movs	r2, #1
 8007738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800773a:	f7fc fe6f 	bl	800441c <HAL_GetTick>
 800773e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007740:	e008      	b.n	8007754 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007742:	f7fc fe6b 	bl	800441c <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d901      	bls.n	8007754 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e03d      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007754:	4b11      	ldr	r3, [pc, #68]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0f0      	beq.n	8007742 <HAL_RCC_OscConfig+0x46a>
 8007760:	e035      	b.n	80077ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007762:	4b10      	ldr	r3, [pc, #64]	@ (80077a4 <HAL_RCC_OscConfig+0x4cc>)
 8007764:	2200      	movs	r2, #0
 8007766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007768:	f7fc fe58 	bl	800441c <HAL_GetTick>
 800776c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800776e:	e008      	b.n	8007782 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007770:	f7fc fe54 	bl	800441c <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b02      	cmp	r3, #2
 800777c:	d901      	bls.n	8007782 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e026      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007782:	4b06      	ldr	r3, [pc, #24]	@ (800779c <HAL_RCC_OscConfig+0x4c4>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1f0      	bne.n	8007770 <HAL_RCC_OscConfig+0x498>
 800778e:	e01e      	b.n	80077ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d107      	bne.n	80077a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e019      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>
 800779c:	40021000 	.word	0x40021000
 80077a0:	40007000 	.word	0x40007000
 80077a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80077a8:	4b0b      	ldr	r3, [pc, #44]	@ (80077d8 <HAL_RCC_OscConfig+0x500>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d106      	bne.n	80077ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d001      	beq.n	80077ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e000      	b.n	80077d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	40021000 	.word	0x40021000

080077dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e0d0      	b.n	8007992 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077f0:	4b6a      	ldr	r3, [pc, #424]	@ (800799c <HAL_RCC_ClockConfig+0x1c0>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0307 	and.w	r3, r3, #7
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d910      	bls.n	8007820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077fe:	4b67      	ldr	r3, [pc, #412]	@ (800799c <HAL_RCC_ClockConfig+0x1c0>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f023 0207 	bic.w	r2, r3, #7
 8007806:	4965      	ldr	r1, [pc, #404]	@ (800799c <HAL_RCC_ClockConfig+0x1c0>)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	4313      	orrs	r3, r2
 800780c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800780e:	4b63      	ldr	r3, [pc, #396]	@ (800799c <HAL_RCC_ClockConfig+0x1c0>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d001      	beq.n	8007820 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e0b8      	b.n	8007992 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d020      	beq.n	800786e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b00      	cmp	r3, #0
 8007836:	d005      	beq.n	8007844 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007838:	4b59      	ldr	r3, [pc, #356]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	4a58      	ldr	r2, [pc, #352]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 800783e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007842:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0308 	and.w	r3, r3, #8
 800784c:	2b00      	cmp	r3, #0
 800784e:	d005      	beq.n	800785c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007850:	4b53      	ldr	r3, [pc, #332]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	4a52      	ldr	r2, [pc, #328]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007856:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800785a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800785c:	4b50      	ldr	r3, [pc, #320]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	494d      	ldr	r1, [pc, #308]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 800786a:	4313      	orrs	r3, r2
 800786c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d040      	beq.n	80078fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d107      	bne.n	8007892 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007882:	4b47      	ldr	r3, [pc, #284]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d115      	bne.n	80078ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e07f      	b.n	8007992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	2b02      	cmp	r3, #2
 8007898:	d107      	bne.n	80078aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800789a:	4b41      	ldr	r3, [pc, #260]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d109      	bne.n	80078ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e073      	b.n	8007992 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078aa:	4b3d      	ldr	r3, [pc, #244]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e06b      	b.n	8007992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078ba:	4b39      	ldr	r3, [pc, #228]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f023 0203 	bic.w	r2, r3, #3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	4936      	ldr	r1, [pc, #216]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078cc:	f7fc fda6 	bl	800441c <HAL_GetTick>
 80078d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078d2:	e00a      	b.n	80078ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078d4:	f7fc fda2 	bl	800441c <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d901      	bls.n	80078ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e053      	b.n	8007992 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ea:	4b2d      	ldr	r3, [pc, #180]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f003 020c 	and.w	r2, r3, #12
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d1eb      	bne.n	80078d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078fc:	4b27      	ldr	r3, [pc, #156]	@ (800799c <HAL_RCC_ClockConfig+0x1c0>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0307 	and.w	r3, r3, #7
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d210      	bcs.n	800792c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800790a:	4b24      	ldr	r3, [pc, #144]	@ (800799c <HAL_RCC_ClockConfig+0x1c0>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f023 0207 	bic.w	r2, r3, #7
 8007912:	4922      	ldr	r1, [pc, #136]	@ (800799c <HAL_RCC_ClockConfig+0x1c0>)
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	4313      	orrs	r3, r2
 8007918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800791a:	4b20      	ldr	r3, [pc, #128]	@ (800799c <HAL_RCC_ClockConfig+0x1c0>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0307 	and.w	r3, r3, #7
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	429a      	cmp	r2, r3
 8007926:	d001      	beq.n	800792c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e032      	b.n	8007992 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0304 	and.w	r3, r3, #4
 8007934:	2b00      	cmp	r3, #0
 8007936:	d008      	beq.n	800794a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007938:	4b19      	ldr	r3, [pc, #100]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	4916      	ldr	r1, [pc, #88]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007946:	4313      	orrs	r3, r2
 8007948:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0308 	and.w	r3, r3, #8
 8007952:	2b00      	cmp	r3, #0
 8007954:	d009      	beq.n	800796a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007956:	4b12      	ldr	r3, [pc, #72]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	490e      	ldr	r1, [pc, #56]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007966:	4313      	orrs	r3, r2
 8007968:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800796a:	f000 f821 	bl	80079b0 <HAL_RCC_GetSysClockFreq>
 800796e:	4602      	mov	r2, r0
 8007970:	4b0b      	ldr	r3, [pc, #44]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	091b      	lsrs	r3, r3, #4
 8007976:	f003 030f 	and.w	r3, r3, #15
 800797a:	490a      	ldr	r1, [pc, #40]	@ (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 800797c:	5ccb      	ldrb	r3, [r1, r3]
 800797e:	fa22 f303 	lsr.w	r3, r2, r3
 8007982:	4a09      	ldr	r2, [pc, #36]	@ (80079a8 <HAL_RCC_ClockConfig+0x1cc>)
 8007984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007986:	4b09      	ldr	r3, [pc, #36]	@ (80079ac <HAL_RCC_ClockConfig+0x1d0>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4618      	mov	r0, r3
 800798c:	f7fc fd04 	bl	8004398 <HAL_InitTick>

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	40022000 	.word	0x40022000
 80079a0:	40021000 	.word	0x40021000
 80079a4:	0800ec24 	.word	0x0800ec24
 80079a8:	20000000 	.word	0x20000000
 80079ac:	20000004 	.word	0x20000004

080079b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	2300      	movs	r3, #0
 80079bc:	60bb      	str	r3, [r7, #8]
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]
 80079c2:	2300      	movs	r3, #0
 80079c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80079ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007a44 <HAL_RCC_GetSysClockFreq+0x94>)
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f003 030c 	and.w	r3, r3, #12
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d002      	beq.n	80079e0 <HAL_RCC_GetSysClockFreq+0x30>
 80079da:	2b08      	cmp	r3, #8
 80079dc:	d003      	beq.n	80079e6 <HAL_RCC_GetSysClockFreq+0x36>
 80079de:	e027      	b.n	8007a30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80079e0:	4b19      	ldr	r3, [pc, #100]	@ (8007a48 <HAL_RCC_GetSysClockFreq+0x98>)
 80079e2:	613b      	str	r3, [r7, #16]
      break;
 80079e4:	e027      	b.n	8007a36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	0c9b      	lsrs	r3, r3, #18
 80079ea:	f003 030f 	and.w	r3, r3, #15
 80079ee:	4a17      	ldr	r2, [pc, #92]	@ (8007a4c <HAL_RCC_GetSysClockFreq+0x9c>)
 80079f0:	5cd3      	ldrb	r3, [r2, r3]
 80079f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d010      	beq.n	8007a20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80079fe:	4b11      	ldr	r3, [pc, #68]	@ (8007a44 <HAL_RCC_GetSysClockFreq+0x94>)
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	0c5b      	lsrs	r3, r3, #17
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	4a11      	ldr	r2, [pc, #68]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007a0a:	5cd3      	ldrb	r3, [r2, r3]
 8007a0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a0d      	ldr	r2, [pc, #52]	@ (8007a48 <HAL_RCC_GetSysClockFreq+0x98>)
 8007a12:	fb03 f202 	mul.w	r2, r3, r2
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a1c:	617b      	str	r3, [r7, #20]
 8007a1e:	e004      	b.n	8007a2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a0c      	ldr	r2, [pc, #48]	@ (8007a54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007a24:	fb02 f303 	mul.w	r3, r2, r3
 8007a28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	613b      	str	r3, [r7, #16]
      break;
 8007a2e:	e002      	b.n	8007a36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007a30:	4b05      	ldr	r3, [pc, #20]	@ (8007a48 <HAL_RCC_GetSysClockFreq+0x98>)
 8007a32:	613b      	str	r3, [r7, #16]
      break;
 8007a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a36:	693b      	ldr	r3, [r7, #16]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	371c      	adds	r7, #28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bc80      	pop	{r7}
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	40021000 	.word	0x40021000
 8007a48:	007a1200 	.word	0x007a1200
 8007a4c:	0800ec3c 	.word	0x0800ec3c
 8007a50:	0800ec4c 	.word	0x0800ec4c
 8007a54:	003d0900 	.word	0x003d0900

08007a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a5c:	4b02      	ldr	r3, [pc, #8]	@ (8007a68 <HAL_RCC_GetHCLKFreq+0x10>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bc80      	pop	{r7}
 8007a66:	4770      	bx	lr
 8007a68:	20000000 	.word	0x20000000

08007a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a70:	f7ff fff2 	bl	8007a58 <HAL_RCC_GetHCLKFreq>
 8007a74:	4602      	mov	r2, r0
 8007a76:	4b05      	ldr	r3, [pc, #20]	@ (8007a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	0a1b      	lsrs	r3, r3, #8
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	4903      	ldr	r1, [pc, #12]	@ (8007a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a82:	5ccb      	ldrb	r3, [r1, r3]
 8007a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40021000 	.word	0x40021000
 8007a90:	0800ec34 	.word	0x0800ec34

08007a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a98:	f7ff ffde 	bl	8007a58 <HAL_RCC_GetHCLKFreq>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	4b05      	ldr	r3, [pc, #20]	@ (8007ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	0adb      	lsrs	r3, r3, #11
 8007aa4:	f003 0307 	and.w	r3, r3, #7
 8007aa8:	4903      	ldr	r1, [pc, #12]	@ (8007ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007aaa:	5ccb      	ldrb	r3, [r1, r3]
 8007aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	40021000 	.word	0x40021000
 8007ab8:	0800ec34 	.word	0x0800ec34

08007abc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8007af0 <RCC_Delay+0x34>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8007af4 <RCC_Delay+0x38>)
 8007aca:	fba2 2303 	umull	r2, r3, r2, r3
 8007ace:	0a5b      	lsrs	r3, r3, #9
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	fb02 f303 	mul.w	r3, r2, r3
 8007ad6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007ad8:	bf00      	nop
  }
  while (Delay --);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	1e5a      	subs	r2, r3, #1
 8007ade:	60fa      	str	r2, [r7, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1f9      	bne.n	8007ad8 <RCC_Delay+0x1c>
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bc80      	pop	{r7}
 8007aee:	4770      	bx	lr
 8007af0:	20000000 	.word	0x20000000
 8007af4:	10624dd3 	.word	0x10624dd3

08007af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	613b      	str	r3, [r7, #16]
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d07d      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007b14:	2300      	movs	r3, #0
 8007b16:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b18:	4b4f      	ldr	r3, [pc, #316]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10d      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b24:	4b4c      	ldr	r3, [pc, #304]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	4a4b      	ldr	r2, [pc, #300]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b2e:	61d3      	str	r3, [r2, #28]
 8007b30:	4b49      	ldr	r3, [pc, #292]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b38:	60bb      	str	r3, [r7, #8]
 8007b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b40:	4b46      	ldr	r3, [pc, #280]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d118      	bne.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b4c:	4b43      	ldr	r3, [pc, #268]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a42      	ldr	r2, [pc, #264]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b58:	f7fc fc60 	bl	800441c <HAL_GetTick>
 8007b5c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b5e:	e008      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b60:	f7fc fc5c 	bl	800441c <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	2b64      	cmp	r3, #100	@ 0x64
 8007b6c:	d901      	bls.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e06d      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b72:	4b3a      	ldr	r3, [pc, #232]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0f0      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b7e:	4b36      	ldr	r3, [pc, #216]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b86:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d02e      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d027      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ba4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007ba8:	2201      	movs	r2, #1
 8007baa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007bac:	4b2c      	ldr	r3, [pc, #176]	@ (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007bb2:	4a29      	ldr	r2, [pc, #164]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d014      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bc2:	f7fc fc2b 	bl	800441c <HAL_GetTick>
 8007bc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bc8:	e00a      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bca:	f7fc fc27 	bl	800441c <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d901      	bls.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e036      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007be0:	4b1d      	ldr	r3, [pc, #116]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d0ee      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bec:	4b1a      	ldr	r3, [pc, #104]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bee:	6a1b      	ldr	r3, [r3, #32]
 8007bf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	4917      	ldr	r1, [pc, #92]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d105      	bne.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c04:	4b14      	ldr	r3, [pc, #80]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c06:	69db      	ldr	r3, [r3, #28]
 8007c08:	4a13      	ldr	r2, [pc, #76]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d008      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	490b      	ldr	r1, [pc, #44]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0310 	and.w	r3, r3, #16
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d008      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c3a:	4b07      	ldr	r3, [pc, #28]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	4904      	ldr	r1, [pc, #16]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	40021000 	.word	0x40021000
 8007c5c:	40007000 	.word	0x40007000
 8007c60:	42420440 	.word	0x42420440

08007c64 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b088      	sub	sp, #32
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	2300      	movs	r3, #0
 8007c72:	61fb      	str	r3, [r7, #28]
 8007c74:	2300      	movs	r3, #0
 8007c76:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b10      	cmp	r3, #16
 8007c84:	d00a      	beq.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b10      	cmp	r3, #16
 8007c8a:	f200 808a 	bhi.w	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d045      	beq.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d075      	beq.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007c9a:	e082      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8007c9c:	4b46      	ldr	r3, [pc, #280]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007ca2:	4b45      	ldr	r3, [pc, #276]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d07b      	beq.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	0c9b      	lsrs	r3, r3, #18
 8007cb2:	f003 030f 	and.w	r3, r3, #15
 8007cb6:	4a41      	ldr	r2, [pc, #260]	@ (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8007cb8:	5cd3      	ldrb	r3, [r2, r3]
 8007cba:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d015      	beq.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007cc6:	4b3c      	ldr	r3, [pc, #240]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	0c5b      	lsrs	r3, r3, #17
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	4a3b      	ldr	r2, [pc, #236]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8007cd2:	5cd3      	ldrb	r3, [r2, r3]
 8007cd4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00d      	beq.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007ce0:	4a38      	ldr	r2, [pc, #224]	@ (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	fb02 f303 	mul.w	r3, r2, r3
 8007cee:	61fb      	str	r3, [r7, #28]
 8007cf0:	e004      	b.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	4a34      	ldr	r2, [pc, #208]	@ (8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8007cf6:	fb02 f303 	mul.w	r3, r2, r3
 8007cfa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d08:	d102      	bne.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	61bb      	str	r3, [r7, #24]
      break;
 8007d0e:	e04a      	b.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	4a2d      	ldr	r2, [pc, #180]	@ (8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007d16:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1a:	085b      	lsrs	r3, r3, #1
 8007d1c:	61bb      	str	r3, [r7, #24]
      break;
 8007d1e:	e042      	b.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8007d20:	4b25      	ldr	r3, [pc, #148]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d30:	d108      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f003 0302 	and.w	r3, r3, #2
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8007d3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d40:	61bb      	str	r3, [r7, #24]
 8007d42:	e01f      	b.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d4e:	d109      	bne.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007d50:	4b19      	ldr	r3, [pc, #100]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d003      	beq.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8007d5c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8007d60:	61bb      	str	r3, [r7, #24]
 8007d62:	e00f      	b.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d6e:	d11c      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007d70:	4b11      	ldr	r3, [pc, #68]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d016      	beq.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8007d7c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007d80:	61bb      	str	r3, [r7, #24]
      break;
 8007d82:	e012      	b.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007d84:	e011      	b.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007d86:	f7ff fe85 	bl	8007a94 <HAL_RCC_GetPCLK2Freq>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	0b9b      	lsrs	r3, r3, #14
 8007d92:	f003 0303 	and.w	r3, r3, #3
 8007d96:	3301      	adds	r3, #1
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9e:	61bb      	str	r3, [r7, #24]
      break;
 8007da0:	e004      	b.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007da2:	bf00      	nop
 8007da4:	e002      	b.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007da6:	bf00      	nop
 8007da8:	e000      	b.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007daa:	bf00      	nop
    }
  }
  return (frequency);
 8007dac:	69bb      	ldr	r3, [r7, #24]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3720      	adds	r7, #32
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	40021000 	.word	0x40021000
 8007dbc:	0800ec50 	.word	0x0800ec50
 8007dc0:	0800ec60 	.word	0x0800ec60
 8007dc4:	007a1200 	.word	0x007a1200
 8007dc8:	003d0900 	.word	0x003d0900
 8007dcc:	aaaaaaab 	.word	0xaaaaaaab

08007dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e041      	b.n	8007e66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d106      	bne.n	8007dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7fc f97e 	bl	80040f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f000 fc18 	bl	8008644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d001      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e03a      	b.n	8007efe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68da      	ldr	r2, [r3, #12]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0201 	orr.w	r2, r2, #1
 8007e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a18      	ldr	r2, [pc, #96]	@ (8007f08 <HAL_TIM_Base_Start_IT+0x98>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d00e      	beq.n	8007ec8 <HAL_TIM_Base_Start_IT+0x58>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb2:	d009      	beq.n	8007ec8 <HAL_TIM_Base_Start_IT+0x58>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a14      	ldr	r2, [pc, #80]	@ (8007f0c <HAL_TIM_Base_Start_IT+0x9c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d004      	beq.n	8007ec8 <HAL_TIM_Base_Start_IT+0x58>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a13      	ldr	r2, [pc, #76]	@ (8007f10 <HAL_TIM_Base_Start_IT+0xa0>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d111      	bne.n	8007eec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f003 0307 	and.w	r3, r3, #7
 8007ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b06      	cmp	r3, #6
 8007ed8:	d010      	beq.n	8007efc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0201 	orr.w	r2, r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eea:	e007      	b.n	8007efc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0201 	orr.w	r2, r2, #1
 8007efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bc80      	pop	{r7}
 8007f06:	4770      	bx	lr
 8007f08:	40012c00 	.word	0x40012c00
 8007f0c:	40000400 	.word	0x40000400
 8007f10:	40000800 	.word	0x40000800

08007f14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e041      	b.n	8007faa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d106      	bne.n	8007f40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f839 	bl	8007fb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	4619      	mov	r1, r3
 8007f52:	4610      	mov	r0, r2
 8007f54:	f000 fb76 	bl	8008644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b083      	sub	sp, #12
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007fba:	bf00      	nop
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bc80      	pop	{r7}
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d109      	bne.n	8007fe8 <HAL_TIM_PWM_Start+0x24>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	bf14      	ite	ne
 8007fe0:	2301      	movne	r3, #1
 8007fe2:	2300      	moveq	r3, #0
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	e022      	b.n	800802e <HAL_TIM_PWM_Start+0x6a>
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d109      	bne.n	8008002 <HAL_TIM_PWM_Start+0x3e>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	bf14      	ite	ne
 8007ffa:	2301      	movne	r3, #1
 8007ffc:	2300      	moveq	r3, #0
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	e015      	b.n	800802e <HAL_TIM_PWM_Start+0x6a>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b08      	cmp	r3, #8
 8008006:	d109      	bne.n	800801c <HAL_TIM_PWM_Start+0x58>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b01      	cmp	r3, #1
 8008012:	bf14      	ite	ne
 8008014:	2301      	movne	r3, #1
 8008016:	2300      	moveq	r3, #0
 8008018:	b2db      	uxtb	r3, r3
 800801a:	e008      	b.n	800802e <HAL_TIM_PWM_Start+0x6a>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b01      	cmp	r3, #1
 8008026:	bf14      	ite	ne
 8008028:	2301      	movne	r3, #1
 800802a:	2300      	moveq	r3, #0
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e05e      	b.n	80080f4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d104      	bne.n	8008046 <HAL_TIM_PWM_Start+0x82>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008044:	e013      	b.n	800806e <HAL_TIM_PWM_Start+0xaa>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b04      	cmp	r3, #4
 800804a:	d104      	bne.n	8008056 <HAL_TIM_PWM_Start+0x92>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2202      	movs	r2, #2
 8008050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008054:	e00b      	b.n	800806e <HAL_TIM_PWM_Start+0xaa>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b08      	cmp	r3, #8
 800805a:	d104      	bne.n	8008066 <HAL_TIM_PWM_Start+0xa2>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008064:	e003      	b.n	800806e <HAL_TIM_PWM_Start+0xaa>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2202      	movs	r2, #2
 800806a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2201      	movs	r2, #1
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fd70 	bl	8008b5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a1e      	ldr	r2, [pc, #120]	@ (80080fc <HAL_TIM_PWM_Start+0x138>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d107      	bne.n	8008096 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008094:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a18      	ldr	r2, [pc, #96]	@ (80080fc <HAL_TIM_PWM_Start+0x138>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d00e      	beq.n	80080be <HAL_TIM_PWM_Start+0xfa>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a8:	d009      	beq.n	80080be <HAL_TIM_PWM_Start+0xfa>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a14      	ldr	r2, [pc, #80]	@ (8008100 <HAL_TIM_PWM_Start+0x13c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d004      	beq.n	80080be <HAL_TIM_PWM_Start+0xfa>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a12      	ldr	r2, [pc, #72]	@ (8008104 <HAL_TIM_PWM_Start+0x140>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d111      	bne.n	80080e2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f003 0307 	and.w	r3, r3, #7
 80080c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2b06      	cmp	r3, #6
 80080ce:	d010      	beq.n	80080f2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f042 0201 	orr.w	r2, r2, #1
 80080de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080e0:	e007      	b.n	80080f2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f042 0201 	orr.w	r2, r2, #1
 80080f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	40012c00 	.word	0x40012c00
 8008100:	40000400 	.word	0x40000400
 8008104:	40000800 	.word	0x40000800

08008108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d020      	beq.n	800816c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f003 0302 	and.w	r3, r3, #2
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01b      	beq.n	800816c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f06f 0202 	mvn.w	r2, #2
 800813c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	f003 0303 	and.w	r3, r3, #3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fa5a 	bl	800860c <HAL_TIM_IC_CaptureCallback>
 8008158:	e005      	b.n	8008166 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fa4d 	bl	80085fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fa5c 	bl	800861e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f003 0304 	and.w	r3, r3, #4
 8008172:	2b00      	cmp	r3, #0
 8008174:	d020      	beq.n	80081b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f003 0304 	and.w	r3, r3, #4
 800817c:	2b00      	cmp	r3, #0
 800817e:	d01b      	beq.n	80081b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f06f 0204 	mvn.w	r2, #4
 8008188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2202      	movs	r2, #2
 800818e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fa34 	bl	800860c <HAL_TIM_IC_CaptureCallback>
 80081a4:	e005      	b.n	80081b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fa27 	bl	80085fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fa36 	bl	800861e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f003 0308 	and.w	r3, r3, #8
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d020      	beq.n	8008204 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f003 0308 	and.w	r3, r3, #8
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d01b      	beq.n	8008204 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f06f 0208 	mvn.w	r2, #8
 80081d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2204      	movs	r2, #4
 80081da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	f003 0303 	and.w	r3, r3, #3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fa0e 	bl	800860c <HAL_TIM_IC_CaptureCallback>
 80081f0:	e005      	b.n	80081fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fa01 	bl	80085fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fa10 	bl	800861e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	f003 0310 	and.w	r3, r3, #16
 800820a:	2b00      	cmp	r3, #0
 800820c:	d020      	beq.n	8008250 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f003 0310 	and.w	r3, r3, #16
 8008214:	2b00      	cmp	r3, #0
 8008216:	d01b      	beq.n	8008250 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f06f 0210 	mvn.w	r2, #16
 8008220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2208      	movs	r2, #8
 8008226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f9e8 	bl	800860c <HAL_TIM_IC_CaptureCallback>
 800823c:	e005      	b.n	800824a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f9db 	bl	80085fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f9ea 	bl	800861e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00c      	beq.n	8008274 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d007      	beq.n	8008274 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f06f 0201 	mvn.w	r2, #1
 800826c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7fa fa24 	bl	80026bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00c      	beq.n	8008298 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008284:	2b00      	cmp	r3, #0
 8008286:	d007      	beq.n	8008298 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fd3e 	bl	8008d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00c      	beq.n	80082bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d007      	beq.n	80082bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f9ba 	bl	8008630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f003 0320 	and.w	r3, r3, #32
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00c      	beq.n	80082e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f003 0320 	and.w	r3, r3, #32
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d007      	beq.n	80082e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f06f 0220 	mvn.w	r2, #32
 80082d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fd11 	bl	8008d02 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082e0:	bf00      	nop
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d101      	bne.n	8008306 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008302:	2302      	movs	r3, #2
 8008304:	e0ae      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b0c      	cmp	r3, #12
 8008312:	f200 809f 	bhi.w	8008454 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008316:	a201      	add	r2, pc, #4	@ (adr r2, 800831c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831c:	08008351 	.word	0x08008351
 8008320:	08008455 	.word	0x08008455
 8008324:	08008455 	.word	0x08008455
 8008328:	08008455 	.word	0x08008455
 800832c:	08008391 	.word	0x08008391
 8008330:	08008455 	.word	0x08008455
 8008334:	08008455 	.word	0x08008455
 8008338:	08008455 	.word	0x08008455
 800833c:	080083d3 	.word	0x080083d3
 8008340:	08008455 	.word	0x08008455
 8008344:	08008455 	.word	0x08008455
 8008348:	08008455 	.word	0x08008455
 800834c:	08008413 	.word	0x08008413
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68b9      	ldr	r1, [r7, #8]
 8008356:	4618      	mov	r0, r3
 8008358:	f000 f9e2 	bl	8008720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	699a      	ldr	r2, [r3, #24]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f042 0208 	orr.w	r2, r2, #8
 800836a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699a      	ldr	r2, [r3, #24]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f022 0204 	bic.w	r2, r2, #4
 800837a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6999      	ldr	r1, [r3, #24]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	691a      	ldr	r2, [r3, #16]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	619a      	str	r2, [r3, #24]
      break;
 800838e:	e064      	b.n	800845a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68b9      	ldr	r1, [r7, #8]
 8008396:	4618      	mov	r0, r3
 8008398:	f000 fa28 	bl	80087ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	699a      	ldr	r2, [r3, #24]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6999      	ldr	r1, [r3, #24]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	021a      	lsls	r2, r3, #8
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	619a      	str	r2, [r3, #24]
      break;
 80083d0:	e043      	b.n	800845a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68b9      	ldr	r1, [r7, #8]
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 fa71 	bl	80088c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69da      	ldr	r2, [r3, #28]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f042 0208 	orr.w	r2, r2, #8
 80083ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	69da      	ldr	r2, [r3, #28]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f022 0204 	bic.w	r2, r2, #4
 80083fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	69d9      	ldr	r1, [r3, #28]
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	691a      	ldr	r2, [r3, #16]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	430a      	orrs	r2, r1
 800840e:	61da      	str	r2, [r3, #28]
      break;
 8008410:	e023      	b.n	800845a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68b9      	ldr	r1, [r7, #8]
 8008418:	4618      	mov	r0, r3
 800841a:	f000 fabb 	bl	8008994 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	69da      	ldr	r2, [r3, #28]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800842c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69da      	ldr	r2, [r3, #28]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800843c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69d9      	ldr	r1, [r3, #28]
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	021a      	lsls	r2, r3, #8
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	61da      	str	r2, [r3, #28]
      break;
 8008452:	e002      	b.n	800845a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	75fb      	strb	r3, [r7, #23]
      break;
 8008458:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008462:	7dfb      	ldrb	r3, [r7, #23]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008480:	2b01      	cmp	r3, #1
 8008482:	d101      	bne.n	8008488 <HAL_TIM_ConfigClockSource+0x1c>
 8008484:	2302      	movs	r3, #2
 8008486:	e0b4      	b.n	80085f2 <HAL_TIM_ConfigClockSource+0x186>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80084a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084c0:	d03e      	beq.n	8008540 <HAL_TIM_ConfigClockSource+0xd4>
 80084c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084c6:	f200 8087 	bhi.w	80085d8 <HAL_TIM_ConfigClockSource+0x16c>
 80084ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084ce:	f000 8086 	beq.w	80085de <HAL_TIM_ConfigClockSource+0x172>
 80084d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084d6:	d87f      	bhi.n	80085d8 <HAL_TIM_ConfigClockSource+0x16c>
 80084d8:	2b70      	cmp	r3, #112	@ 0x70
 80084da:	d01a      	beq.n	8008512 <HAL_TIM_ConfigClockSource+0xa6>
 80084dc:	2b70      	cmp	r3, #112	@ 0x70
 80084de:	d87b      	bhi.n	80085d8 <HAL_TIM_ConfigClockSource+0x16c>
 80084e0:	2b60      	cmp	r3, #96	@ 0x60
 80084e2:	d050      	beq.n	8008586 <HAL_TIM_ConfigClockSource+0x11a>
 80084e4:	2b60      	cmp	r3, #96	@ 0x60
 80084e6:	d877      	bhi.n	80085d8 <HAL_TIM_ConfigClockSource+0x16c>
 80084e8:	2b50      	cmp	r3, #80	@ 0x50
 80084ea:	d03c      	beq.n	8008566 <HAL_TIM_ConfigClockSource+0xfa>
 80084ec:	2b50      	cmp	r3, #80	@ 0x50
 80084ee:	d873      	bhi.n	80085d8 <HAL_TIM_ConfigClockSource+0x16c>
 80084f0:	2b40      	cmp	r3, #64	@ 0x40
 80084f2:	d058      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x13a>
 80084f4:	2b40      	cmp	r3, #64	@ 0x40
 80084f6:	d86f      	bhi.n	80085d8 <HAL_TIM_ConfigClockSource+0x16c>
 80084f8:	2b30      	cmp	r3, #48	@ 0x30
 80084fa:	d064      	beq.n	80085c6 <HAL_TIM_ConfigClockSource+0x15a>
 80084fc:	2b30      	cmp	r3, #48	@ 0x30
 80084fe:	d86b      	bhi.n	80085d8 <HAL_TIM_ConfigClockSource+0x16c>
 8008500:	2b20      	cmp	r3, #32
 8008502:	d060      	beq.n	80085c6 <HAL_TIM_ConfigClockSource+0x15a>
 8008504:	2b20      	cmp	r3, #32
 8008506:	d867      	bhi.n	80085d8 <HAL_TIM_ConfigClockSource+0x16c>
 8008508:	2b00      	cmp	r3, #0
 800850a:	d05c      	beq.n	80085c6 <HAL_TIM_ConfigClockSource+0x15a>
 800850c:	2b10      	cmp	r3, #16
 800850e:	d05a      	beq.n	80085c6 <HAL_TIM_ConfigClockSource+0x15a>
 8008510:	e062      	b.n	80085d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008522:	f000 fafc 	bl	8008b1e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008534:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	609a      	str	r2, [r3, #8]
      break;
 800853e:	e04f      	b.n	80085e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008550:	f000 fae5 	bl	8008b1e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008562:	609a      	str	r2, [r3, #8]
      break;
 8008564:	e03c      	b.n	80085e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008572:	461a      	mov	r2, r3
 8008574:	f000 fa5c 	bl	8008a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2150      	movs	r1, #80	@ 0x50
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fab3 	bl	8008aea <TIM_ITRx_SetConfig>
      break;
 8008584:	e02c      	b.n	80085e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008592:	461a      	mov	r2, r3
 8008594:	f000 fa7a 	bl	8008a8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2160      	movs	r1, #96	@ 0x60
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 faa3 	bl	8008aea <TIM_ITRx_SetConfig>
      break;
 80085a4:	e01c      	b.n	80085e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085b2:	461a      	mov	r2, r3
 80085b4:	f000 fa3c 	bl	8008a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2140      	movs	r1, #64	@ 0x40
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fa93 	bl	8008aea <TIM_ITRx_SetConfig>
      break;
 80085c4:	e00c      	b.n	80085e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f000 fa8a 	bl	8008aea <TIM_ITRx_SetConfig>
      break;
 80085d6:	e003      	b.n	80085e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	73fb      	strb	r3, [r7, #15]
      break;
 80085dc:	e000      	b.n	80085e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80085de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008602:	bf00      	nop
 8008604:	370c      	adds	r7, #12
 8008606:	46bd      	mov	sp, r7
 8008608:	bc80      	pop	{r7}
 800860a:	4770      	bx	lr

0800860c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	bc80      	pop	{r7}
 800861c:	4770      	bx	lr

0800861e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800861e:	b480      	push	{r7}
 8008620:	b083      	sub	sp, #12
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr

08008630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	bc80      	pop	{r7}
 8008640:	4770      	bx	lr
	...

08008644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a2f      	ldr	r2, [pc, #188]	@ (8008714 <TIM_Base_SetConfig+0xd0>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00b      	beq.n	8008674 <TIM_Base_SetConfig+0x30>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008662:	d007      	beq.n	8008674 <TIM_Base_SetConfig+0x30>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a2c      	ldr	r2, [pc, #176]	@ (8008718 <TIM_Base_SetConfig+0xd4>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d003      	beq.n	8008674 <TIM_Base_SetConfig+0x30>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a2b      	ldr	r2, [pc, #172]	@ (800871c <TIM_Base_SetConfig+0xd8>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d108      	bne.n	8008686 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800867a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	4313      	orrs	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a22      	ldr	r2, [pc, #136]	@ (8008714 <TIM_Base_SetConfig+0xd0>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d00b      	beq.n	80086a6 <TIM_Base_SetConfig+0x62>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008694:	d007      	beq.n	80086a6 <TIM_Base_SetConfig+0x62>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a1f      	ldr	r2, [pc, #124]	@ (8008718 <TIM_Base_SetConfig+0xd4>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d003      	beq.n	80086a6 <TIM_Base_SetConfig+0x62>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a1e      	ldr	r2, [pc, #120]	@ (800871c <TIM_Base_SetConfig+0xd8>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d108      	bne.n	80086b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	689a      	ldr	r2, [r3, #8]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a0d      	ldr	r2, [pc, #52]	@ (8008714 <TIM_Base_SetConfig+0xd0>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d103      	bne.n	80086ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	691a      	ldr	r2, [r3, #16]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d005      	beq.n	800870a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	f023 0201 	bic.w	r2, r3, #1
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	611a      	str	r2, [r3, #16]
  }
}
 800870a:	bf00      	nop
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	bc80      	pop	{r7}
 8008712:	4770      	bx	lr
 8008714:	40012c00 	.word	0x40012c00
 8008718:	40000400 	.word	0x40000400
 800871c:	40000800 	.word	0x40000800

08008720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008720:	b480      	push	{r7}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	f023 0201 	bic.w	r2, r3, #1
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800874e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f023 0303 	bic.w	r3, r3, #3
 8008756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	4313      	orrs	r3, r2
 8008760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f023 0302 	bic.w	r3, r3, #2
 8008768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	4313      	orrs	r3, r2
 8008772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a1c      	ldr	r2, [pc, #112]	@ (80087e8 <TIM_OC1_SetConfig+0xc8>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d10c      	bne.n	8008796 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f023 0308 	bic.w	r3, r3, #8
 8008782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	4313      	orrs	r3, r2
 800878c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f023 0304 	bic.w	r3, r3, #4
 8008794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a13      	ldr	r2, [pc, #76]	@ (80087e8 <TIM_OC1_SetConfig+0xc8>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d111      	bne.n	80087c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	4313      	orrs	r3, r2
 80087c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	685a      	ldr	r2, [r3, #4]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	621a      	str	r2, [r3, #32]
}
 80087dc:	bf00      	nop
 80087de:	371c      	adds	r7, #28
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bc80      	pop	{r7}
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	40012c00 	.word	0x40012c00

080087ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b087      	sub	sp, #28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	f023 0210 	bic.w	r2, r3, #16
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800881a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	021b      	lsls	r3, r3, #8
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	4313      	orrs	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f023 0320 	bic.w	r3, r3, #32
 8008836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	011b      	lsls	r3, r3, #4
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	4313      	orrs	r3, r2
 8008842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a1d      	ldr	r2, [pc, #116]	@ (80088bc <TIM_OC2_SetConfig+0xd0>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d10d      	bne.n	8008868 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	011b      	lsls	r3, r3, #4
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	4313      	orrs	r3, r2
 800885e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008866:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a14      	ldr	r2, [pc, #80]	@ (80088bc <TIM_OC2_SetConfig+0xd0>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d113      	bne.n	8008898 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800887e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	695b      	ldr	r3, [r3, #20]
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	4313      	orrs	r3, r2
 800888a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	621a      	str	r2, [r3, #32]
}
 80088b2:	bf00      	nop
 80088b4:	371c      	adds	r7, #28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bc80      	pop	{r7}
 80088ba:	4770      	bx	lr
 80088bc:	40012c00 	.word	0x40012c00

080088c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	69db      	ldr	r3, [r3, #28]
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 0303 	bic.w	r3, r3, #3
 80088f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	4313      	orrs	r3, r2
 8008900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	021b      	lsls	r3, r3, #8
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	4313      	orrs	r3, r2
 8008914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a1d      	ldr	r2, [pc, #116]	@ (8008990 <TIM_OC3_SetConfig+0xd0>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d10d      	bne.n	800893a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	021b      	lsls	r3, r3, #8
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	4313      	orrs	r3, r2
 8008930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a14      	ldr	r2, [pc, #80]	@ (8008990 <TIM_OC3_SetConfig+0xd0>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d113      	bne.n	800896a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	011b      	lsls	r3, r3, #4
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	4313      	orrs	r3, r2
 800895c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	011b      	lsls	r3, r3, #4
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	4313      	orrs	r3, r2
 8008968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	685a      	ldr	r2, [r3, #4]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	621a      	str	r2, [r3, #32]
}
 8008984:	bf00      	nop
 8008986:	371c      	adds	r7, #28
 8008988:	46bd      	mov	sp, r7
 800898a:	bc80      	pop	{r7}
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	40012c00 	.word	0x40012c00

08008994 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008994:	b480      	push	{r7}
 8008996:	b087      	sub	sp, #28
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	021b      	lsls	r3, r3, #8
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80089de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	031b      	lsls	r3, r3, #12
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a0f      	ldr	r2, [pc, #60]	@ (8008a2c <TIM_OC4_SetConfig+0x98>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d109      	bne.n	8008a08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	019b      	lsls	r3, r3, #6
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	621a      	str	r2, [r3, #32]
}
 8008a22:	bf00      	nop
 8008a24:	371c      	adds	r7, #28
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bc80      	pop	{r7}
 8008a2a:	4770      	bx	lr
 8008a2c:	40012c00 	.word	0x40012c00

08008a30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6a1b      	ldr	r3, [r3, #32]
 8008a40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	f023 0201 	bic.w	r2, r3, #1
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	011b      	lsls	r3, r3, #4
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f023 030a 	bic.w	r3, r3, #10
 8008a6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	621a      	str	r2, [r3, #32]
}
 8008a82:	bf00      	nop
 8008a84:	371c      	adds	r7, #28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr

08008a8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6a1b      	ldr	r3, [r3, #32]
 8008a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	f023 0210 	bic.w	r2, r3, #16
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	031b      	lsls	r3, r3, #12
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	011b      	lsls	r3, r3, #4
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	621a      	str	r2, [r3, #32]
}
 8008ae0:	bf00      	nop
 8008ae2:	371c      	adds	r7, #28
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bc80      	pop	{r7}
 8008ae8:	4770      	bx	lr

08008aea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b085      	sub	sp, #20
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	f043 0307 	orr.w	r3, r3, #7
 8008b0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	609a      	str	r2, [r3, #8]
}
 8008b14:	bf00      	nop
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bc80      	pop	{r7}
 8008b1c:	4770      	bx	lr

08008b1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b087      	sub	sp, #28
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	60f8      	str	r0, [r7, #12]
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	607a      	str	r2, [r7, #4]
 8008b2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	021a      	lsls	r2, r3, #8
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	431a      	orrs	r2, r3
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	609a      	str	r2, [r3, #8]
}
 8008b52:	bf00      	nop
 8008b54:	371c      	adds	r7, #28
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bc80      	pop	{r7}
 8008b5a:	4770      	bx	lr

08008b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	f003 031f 	and.w	r3, r3, #31
 8008b6e:	2201      	movs	r2, #1
 8008b70:	fa02 f303 	lsl.w	r3, r2, r3
 8008b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6a1a      	ldr	r2, [r3, #32]
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	43db      	mvns	r3, r3
 8008b7e:	401a      	ands	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6a1a      	ldr	r2, [r3, #32]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	f003 031f 	and.w	r3, r3, #31
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	fa01 f303 	lsl.w	r3, r1, r3
 8008b94:	431a      	orrs	r2, r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	621a      	str	r2, [r3, #32]
}
 8008b9a:	bf00      	nop
 8008b9c:	371c      	adds	r7, #28
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bc80      	pop	{r7}
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d101      	bne.n	8008bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bb8:	2302      	movs	r3, #2
 8008bba:	e046      	b.n	8008c4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008be2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a16      	ldr	r2, [pc, #88]	@ (8008c54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d00e      	beq.n	8008c1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c08:	d009      	beq.n	8008c1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a12      	ldr	r2, [pc, #72]	@ (8008c58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d004      	beq.n	8008c1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a10      	ldr	r2, [pc, #64]	@ (8008c5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d10c      	bne.n	8008c38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bc80      	pop	{r7}
 8008c52:	4770      	bx	lr
 8008c54:	40012c00 	.word	0x40012c00
 8008c58:	40000400 	.word	0x40000400
 8008c5c:	40000800 	.word	0x40000800

08008c60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d101      	bne.n	8008c7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e03d      	b.n	8008cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	695b      	ldr	r3, [r3, #20]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bc80      	pop	{r7}
 8008d00:	4770      	bx	lr

08008d02 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b083      	sub	sp, #12
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d0a:	bf00      	nop
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bc80      	pop	{r7}
 8008d12:	4770      	bx	lr

08008d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bc80      	pop	{r7}
 8008d24:	4770      	bx	lr

08008d26 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b082      	sub	sp, #8
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d101      	bne.n	8008d38 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e042      	b.n	8008dbe <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d106      	bne.n	8008d52 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7fb fa6b 	bl	8004228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2224      	movs	r2, #36	@ 0x24
 8008d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68da      	ldr	r2, [r3, #12]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d68:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fe62 	bl	8009a34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	691a      	ldr	r2, [r3, #16]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d7e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	695a      	ldr	r2, [r3, #20]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d8e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68da      	ldr	r2, [r3, #12]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d9e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2220      	movs	r2, #32
 8008daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2220      	movs	r2, #32
 8008db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b20      	cmp	r3, #32
 8008dde:	d112      	bne.n	8008e06 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <HAL_UART_Receive_DMA+0x26>
 8008de6:	88fb      	ldrh	r3, [r7, #6]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e00b      	b.n	8008e08 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008df6:	88fb      	ldrh	r3, [r7, #6]
 8008df8:	461a      	mov	r2, r3
 8008dfa:	68b9      	ldr	r1, [r7, #8]
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 fbbd 	bl	800957c <UART_Start_Receive_DMA>
 8008e02:	4603      	mov	r3, r0
 8008e04:	e000      	b.n	8008e08 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008e06:	2302      	movs	r3, #2
  }
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b0ba      	sub	sp, #232	@ 0xe8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e46:	f003 030f 	and.w	r3, r3, #15
 8008e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008e4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10f      	bne.n	8008e76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e5a:	f003 0320 	and.w	r3, r3, #32
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d009      	beq.n	8008e76 <HAL_UART_IRQHandler+0x66>
 8008e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e66:	f003 0320 	and.w	r3, r3, #32
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fd22 	bl	80098b8 <UART_Receive_IT>
      return;
 8008e74:	e25b      	b.n	800932e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 80de 	beq.w	800903c <HAL_UART_IRQHandler+0x22c>
 8008e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d106      	bne.n	8008e9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f000 80d1 	beq.w	800903c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00b      	beq.n	8008ebe <HAL_UART_IRQHandler+0xae>
 8008ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d005      	beq.n	8008ebe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eb6:	f043 0201 	orr.w	r2, r3, #1
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ec2:	f003 0304 	and.w	r3, r3, #4
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00b      	beq.n	8008ee2 <HAL_UART_IRQHandler+0xd2>
 8008eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d005      	beq.n	8008ee2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eda:	f043 0202 	orr.w	r2, r3, #2
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ee6:	f003 0302 	and.w	r3, r3, #2
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00b      	beq.n	8008f06 <HAL_UART_IRQHandler+0xf6>
 8008eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d005      	beq.n	8008f06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008efe:	f043 0204 	orr.w	r2, r3, #4
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f0a:	f003 0308 	and.w	r3, r3, #8
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d011      	beq.n	8008f36 <HAL_UART_IRQHandler+0x126>
 8008f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f16:	f003 0320 	and.w	r3, r3, #32
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d105      	bne.n	8008f2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d005      	beq.n	8008f36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f2e:	f043 0208 	orr.w	r2, r3, #8
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f000 81f2 	beq.w	8009324 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f44:	f003 0320 	and.w	r3, r3, #32
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d008      	beq.n	8008f5e <HAL_UART_IRQHandler+0x14e>
 8008f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f50:	f003 0320 	and.w	r3, r3, #32
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fcad 	bl	80098b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	695b      	ldr	r3, [r3, #20]
 8008f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	bf14      	ite	ne
 8008f6c:	2301      	movne	r3, #1
 8008f6e:	2300      	moveq	r3, #0
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f7a:	f003 0308 	and.w	r3, r3, #8
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d103      	bne.n	8008f8a <HAL_UART_IRQHandler+0x17a>
 8008f82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d04f      	beq.n	800902a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fbb7 	bl	80096fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d041      	beq.n	8009022 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	3314      	adds	r3, #20
 8008fa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fac:	e853 3f00 	ldrex	r3, [r3]
 8008fb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	3314      	adds	r3, #20
 8008fc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008fca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008fce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008fd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008fda:	e841 2300 	strex	r3, r2, [r1]
 8008fde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1d9      	bne.n	8008f9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d013      	beq.n	800901a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff6:	4a7e      	ldr	r2, [pc, #504]	@ (80091f0 <HAL_UART_IRQHandler+0x3e0>)
 8008ff8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fc f898 	bl	8005134 <HAL_DMA_Abort_IT>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d016      	beq.n	8009038 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800900e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009018:	e00e      	b.n	8009038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f99c 	bl	8009358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009020:	e00a      	b.n	8009038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f998 	bl	8009358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009028:	e006      	b.n	8009038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f994 	bl	8009358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009036:	e175      	b.n	8009324 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009038:	bf00      	nop
    return;
 800903a:	e173      	b.n	8009324 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009040:	2b01      	cmp	r3, #1
 8009042:	f040 814f 	bne.w	80092e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800904a:	f003 0310 	and.w	r3, r3, #16
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 8148 	beq.w	80092e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009058:	f003 0310 	and.w	r3, r3, #16
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 8141 	beq.w	80092e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009062:	2300      	movs	r3, #0
 8009064:	60bb      	str	r3, [r7, #8]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	60bb      	str	r3, [r7, #8]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	60bb      	str	r3, [r7, #8]
 8009076:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 80b6 	beq.w	80091f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009094:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009098:	2b00      	cmp	r3, #0
 800909a:	f000 8145 	beq.w	8009328 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80090a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090a6:	429a      	cmp	r2, r3
 80090a8:	f080 813e 	bcs.w	8009328 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	2b20      	cmp	r3, #32
 80090bc:	f000 8088 	beq.w	80091d0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	330c      	adds	r3, #12
 80090c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80090d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	330c      	adds	r3, #12
 80090e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80090ec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80090f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80090f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090fc:	e841 2300 	strex	r3, r2, [r1]
 8009100:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009104:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1d9      	bne.n	80090c0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3314      	adds	r3, #20
 8009112:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009114:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009116:	e853 3f00 	ldrex	r3, [r3]
 800911a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800911c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800911e:	f023 0301 	bic.w	r3, r3, #1
 8009122:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3314      	adds	r3, #20
 800912c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009130:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009134:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009136:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009138:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800913c:	e841 2300 	strex	r3, r2, [r1]
 8009140:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009142:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e1      	bne.n	800910c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	3314      	adds	r3, #20
 800914e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009150:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009152:	e853 3f00 	ldrex	r3, [r3]
 8009156:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009158:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800915a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800915e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3314      	adds	r3, #20
 8009168:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800916c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800916e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009172:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009174:	e841 2300 	strex	r3, r2, [r1]
 8009178:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800917a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e3      	bne.n	8009148 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2220      	movs	r2, #32
 8009184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	330c      	adds	r3, #12
 8009194:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009198:	e853 3f00 	ldrex	r3, [r3]
 800919c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800919e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091a0:	f023 0310 	bic.w	r3, r3, #16
 80091a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	330c      	adds	r3, #12
 80091ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80091b2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80091b4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091ba:	e841 2300 	strex	r3, r2, [r1]
 80091be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1e3      	bne.n	800918e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fb ff76 	bl	80050bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2202      	movs	r2, #2
 80091d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091de:	b29b      	uxth	r3, r3
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	4619      	mov	r1, r3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f8bf 	bl	800936a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091ec:	e09c      	b.n	8009328 <HAL_UART_IRQHandler+0x518>
 80091ee:	bf00      	nop
 80091f0:	080097c3 	.word	0x080097c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009208:	b29b      	uxth	r3, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	f000 808e 	beq.w	800932c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009214:	2b00      	cmp	r3, #0
 8009216:	f000 8089 	beq.w	800932c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	330c      	adds	r3, #12
 8009220:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009224:	e853 3f00 	ldrex	r3, [r3]
 8009228:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800922a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800922c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009230:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	330c      	adds	r3, #12
 800923a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800923e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009240:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009242:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009244:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009246:	e841 2300 	strex	r3, r2, [r1]
 800924a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800924c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1e3      	bne.n	800921a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3314      	adds	r3, #20
 8009258:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925c:	e853 3f00 	ldrex	r3, [r3]
 8009260:	623b      	str	r3, [r7, #32]
   return(result);
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	f023 0301 	bic.w	r3, r3, #1
 8009268:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	3314      	adds	r3, #20
 8009272:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009276:	633a      	str	r2, [r7, #48]	@ 0x30
 8009278:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800927c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800927e:	e841 2300 	strex	r3, r2, [r1]
 8009282:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1e3      	bne.n	8009252 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2220      	movs	r2, #32
 800928e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	330c      	adds	r3, #12
 800929e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	e853 3f00 	ldrex	r3, [r3]
 80092a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f023 0310 	bic.w	r3, r3, #16
 80092ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	330c      	adds	r3, #12
 80092b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80092bc:	61fa      	str	r2, [r7, #28]
 80092be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c0:	69b9      	ldr	r1, [r7, #24]
 80092c2:	69fa      	ldr	r2, [r7, #28]
 80092c4:	e841 2300 	strex	r3, r2, [r1]
 80092c8:	617b      	str	r3, [r7, #20]
   return(result);
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1e3      	bne.n	8009298 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f844 	bl	800936a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092e2:	e023      	b.n	800932c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d009      	beq.n	8009304 <HAL_UART_IRQHandler+0x4f4>
 80092f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d003      	beq.n	8009304 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fa74 	bl	80097ea <UART_Transmit_IT>
    return;
 8009302:	e014      	b.n	800932e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00e      	beq.n	800932e <HAL_UART_IRQHandler+0x51e>
 8009310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009318:	2b00      	cmp	r3, #0
 800931a:	d008      	beq.n	800932e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fab3 	bl	8009888 <UART_EndTransmit_IT>
    return;
 8009322:	e004      	b.n	800932e <HAL_UART_IRQHandler+0x51e>
    return;
 8009324:	bf00      	nop
 8009326:	e002      	b.n	800932e <HAL_UART_IRQHandler+0x51e>
      return;
 8009328:	bf00      	nop
 800932a:	e000      	b.n	800932e <HAL_UART_IRQHandler+0x51e>
      return;
 800932c:	bf00      	nop
  }
}
 800932e:	37e8      	adds	r7, #232	@ 0xe8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	bc80      	pop	{r7}
 8009344:	4770      	bx	lr

08009346 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009346:	b480      	push	{r7}
 8009348:	b083      	sub	sp, #12
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800934e:	bf00      	nop
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	bc80      	pop	{r7}
 8009356:	4770      	bx	lr

08009358 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	bc80      	pop	{r7}
 8009368:	4770      	bx	lr

0800936a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800936a:	b480      	push	{r7}
 800936c:	b083      	sub	sp, #12
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	460b      	mov	r3, r1
 8009374:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009376:	bf00      	nop
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	bc80      	pop	{r7}
 800937e:	4770      	bx	lr

08009380 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b09c      	sub	sp, #112	@ 0x70
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 0320 	and.w	r3, r3, #32
 8009398:	2b00      	cmp	r3, #0
 800939a:	d172      	bne.n	8009482 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800939c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800939e:	2200      	movs	r2, #0
 80093a0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	330c      	adds	r3, #12
 80093a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093ac:	e853 3f00 	ldrex	r3, [r3]
 80093b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80093b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	330c      	adds	r3, #12
 80093c0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80093c2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80093c4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80093c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093ca:	e841 2300 	strex	r3, r2, [r1]
 80093ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80093d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1e5      	bne.n	80093a2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3314      	adds	r3, #20
 80093dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e0:	e853 3f00 	ldrex	r3, [r3]
 80093e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e8:	f023 0301 	bic.w	r3, r3, #1
 80093ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80093ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	3314      	adds	r3, #20
 80093f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80093f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80093f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093fe:	e841 2300 	strex	r3, r2, [r1]
 8009402:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1e5      	bne.n	80093d6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800940a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3314      	adds	r3, #20
 8009410:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009414:	e853 3f00 	ldrex	r3, [r3]
 8009418:	623b      	str	r3, [r7, #32]
   return(result);
 800941a:	6a3b      	ldr	r3, [r7, #32]
 800941c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009420:	663b      	str	r3, [r7, #96]	@ 0x60
 8009422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3314      	adds	r3, #20
 8009428:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800942a:	633a      	str	r2, [r7, #48]	@ 0x30
 800942c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009432:	e841 2300 	strex	r3, r2, [r1]
 8009436:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1e5      	bne.n	800940a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800943e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009440:	2220      	movs	r2, #32
 8009442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800944a:	2b01      	cmp	r3, #1
 800944c:	d119      	bne.n	8009482 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800944e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	330c      	adds	r3, #12
 8009454:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	e853 3f00 	ldrex	r3, [r3]
 800945c:	60fb      	str	r3, [r7, #12]
   return(result);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f023 0310 	bic.w	r3, r3, #16
 8009464:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	330c      	adds	r3, #12
 800946c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800946e:	61fa      	str	r2, [r7, #28]
 8009470:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	69b9      	ldr	r1, [r7, #24]
 8009474:	69fa      	ldr	r2, [r7, #28]
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	617b      	str	r3, [r7, #20]
   return(result);
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1e5      	bne.n	800944e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009484:	2200      	movs	r2, #0
 8009486:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800948a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800948c:	2b01      	cmp	r3, #1
 800948e:	d106      	bne.n	800949e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009492:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009494:	4619      	mov	r1, r3
 8009496:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009498:	f7ff ff67 	bl	800936a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800949c:	e002      	b.n	80094a4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800949e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80094a0:	f7f8 fc08 	bl	8001cb4 <HAL_UART_RxCpltCallback>
}
 80094a4:	bf00      	nop
 80094a6:	3770      	adds	r7, #112	@ 0x70
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2201      	movs	r2, #1
 80094be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d108      	bne.n	80094da <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80094cc:	085b      	lsrs	r3, r3, #1
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	4619      	mov	r1, r3
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f7ff ff49 	bl	800936a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094d8:	e002      	b.n	80094e0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f7ff ff33 	bl	8009346 <HAL_UART_RxHalfCpltCallback>
}
 80094e0:	bf00      	nop
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	695b      	ldr	r3, [r3, #20]
 8009500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009504:	2b00      	cmp	r3, #0
 8009506:	bf14      	ite	ne
 8009508:	2301      	movne	r3, #1
 800950a:	2300      	moveq	r3, #0
 800950c:	b2db      	uxtb	r3, r3
 800950e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b21      	cmp	r3, #33	@ 0x21
 800951a:	d108      	bne.n	800952e <UART_DMAError+0x46>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d005      	beq.n	800952e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	2200      	movs	r2, #0
 8009526:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009528:	68b8      	ldr	r0, [r7, #8]
 800952a:	f000 f8c1 	bl	80096b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	695b      	ldr	r3, [r3, #20]
 8009534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009538:	2b00      	cmp	r3, #0
 800953a:	bf14      	ite	ne
 800953c:	2301      	movne	r3, #1
 800953e:	2300      	moveq	r3, #0
 8009540:	b2db      	uxtb	r3, r3
 8009542:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800954a:	b2db      	uxtb	r3, r3
 800954c:	2b22      	cmp	r3, #34	@ 0x22
 800954e:	d108      	bne.n	8009562 <UART_DMAError+0x7a>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d005      	beq.n	8009562 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2200      	movs	r2, #0
 800955a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800955c:	68b8      	ldr	r0, [r7, #8]
 800955e:	f000 f8ce 	bl	80096fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009566:	f043 0210 	orr.w	r2, r3, #16
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800956e:	68b8      	ldr	r0, [r7, #8]
 8009570:	f7ff fef2 	bl	8009358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009574:	bf00      	nop
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b098      	sub	sp, #96	@ 0x60
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4613      	mov	r3, r2
 8009588:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	88fa      	ldrh	r2, [r7, #6]
 8009594:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2222      	movs	r2, #34	@ 0x22
 80095a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095a8:	4a3e      	ldr	r2, [pc, #248]	@ (80096a4 <UART_Start_Receive_DMA+0x128>)
 80095aa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095b0:	4a3d      	ldr	r2, [pc, #244]	@ (80096a8 <UART_Start_Receive_DMA+0x12c>)
 80095b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095b8:	4a3c      	ldr	r2, [pc, #240]	@ (80096ac <UART_Start_Receive_DMA+0x130>)
 80095ba:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095c0:	2200      	movs	r2, #0
 80095c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80095c4:	f107 0308 	add.w	r3, r7, #8
 80095c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3304      	adds	r3, #4
 80095d4:	4619      	mov	r1, r3
 80095d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	88fb      	ldrh	r3, [r7, #6]
 80095dc:	f7fb fd0e 	bl	8004ffc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80095e0:	2300      	movs	r3, #0
 80095e2:	613b      	str	r3, [r7, #16]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	613b      	str	r3, [r7, #16]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	613b      	str	r3, [r7, #16]
 80095f4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d019      	beq.n	8009632 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	330c      	adds	r3, #12
 8009604:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800960e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009614:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	330c      	adds	r3, #12
 800961c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800961e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009620:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009624:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800962c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e5      	bne.n	80095fe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3314      	adds	r3, #20
 8009638:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800963c:	e853 3f00 	ldrex	r3, [r3]
 8009640:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009644:	f043 0301 	orr.w	r3, r3, #1
 8009648:	657b      	str	r3, [r7, #84]	@ 0x54
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	3314      	adds	r3, #20
 8009650:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009652:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009654:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009656:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009658:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800965a:	e841 2300 	strex	r3, r2, [r1]
 800965e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1e5      	bne.n	8009632 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3314      	adds	r3, #20
 800966c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	e853 3f00 	ldrex	r3, [r3]
 8009674:	617b      	str	r3, [r7, #20]
   return(result);
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800967c:	653b      	str	r3, [r7, #80]	@ 0x50
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3314      	adds	r3, #20
 8009684:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009686:	627a      	str	r2, [r7, #36]	@ 0x24
 8009688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968a:	6a39      	ldr	r1, [r7, #32]
 800968c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800968e:	e841 2300 	strex	r3, r2, [r1]
 8009692:	61fb      	str	r3, [r7, #28]
   return(result);
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1e5      	bne.n	8009666 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3760      	adds	r7, #96	@ 0x60
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	08009381 	.word	0x08009381
 80096a8:	080094ad 	.word	0x080094ad
 80096ac:	080094e9 	.word	0x080094e9

080096b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b089      	sub	sp, #36	@ 0x24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	330c      	adds	r3, #12
 80096be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	e853 3f00 	ldrex	r3, [r3]
 80096c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80096ce:	61fb      	str	r3, [r7, #28]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	330c      	adds	r3, #12
 80096d6:	69fa      	ldr	r2, [r7, #28]
 80096d8:	61ba      	str	r2, [r7, #24]
 80096da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096dc:	6979      	ldr	r1, [r7, #20]
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	e841 2300 	strex	r3, r2, [r1]
 80096e4:	613b      	str	r3, [r7, #16]
   return(result);
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1e5      	bne.n	80096b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2220      	movs	r2, #32
 80096f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80096f4:	bf00      	nop
 80096f6:	3724      	adds	r7, #36	@ 0x24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bc80      	pop	{r7}
 80096fc:	4770      	bx	lr

080096fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096fe:	b480      	push	{r7}
 8009700:	b095      	sub	sp, #84	@ 0x54
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	330c      	adds	r3, #12
 800970c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009710:	e853 3f00 	ldrex	r3, [r3]
 8009714:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009718:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800971c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	330c      	adds	r3, #12
 8009724:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009726:	643a      	str	r2, [r7, #64]	@ 0x40
 8009728:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800972c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800972e:	e841 2300 	strex	r3, r2, [r1]
 8009732:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1e5      	bne.n	8009706 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3314      	adds	r3, #20
 8009740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	e853 3f00 	ldrex	r3, [r3]
 8009748:	61fb      	str	r3, [r7, #28]
   return(result);
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	f023 0301 	bic.w	r3, r3, #1
 8009750:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3314      	adds	r3, #20
 8009758:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800975a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800975c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009760:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009762:	e841 2300 	strex	r3, r2, [r1]
 8009766:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1e5      	bne.n	800973a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009772:	2b01      	cmp	r3, #1
 8009774:	d119      	bne.n	80097aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	330c      	adds	r3, #12
 800977c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	e853 3f00 	ldrex	r3, [r3]
 8009784:	60bb      	str	r3, [r7, #8]
   return(result);
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f023 0310 	bic.w	r3, r3, #16
 800978c:	647b      	str	r3, [r7, #68]	@ 0x44
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	330c      	adds	r3, #12
 8009794:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009796:	61ba      	str	r2, [r7, #24]
 8009798:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979a:	6979      	ldr	r1, [r7, #20]
 800979c:	69ba      	ldr	r2, [r7, #24]
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	613b      	str	r3, [r7, #16]
   return(result);
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e5      	bne.n	8009776 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2220      	movs	r2, #32
 80097ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80097b8:	bf00      	nop
 80097ba:	3754      	adds	r7, #84	@ 0x54
 80097bc:	46bd      	mov	sp, r7
 80097be:	bc80      	pop	{r7}
 80097c0:	4770      	bx	lr

080097c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f7ff fdbb 	bl	8009358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097e2:	bf00      	nop
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80097ea:	b480      	push	{r7}
 80097ec:	b085      	sub	sp, #20
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	2b21      	cmp	r3, #33	@ 0x21
 80097fc:	d13e      	bne.n	800987c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009806:	d114      	bne.n	8009832 <UART_Transmit_IT+0x48>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d110      	bne.n	8009832 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a1b      	ldr	r3, [r3, #32]
 8009814:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009824:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	1c9a      	adds	r2, r3, #2
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	621a      	str	r2, [r3, #32]
 8009830:	e008      	b.n	8009844 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	1c59      	adds	r1, r3, #1
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	6211      	str	r1, [r2, #32]
 800983c:	781a      	ldrb	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009848:	b29b      	uxth	r3, r3
 800984a:	3b01      	subs	r3, #1
 800984c:	b29b      	uxth	r3, r3
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	4619      	mov	r1, r3
 8009852:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10f      	bne.n	8009878 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68da      	ldr	r2, [r3, #12]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009866:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68da      	ldr	r2, [r3, #12]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009876:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	e000      	b.n	800987e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800987c:	2302      	movs	r3, #2
  }
}
 800987e:	4618      	mov	r0, r3
 8009880:	3714      	adds	r7, #20
 8009882:	46bd      	mov	sp, r7
 8009884:	bc80      	pop	{r7}
 8009886:	4770      	bx	lr

08009888 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68da      	ldr	r2, [r3, #12]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800989e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2220      	movs	r2, #32
 80098a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7ff fd43 	bl	8009334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08c      	sub	sp, #48	@ 0x30
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b22      	cmp	r3, #34	@ 0x22
 80098ca:	f040 80ae 	bne.w	8009a2a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098d6:	d117      	bne.n	8009908 <UART_Receive_IT+0x50>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d113      	bne.n	8009908 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80098e0:	2300      	movs	r3, #0
 80098e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009900:	1c9a      	adds	r2, r3, #2
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	629a      	str	r2, [r3, #40]	@ 0x28
 8009906:	e026      	b.n	8009956 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800990c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800990e:	2300      	movs	r3, #0
 8009910:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800991a:	d007      	beq.n	800992c <UART_Receive_IT+0x74>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d10a      	bne.n	800993a <UART_Receive_IT+0x82>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d106      	bne.n	800993a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	b2da      	uxtb	r2, r3
 8009934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009936:	701a      	strb	r2, [r3, #0]
 8009938:	e008      	b.n	800994c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	b2db      	uxtb	r3, r3
 8009942:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009946:	b2da      	uxtb	r2, r3
 8009948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800994a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009950:	1c5a      	adds	r2, r3, #1
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800995a:	b29b      	uxth	r3, r3
 800995c:	3b01      	subs	r3, #1
 800995e:	b29b      	uxth	r3, r3
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	4619      	mov	r1, r3
 8009964:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009966:	2b00      	cmp	r3, #0
 8009968:	d15d      	bne.n	8009a26 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68da      	ldr	r2, [r3, #12]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f022 0220 	bic.w	r2, r2, #32
 8009978:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68da      	ldr	r2, [r3, #12]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009988:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	695a      	ldr	r2, [r3, #20]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f022 0201 	bic.w	r2, r2, #1
 8009998:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2220      	movs	r2, #32
 800999e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d135      	bne.n	8009a1c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	330c      	adds	r3, #12
 80099bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	e853 3f00 	ldrex	r3, [r3]
 80099c4:	613b      	str	r3, [r7, #16]
   return(result);
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	f023 0310 	bic.w	r3, r3, #16
 80099cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	330c      	adds	r3, #12
 80099d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099d6:	623a      	str	r2, [r7, #32]
 80099d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099da:	69f9      	ldr	r1, [r7, #28]
 80099dc:	6a3a      	ldr	r2, [r7, #32]
 80099de:	e841 2300 	strex	r3, r2, [r1]
 80099e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1e5      	bne.n	80099b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 0310 	and.w	r3, r3, #16
 80099f4:	2b10      	cmp	r3, #16
 80099f6:	d10a      	bne.n	8009a0e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80099f8:	2300      	movs	r3, #0
 80099fa:	60fb      	str	r3, [r7, #12]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	60fb      	str	r3, [r7, #12]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7ff fca8 	bl	800936a <HAL_UARTEx_RxEventCallback>
 8009a1a:	e002      	b.n	8009a22 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7f8 f949 	bl	8001cb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	e002      	b.n	8009a2c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	e000      	b.n	8009a2c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009a2a:	2302      	movs	r3, #2
  }
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3730      	adds	r7, #48	@ 0x30
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	68da      	ldr	r2, [r3, #12]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	689a      	ldr	r2, [r3, #8]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	431a      	orrs	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009a6e:	f023 030c 	bic.w	r3, r3, #12
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	6812      	ldr	r2, [r2, #0]
 8009a76:	68b9      	ldr	r1, [r7, #8]
 8009a78:	430b      	orrs	r3, r1
 8009a7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	699a      	ldr	r2, [r3, #24]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a2c      	ldr	r2, [pc, #176]	@ (8009b48 <UART_SetConfig+0x114>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d103      	bne.n	8009aa4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009a9c:	f7fd fffa 	bl	8007a94 <HAL_RCC_GetPCLK2Freq>
 8009aa0:	60f8      	str	r0, [r7, #12]
 8009aa2:	e002      	b.n	8009aaa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009aa4:	f7fd ffe2 	bl	8007a6c <HAL_RCC_GetPCLK1Freq>
 8009aa8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009a      	lsls	r2, r3, #2
 8009ab4:	441a      	add	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ac0:	4a22      	ldr	r2, [pc, #136]	@ (8009b4c <UART_SetConfig+0x118>)
 8009ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac6:	095b      	lsrs	r3, r3, #5
 8009ac8:	0119      	lsls	r1, r3, #4
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	4613      	mov	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4413      	add	r3, r2
 8009ad2:	009a      	lsls	r2, r3, #2
 8009ad4:	441a      	add	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8009b4c <UART_SetConfig+0x118>)
 8009ae2:	fba3 0302 	umull	r0, r3, r3, r2
 8009ae6:	095b      	lsrs	r3, r3, #5
 8009ae8:	2064      	movs	r0, #100	@ 0x64
 8009aea:	fb00 f303 	mul.w	r3, r0, r3
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	011b      	lsls	r3, r3, #4
 8009af2:	3332      	adds	r3, #50	@ 0x32
 8009af4:	4a15      	ldr	r2, [pc, #84]	@ (8009b4c <UART_SetConfig+0x118>)
 8009af6:	fba2 2303 	umull	r2, r3, r2, r3
 8009afa:	095b      	lsrs	r3, r3, #5
 8009afc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b00:	4419      	add	r1, r3
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	4613      	mov	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4413      	add	r3, r2
 8009b0a:	009a      	lsls	r2, r3, #2
 8009b0c:	441a      	add	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b18:	4b0c      	ldr	r3, [pc, #48]	@ (8009b4c <UART_SetConfig+0x118>)
 8009b1a:	fba3 0302 	umull	r0, r3, r3, r2
 8009b1e:	095b      	lsrs	r3, r3, #5
 8009b20:	2064      	movs	r0, #100	@ 0x64
 8009b22:	fb00 f303 	mul.w	r3, r0, r3
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	011b      	lsls	r3, r3, #4
 8009b2a:	3332      	adds	r3, #50	@ 0x32
 8009b2c:	4a07      	ldr	r2, [pc, #28]	@ (8009b4c <UART_SetConfig+0x118>)
 8009b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b32:	095b      	lsrs	r3, r3, #5
 8009b34:	f003 020f 	and.w	r2, r3, #15
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	440a      	add	r2, r1
 8009b3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009b40:	bf00      	nop
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	40013800 	.word	0x40013800
 8009b4c:	51eb851f 	.word	0x51eb851f

08009b50 <atoi>:
 8009b50:	220a      	movs	r2, #10
 8009b52:	2100      	movs	r1, #0
 8009b54:	f001 bdde 	b.w	800b714 <strtol>

08009b58 <__cvt>:
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b5e:	461d      	mov	r5, r3
 8009b60:	bfbb      	ittet	lt
 8009b62:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009b66:	461d      	movlt	r5, r3
 8009b68:	2300      	movge	r3, #0
 8009b6a:	232d      	movlt	r3, #45	@ 0x2d
 8009b6c:	b088      	sub	sp, #32
 8009b6e:	4614      	mov	r4, r2
 8009b70:	bfb8      	it	lt
 8009b72:	4614      	movlt	r4, r2
 8009b74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b76:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009b78:	7013      	strb	r3, [r2, #0]
 8009b7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b7c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009b80:	f023 0820 	bic.w	r8, r3, #32
 8009b84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009b88:	d005      	beq.n	8009b96 <__cvt+0x3e>
 8009b8a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009b8e:	d100      	bne.n	8009b92 <__cvt+0x3a>
 8009b90:	3601      	adds	r6, #1
 8009b92:	2302      	movs	r3, #2
 8009b94:	e000      	b.n	8009b98 <__cvt+0x40>
 8009b96:	2303      	movs	r3, #3
 8009b98:	aa07      	add	r2, sp, #28
 8009b9a:	9204      	str	r2, [sp, #16]
 8009b9c:	aa06      	add	r2, sp, #24
 8009b9e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009ba2:	e9cd 3600 	strd	r3, r6, [sp]
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	462b      	mov	r3, r5
 8009baa:	f001 fed5 	bl	800b958 <_dtoa_r>
 8009bae:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009bb2:	4607      	mov	r7, r0
 8009bb4:	d119      	bne.n	8009bea <__cvt+0x92>
 8009bb6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009bb8:	07db      	lsls	r3, r3, #31
 8009bba:	d50e      	bpl.n	8009bda <__cvt+0x82>
 8009bbc:	eb00 0906 	add.w	r9, r0, r6
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	f7f6 feee 	bl	80009a8 <__aeabi_dcmpeq>
 8009bcc:	b108      	cbz	r0, 8009bd2 <__cvt+0x7a>
 8009bce:	f8cd 901c 	str.w	r9, [sp, #28]
 8009bd2:	2230      	movs	r2, #48	@ 0x30
 8009bd4:	9b07      	ldr	r3, [sp, #28]
 8009bd6:	454b      	cmp	r3, r9
 8009bd8:	d31e      	bcc.n	8009c18 <__cvt+0xc0>
 8009bda:	4638      	mov	r0, r7
 8009bdc:	9b07      	ldr	r3, [sp, #28]
 8009bde:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009be0:	1bdb      	subs	r3, r3, r7
 8009be2:	6013      	str	r3, [r2, #0]
 8009be4:	b008      	add	sp, #32
 8009be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009bee:	eb00 0906 	add.w	r9, r0, r6
 8009bf2:	d1e5      	bne.n	8009bc0 <__cvt+0x68>
 8009bf4:	7803      	ldrb	r3, [r0, #0]
 8009bf6:	2b30      	cmp	r3, #48	@ 0x30
 8009bf8:	d10a      	bne.n	8009c10 <__cvt+0xb8>
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4620      	mov	r0, r4
 8009c00:	4629      	mov	r1, r5
 8009c02:	f7f6 fed1 	bl	80009a8 <__aeabi_dcmpeq>
 8009c06:	b918      	cbnz	r0, 8009c10 <__cvt+0xb8>
 8009c08:	f1c6 0601 	rsb	r6, r6, #1
 8009c0c:	f8ca 6000 	str.w	r6, [sl]
 8009c10:	f8da 3000 	ldr.w	r3, [sl]
 8009c14:	4499      	add	r9, r3
 8009c16:	e7d3      	b.n	8009bc0 <__cvt+0x68>
 8009c18:	1c59      	adds	r1, r3, #1
 8009c1a:	9107      	str	r1, [sp, #28]
 8009c1c:	701a      	strb	r2, [r3, #0]
 8009c1e:	e7d9      	b.n	8009bd4 <__cvt+0x7c>

08009c20 <__exponent>:
 8009c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c22:	2900      	cmp	r1, #0
 8009c24:	bfb6      	itet	lt
 8009c26:	232d      	movlt	r3, #45	@ 0x2d
 8009c28:	232b      	movge	r3, #43	@ 0x2b
 8009c2a:	4249      	neglt	r1, r1
 8009c2c:	2909      	cmp	r1, #9
 8009c2e:	7002      	strb	r2, [r0, #0]
 8009c30:	7043      	strb	r3, [r0, #1]
 8009c32:	dd29      	ble.n	8009c88 <__exponent+0x68>
 8009c34:	f10d 0307 	add.w	r3, sp, #7
 8009c38:	461d      	mov	r5, r3
 8009c3a:	270a      	movs	r7, #10
 8009c3c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009c40:	461a      	mov	r2, r3
 8009c42:	fb07 1416 	mls	r4, r7, r6, r1
 8009c46:	3430      	adds	r4, #48	@ 0x30
 8009c48:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009c4c:	460c      	mov	r4, r1
 8009c4e:	2c63      	cmp	r4, #99	@ 0x63
 8009c50:	4631      	mov	r1, r6
 8009c52:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009c56:	dcf1      	bgt.n	8009c3c <__exponent+0x1c>
 8009c58:	3130      	adds	r1, #48	@ 0x30
 8009c5a:	1e94      	subs	r4, r2, #2
 8009c5c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009c60:	4623      	mov	r3, r4
 8009c62:	1c41      	adds	r1, r0, #1
 8009c64:	42ab      	cmp	r3, r5
 8009c66:	d30a      	bcc.n	8009c7e <__exponent+0x5e>
 8009c68:	f10d 0309 	add.w	r3, sp, #9
 8009c6c:	1a9b      	subs	r3, r3, r2
 8009c6e:	42ac      	cmp	r4, r5
 8009c70:	bf88      	it	hi
 8009c72:	2300      	movhi	r3, #0
 8009c74:	3302      	adds	r3, #2
 8009c76:	4403      	add	r3, r0
 8009c78:	1a18      	subs	r0, r3, r0
 8009c7a:	b003      	add	sp, #12
 8009c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c7e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009c82:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009c86:	e7ed      	b.n	8009c64 <__exponent+0x44>
 8009c88:	2330      	movs	r3, #48	@ 0x30
 8009c8a:	3130      	adds	r1, #48	@ 0x30
 8009c8c:	7083      	strb	r3, [r0, #2]
 8009c8e:	70c1      	strb	r1, [r0, #3]
 8009c90:	1d03      	adds	r3, r0, #4
 8009c92:	e7f1      	b.n	8009c78 <__exponent+0x58>

08009c94 <_printf_float>:
 8009c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c98:	b091      	sub	sp, #68	@ 0x44
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009ca0:	4616      	mov	r6, r2
 8009ca2:	461f      	mov	r7, r3
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	f001 fda5 	bl	800b7f4 <_localeconv_r>
 8009caa:	6803      	ldr	r3, [r0, #0]
 8009cac:	4618      	mov	r0, r3
 8009cae:	9308      	str	r3, [sp, #32]
 8009cb0:	f7f6 fa4e 	bl	8000150 <strlen>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	930e      	str	r3, [sp, #56]	@ 0x38
 8009cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8009cbc:	9009      	str	r0, [sp, #36]	@ 0x24
 8009cbe:	3307      	adds	r3, #7
 8009cc0:	f023 0307 	bic.w	r3, r3, #7
 8009cc4:	f103 0208 	add.w	r2, r3, #8
 8009cc8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009ccc:	f8d4 b000 	ldr.w	fp, [r4]
 8009cd0:	f8c8 2000 	str.w	r2, [r8]
 8009cd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cd8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009cdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cde:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009ce2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ce6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009cea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009cee:	4b9c      	ldr	r3, [pc, #624]	@ (8009f60 <_printf_float+0x2cc>)
 8009cf0:	f7f6 fe8c 	bl	8000a0c <__aeabi_dcmpun>
 8009cf4:	bb70      	cbnz	r0, 8009d54 <_printf_float+0xc0>
 8009cf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009cfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009cfe:	4b98      	ldr	r3, [pc, #608]	@ (8009f60 <_printf_float+0x2cc>)
 8009d00:	f7f6 fe66 	bl	80009d0 <__aeabi_dcmple>
 8009d04:	bb30      	cbnz	r0, 8009d54 <_printf_float+0xc0>
 8009d06:	2200      	movs	r2, #0
 8009d08:	2300      	movs	r3, #0
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	4649      	mov	r1, r9
 8009d0e:	f7f6 fe55 	bl	80009bc <__aeabi_dcmplt>
 8009d12:	b110      	cbz	r0, 8009d1a <_printf_float+0x86>
 8009d14:	232d      	movs	r3, #45	@ 0x2d
 8009d16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d1a:	4a92      	ldr	r2, [pc, #584]	@ (8009f64 <_printf_float+0x2d0>)
 8009d1c:	4b92      	ldr	r3, [pc, #584]	@ (8009f68 <_printf_float+0x2d4>)
 8009d1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009d22:	bf8c      	ite	hi
 8009d24:	4690      	movhi	r8, r2
 8009d26:	4698      	movls	r8, r3
 8009d28:	2303      	movs	r3, #3
 8009d2a:	f04f 0900 	mov.w	r9, #0
 8009d2e:	6123      	str	r3, [r4, #16]
 8009d30:	f02b 0304 	bic.w	r3, fp, #4
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	4633      	mov	r3, r6
 8009d38:	4621      	mov	r1, r4
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	9700      	str	r7, [sp, #0]
 8009d3e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009d40:	f000 f9d4 	bl	800a0ec <_printf_common>
 8009d44:	3001      	adds	r0, #1
 8009d46:	f040 8090 	bne.w	8009e6a <_printf_float+0x1d6>
 8009d4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d4e:	b011      	add	sp, #68	@ 0x44
 8009d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d54:	4642      	mov	r2, r8
 8009d56:	464b      	mov	r3, r9
 8009d58:	4640      	mov	r0, r8
 8009d5a:	4649      	mov	r1, r9
 8009d5c:	f7f6 fe56 	bl	8000a0c <__aeabi_dcmpun>
 8009d60:	b148      	cbz	r0, 8009d76 <_printf_float+0xe2>
 8009d62:	464b      	mov	r3, r9
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	bfb8      	it	lt
 8009d68:	232d      	movlt	r3, #45	@ 0x2d
 8009d6a:	4a80      	ldr	r2, [pc, #512]	@ (8009f6c <_printf_float+0x2d8>)
 8009d6c:	bfb8      	it	lt
 8009d6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009d72:	4b7f      	ldr	r3, [pc, #508]	@ (8009f70 <_printf_float+0x2dc>)
 8009d74:	e7d3      	b.n	8009d1e <_printf_float+0x8a>
 8009d76:	6863      	ldr	r3, [r4, #4]
 8009d78:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009d7c:	1c5a      	adds	r2, r3, #1
 8009d7e:	d13f      	bne.n	8009e00 <_printf_float+0x16c>
 8009d80:	2306      	movs	r3, #6
 8009d82:	6063      	str	r3, [r4, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009d8a:	6023      	str	r3, [r4, #0]
 8009d8c:	9206      	str	r2, [sp, #24]
 8009d8e:	aa0e      	add	r2, sp, #56	@ 0x38
 8009d90:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009d94:	aa0d      	add	r2, sp, #52	@ 0x34
 8009d96:	9203      	str	r2, [sp, #12]
 8009d98:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009d9c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009da0:	6863      	ldr	r3, [r4, #4]
 8009da2:	4642      	mov	r2, r8
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	4628      	mov	r0, r5
 8009da8:	464b      	mov	r3, r9
 8009daa:	910a      	str	r1, [sp, #40]	@ 0x28
 8009dac:	f7ff fed4 	bl	8009b58 <__cvt>
 8009db0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009db2:	4680      	mov	r8, r0
 8009db4:	2947      	cmp	r1, #71	@ 0x47
 8009db6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009db8:	d128      	bne.n	8009e0c <_printf_float+0x178>
 8009dba:	1cc8      	adds	r0, r1, #3
 8009dbc:	db02      	blt.n	8009dc4 <_printf_float+0x130>
 8009dbe:	6863      	ldr	r3, [r4, #4]
 8009dc0:	4299      	cmp	r1, r3
 8009dc2:	dd40      	ble.n	8009e46 <_printf_float+0x1b2>
 8009dc4:	f1aa 0a02 	sub.w	sl, sl, #2
 8009dc8:	fa5f fa8a 	uxtb.w	sl, sl
 8009dcc:	4652      	mov	r2, sl
 8009dce:	3901      	subs	r1, #1
 8009dd0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009dd4:	910d      	str	r1, [sp, #52]	@ 0x34
 8009dd6:	f7ff ff23 	bl	8009c20 <__exponent>
 8009dda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ddc:	4681      	mov	r9, r0
 8009dde:	1813      	adds	r3, r2, r0
 8009de0:	2a01      	cmp	r2, #1
 8009de2:	6123      	str	r3, [r4, #16]
 8009de4:	dc02      	bgt.n	8009dec <_printf_float+0x158>
 8009de6:	6822      	ldr	r2, [r4, #0]
 8009de8:	07d2      	lsls	r2, r2, #31
 8009dea:	d501      	bpl.n	8009df0 <_printf_float+0x15c>
 8009dec:	3301      	adds	r3, #1
 8009dee:	6123      	str	r3, [r4, #16]
 8009df0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d09e      	beq.n	8009d36 <_printf_float+0xa2>
 8009df8:	232d      	movs	r3, #45	@ 0x2d
 8009dfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dfe:	e79a      	b.n	8009d36 <_printf_float+0xa2>
 8009e00:	2947      	cmp	r1, #71	@ 0x47
 8009e02:	d1bf      	bne.n	8009d84 <_printf_float+0xf0>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1bd      	bne.n	8009d84 <_printf_float+0xf0>
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e7ba      	b.n	8009d82 <_printf_float+0xee>
 8009e0c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e10:	d9dc      	bls.n	8009dcc <_printf_float+0x138>
 8009e12:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009e16:	d118      	bne.n	8009e4a <_printf_float+0x1b6>
 8009e18:	2900      	cmp	r1, #0
 8009e1a:	6863      	ldr	r3, [r4, #4]
 8009e1c:	dd0b      	ble.n	8009e36 <_printf_float+0x1a2>
 8009e1e:	6121      	str	r1, [r4, #16]
 8009e20:	b913      	cbnz	r3, 8009e28 <_printf_float+0x194>
 8009e22:	6822      	ldr	r2, [r4, #0]
 8009e24:	07d0      	lsls	r0, r2, #31
 8009e26:	d502      	bpl.n	8009e2e <_printf_float+0x19a>
 8009e28:	3301      	adds	r3, #1
 8009e2a:	440b      	add	r3, r1
 8009e2c:	6123      	str	r3, [r4, #16]
 8009e2e:	f04f 0900 	mov.w	r9, #0
 8009e32:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009e34:	e7dc      	b.n	8009df0 <_printf_float+0x15c>
 8009e36:	b913      	cbnz	r3, 8009e3e <_printf_float+0x1aa>
 8009e38:	6822      	ldr	r2, [r4, #0]
 8009e3a:	07d2      	lsls	r2, r2, #31
 8009e3c:	d501      	bpl.n	8009e42 <_printf_float+0x1ae>
 8009e3e:	3302      	adds	r3, #2
 8009e40:	e7f4      	b.n	8009e2c <_printf_float+0x198>
 8009e42:	2301      	movs	r3, #1
 8009e44:	e7f2      	b.n	8009e2c <_printf_float+0x198>
 8009e46:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009e4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e4c:	4299      	cmp	r1, r3
 8009e4e:	db05      	blt.n	8009e5c <_printf_float+0x1c8>
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	6121      	str	r1, [r4, #16]
 8009e54:	07d8      	lsls	r0, r3, #31
 8009e56:	d5ea      	bpl.n	8009e2e <_printf_float+0x19a>
 8009e58:	1c4b      	adds	r3, r1, #1
 8009e5a:	e7e7      	b.n	8009e2c <_printf_float+0x198>
 8009e5c:	2900      	cmp	r1, #0
 8009e5e:	bfcc      	ite	gt
 8009e60:	2201      	movgt	r2, #1
 8009e62:	f1c1 0202 	rsble	r2, r1, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	e7e0      	b.n	8009e2c <_printf_float+0x198>
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	055a      	lsls	r2, r3, #21
 8009e6e:	d407      	bmi.n	8009e80 <_printf_float+0x1ec>
 8009e70:	6923      	ldr	r3, [r4, #16]
 8009e72:	4642      	mov	r2, r8
 8009e74:	4631      	mov	r1, r6
 8009e76:	4628      	mov	r0, r5
 8009e78:	47b8      	blx	r7
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	d12b      	bne.n	8009ed6 <_printf_float+0x242>
 8009e7e:	e764      	b.n	8009d4a <_printf_float+0xb6>
 8009e80:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e84:	f240 80dc 	bls.w	800a040 <_printf_float+0x3ac>
 8009e88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f7f6 fd8a 	bl	80009a8 <__aeabi_dcmpeq>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d033      	beq.n	8009f00 <_printf_float+0x26c>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	4631      	mov	r1, r6
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	4a35      	ldr	r2, [pc, #212]	@ (8009f74 <_printf_float+0x2e0>)
 8009ea0:	47b8      	blx	r7
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	f43f af51 	beq.w	8009d4a <_printf_float+0xb6>
 8009ea8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009eac:	4543      	cmp	r3, r8
 8009eae:	db02      	blt.n	8009eb6 <_printf_float+0x222>
 8009eb0:	6823      	ldr	r3, [r4, #0]
 8009eb2:	07d8      	lsls	r0, r3, #31
 8009eb4:	d50f      	bpl.n	8009ed6 <_printf_float+0x242>
 8009eb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009eba:	4631      	mov	r1, r6
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	47b8      	blx	r7
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	f43f af42 	beq.w	8009d4a <_printf_float+0xb6>
 8009ec6:	f04f 0900 	mov.w	r9, #0
 8009eca:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009ece:	f104 0a1a 	add.w	sl, r4, #26
 8009ed2:	45c8      	cmp	r8, r9
 8009ed4:	dc09      	bgt.n	8009eea <_printf_float+0x256>
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	079b      	lsls	r3, r3, #30
 8009eda:	f100 8102 	bmi.w	800a0e2 <_printf_float+0x44e>
 8009ede:	68e0      	ldr	r0, [r4, #12]
 8009ee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ee2:	4298      	cmp	r0, r3
 8009ee4:	bfb8      	it	lt
 8009ee6:	4618      	movlt	r0, r3
 8009ee8:	e731      	b.n	8009d4e <_printf_float+0xba>
 8009eea:	2301      	movs	r3, #1
 8009eec:	4652      	mov	r2, sl
 8009eee:	4631      	mov	r1, r6
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	47b8      	blx	r7
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	f43f af28 	beq.w	8009d4a <_printf_float+0xb6>
 8009efa:	f109 0901 	add.w	r9, r9, #1
 8009efe:	e7e8      	b.n	8009ed2 <_printf_float+0x23e>
 8009f00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	dc38      	bgt.n	8009f78 <_printf_float+0x2e4>
 8009f06:	2301      	movs	r3, #1
 8009f08:	4631      	mov	r1, r6
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	4a19      	ldr	r2, [pc, #100]	@ (8009f74 <_printf_float+0x2e0>)
 8009f0e:	47b8      	blx	r7
 8009f10:	3001      	adds	r0, #1
 8009f12:	f43f af1a 	beq.w	8009d4a <_printf_float+0xb6>
 8009f16:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009f1a:	ea59 0303 	orrs.w	r3, r9, r3
 8009f1e:	d102      	bne.n	8009f26 <_printf_float+0x292>
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	07d9      	lsls	r1, r3, #31
 8009f24:	d5d7      	bpl.n	8009ed6 <_printf_float+0x242>
 8009f26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	47b8      	blx	r7
 8009f30:	3001      	adds	r0, #1
 8009f32:	f43f af0a 	beq.w	8009d4a <_printf_float+0xb6>
 8009f36:	f04f 0a00 	mov.w	sl, #0
 8009f3a:	f104 0b1a 	add.w	fp, r4, #26
 8009f3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f40:	425b      	negs	r3, r3
 8009f42:	4553      	cmp	r3, sl
 8009f44:	dc01      	bgt.n	8009f4a <_printf_float+0x2b6>
 8009f46:	464b      	mov	r3, r9
 8009f48:	e793      	b.n	8009e72 <_printf_float+0x1de>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	465a      	mov	r2, fp
 8009f4e:	4631      	mov	r1, r6
 8009f50:	4628      	mov	r0, r5
 8009f52:	47b8      	blx	r7
 8009f54:	3001      	adds	r0, #1
 8009f56:	f43f aef8 	beq.w	8009d4a <_printf_float+0xb6>
 8009f5a:	f10a 0a01 	add.w	sl, sl, #1
 8009f5e:	e7ee      	b.n	8009f3e <_printf_float+0x2aa>
 8009f60:	7fefffff 	.word	0x7fefffff
 8009f64:	0800ec66 	.word	0x0800ec66
 8009f68:	0800ec62 	.word	0x0800ec62
 8009f6c:	0800ec6e 	.word	0x0800ec6e
 8009f70:	0800ec6a 	.word	0x0800ec6a
 8009f74:	0800ec72 	.word	0x0800ec72
 8009f78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f7a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009f7e:	4553      	cmp	r3, sl
 8009f80:	bfa8      	it	ge
 8009f82:	4653      	movge	r3, sl
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	4699      	mov	r9, r3
 8009f88:	dc36      	bgt.n	8009ff8 <_printf_float+0x364>
 8009f8a:	f04f 0b00 	mov.w	fp, #0
 8009f8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f92:	f104 021a 	add.w	r2, r4, #26
 8009f96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f98:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f9a:	eba3 0309 	sub.w	r3, r3, r9
 8009f9e:	455b      	cmp	r3, fp
 8009fa0:	dc31      	bgt.n	800a006 <_printf_float+0x372>
 8009fa2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fa4:	459a      	cmp	sl, r3
 8009fa6:	dc3a      	bgt.n	800a01e <_printf_float+0x38a>
 8009fa8:	6823      	ldr	r3, [r4, #0]
 8009faa:	07da      	lsls	r2, r3, #31
 8009fac:	d437      	bmi.n	800a01e <_printf_float+0x38a>
 8009fae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fb0:	ebaa 0903 	sub.w	r9, sl, r3
 8009fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fb6:	ebaa 0303 	sub.w	r3, sl, r3
 8009fba:	4599      	cmp	r9, r3
 8009fbc:	bfa8      	it	ge
 8009fbe:	4699      	movge	r9, r3
 8009fc0:	f1b9 0f00 	cmp.w	r9, #0
 8009fc4:	dc33      	bgt.n	800a02e <_printf_float+0x39a>
 8009fc6:	f04f 0800 	mov.w	r8, #0
 8009fca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fce:	f104 0b1a 	add.w	fp, r4, #26
 8009fd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fd4:	ebaa 0303 	sub.w	r3, sl, r3
 8009fd8:	eba3 0309 	sub.w	r3, r3, r9
 8009fdc:	4543      	cmp	r3, r8
 8009fde:	f77f af7a 	ble.w	8009ed6 <_printf_float+0x242>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	465a      	mov	r2, fp
 8009fe6:	4631      	mov	r1, r6
 8009fe8:	4628      	mov	r0, r5
 8009fea:	47b8      	blx	r7
 8009fec:	3001      	adds	r0, #1
 8009fee:	f43f aeac 	beq.w	8009d4a <_printf_float+0xb6>
 8009ff2:	f108 0801 	add.w	r8, r8, #1
 8009ff6:	e7ec      	b.n	8009fd2 <_printf_float+0x33e>
 8009ff8:	4642      	mov	r2, r8
 8009ffa:	4631      	mov	r1, r6
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	47b8      	blx	r7
 800a000:	3001      	adds	r0, #1
 800a002:	d1c2      	bne.n	8009f8a <_printf_float+0x2f6>
 800a004:	e6a1      	b.n	8009d4a <_printf_float+0xb6>
 800a006:	2301      	movs	r3, #1
 800a008:	4631      	mov	r1, r6
 800a00a:	4628      	mov	r0, r5
 800a00c:	920a      	str	r2, [sp, #40]	@ 0x28
 800a00e:	47b8      	blx	r7
 800a010:	3001      	adds	r0, #1
 800a012:	f43f ae9a 	beq.w	8009d4a <_printf_float+0xb6>
 800a016:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a018:	f10b 0b01 	add.w	fp, fp, #1
 800a01c:	e7bb      	b.n	8009f96 <_printf_float+0x302>
 800a01e:	4631      	mov	r1, r6
 800a020:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a024:	4628      	mov	r0, r5
 800a026:	47b8      	blx	r7
 800a028:	3001      	adds	r0, #1
 800a02a:	d1c0      	bne.n	8009fae <_printf_float+0x31a>
 800a02c:	e68d      	b.n	8009d4a <_printf_float+0xb6>
 800a02e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a030:	464b      	mov	r3, r9
 800a032:	4631      	mov	r1, r6
 800a034:	4628      	mov	r0, r5
 800a036:	4442      	add	r2, r8
 800a038:	47b8      	blx	r7
 800a03a:	3001      	adds	r0, #1
 800a03c:	d1c3      	bne.n	8009fc6 <_printf_float+0x332>
 800a03e:	e684      	b.n	8009d4a <_printf_float+0xb6>
 800a040:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a044:	f1ba 0f01 	cmp.w	sl, #1
 800a048:	dc01      	bgt.n	800a04e <_printf_float+0x3ba>
 800a04a:	07db      	lsls	r3, r3, #31
 800a04c:	d536      	bpl.n	800a0bc <_printf_float+0x428>
 800a04e:	2301      	movs	r3, #1
 800a050:	4642      	mov	r2, r8
 800a052:	4631      	mov	r1, r6
 800a054:	4628      	mov	r0, r5
 800a056:	47b8      	blx	r7
 800a058:	3001      	adds	r0, #1
 800a05a:	f43f ae76 	beq.w	8009d4a <_printf_float+0xb6>
 800a05e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a062:	4631      	mov	r1, r6
 800a064:	4628      	mov	r0, r5
 800a066:	47b8      	blx	r7
 800a068:	3001      	adds	r0, #1
 800a06a:	f43f ae6e 	beq.w	8009d4a <_printf_float+0xb6>
 800a06e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a072:	2200      	movs	r2, #0
 800a074:	2300      	movs	r3, #0
 800a076:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a07a:	f7f6 fc95 	bl	80009a8 <__aeabi_dcmpeq>
 800a07e:	b9c0      	cbnz	r0, 800a0b2 <_printf_float+0x41e>
 800a080:	4653      	mov	r3, sl
 800a082:	f108 0201 	add.w	r2, r8, #1
 800a086:	4631      	mov	r1, r6
 800a088:	4628      	mov	r0, r5
 800a08a:	47b8      	blx	r7
 800a08c:	3001      	adds	r0, #1
 800a08e:	d10c      	bne.n	800a0aa <_printf_float+0x416>
 800a090:	e65b      	b.n	8009d4a <_printf_float+0xb6>
 800a092:	2301      	movs	r3, #1
 800a094:	465a      	mov	r2, fp
 800a096:	4631      	mov	r1, r6
 800a098:	4628      	mov	r0, r5
 800a09a:	47b8      	blx	r7
 800a09c:	3001      	adds	r0, #1
 800a09e:	f43f ae54 	beq.w	8009d4a <_printf_float+0xb6>
 800a0a2:	f108 0801 	add.w	r8, r8, #1
 800a0a6:	45d0      	cmp	r8, sl
 800a0a8:	dbf3      	blt.n	800a092 <_printf_float+0x3fe>
 800a0aa:	464b      	mov	r3, r9
 800a0ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a0b0:	e6e0      	b.n	8009e74 <_printf_float+0x1e0>
 800a0b2:	f04f 0800 	mov.w	r8, #0
 800a0b6:	f104 0b1a 	add.w	fp, r4, #26
 800a0ba:	e7f4      	b.n	800a0a6 <_printf_float+0x412>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	4642      	mov	r2, r8
 800a0c0:	e7e1      	b.n	800a086 <_printf_float+0x3f2>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	464a      	mov	r2, r9
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	47b8      	blx	r7
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	f43f ae3c 	beq.w	8009d4a <_printf_float+0xb6>
 800a0d2:	f108 0801 	add.w	r8, r8, #1
 800a0d6:	68e3      	ldr	r3, [r4, #12]
 800a0d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a0da:	1a5b      	subs	r3, r3, r1
 800a0dc:	4543      	cmp	r3, r8
 800a0de:	dcf0      	bgt.n	800a0c2 <_printf_float+0x42e>
 800a0e0:	e6fd      	b.n	8009ede <_printf_float+0x24a>
 800a0e2:	f04f 0800 	mov.w	r8, #0
 800a0e6:	f104 0919 	add.w	r9, r4, #25
 800a0ea:	e7f4      	b.n	800a0d6 <_printf_float+0x442>

0800a0ec <_printf_common>:
 800a0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f0:	4616      	mov	r6, r2
 800a0f2:	4698      	mov	r8, r3
 800a0f4:	688a      	ldr	r2, [r1, #8]
 800a0f6:	690b      	ldr	r3, [r1, #16]
 800a0f8:	4607      	mov	r7, r0
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	bfb8      	it	lt
 800a0fe:	4613      	movlt	r3, r2
 800a100:	6033      	str	r3, [r6, #0]
 800a102:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a106:	460c      	mov	r4, r1
 800a108:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a10c:	b10a      	cbz	r2, 800a112 <_printf_common+0x26>
 800a10e:	3301      	adds	r3, #1
 800a110:	6033      	str	r3, [r6, #0]
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	0699      	lsls	r1, r3, #26
 800a116:	bf42      	ittt	mi
 800a118:	6833      	ldrmi	r3, [r6, #0]
 800a11a:	3302      	addmi	r3, #2
 800a11c:	6033      	strmi	r3, [r6, #0]
 800a11e:	6825      	ldr	r5, [r4, #0]
 800a120:	f015 0506 	ands.w	r5, r5, #6
 800a124:	d106      	bne.n	800a134 <_printf_common+0x48>
 800a126:	f104 0a19 	add.w	sl, r4, #25
 800a12a:	68e3      	ldr	r3, [r4, #12]
 800a12c:	6832      	ldr	r2, [r6, #0]
 800a12e:	1a9b      	subs	r3, r3, r2
 800a130:	42ab      	cmp	r3, r5
 800a132:	dc2b      	bgt.n	800a18c <_printf_common+0xa0>
 800a134:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a138:	6822      	ldr	r2, [r4, #0]
 800a13a:	3b00      	subs	r3, #0
 800a13c:	bf18      	it	ne
 800a13e:	2301      	movne	r3, #1
 800a140:	0692      	lsls	r2, r2, #26
 800a142:	d430      	bmi.n	800a1a6 <_printf_common+0xba>
 800a144:	4641      	mov	r1, r8
 800a146:	4638      	mov	r0, r7
 800a148:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a14c:	47c8      	blx	r9
 800a14e:	3001      	adds	r0, #1
 800a150:	d023      	beq.n	800a19a <_printf_common+0xae>
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	6922      	ldr	r2, [r4, #16]
 800a156:	f003 0306 	and.w	r3, r3, #6
 800a15a:	2b04      	cmp	r3, #4
 800a15c:	bf14      	ite	ne
 800a15e:	2500      	movne	r5, #0
 800a160:	6833      	ldreq	r3, [r6, #0]
 800a162:	f04f 0600 	mov.w	r6, #0
 800a166:	bf08      	it	eq
 800a168:	68e5      	ldreq	r5, [r4, #12]
 800a16a:	f104 041a 	add.w	r4, r4, #26
 800a16e:	bf08      	it	eq
 800a170:	1aed      	subeq	r5, r5, r3
 800a172:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a176:	bf08      	it	eq
 800a178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a17c:	4293      	cmp	r3, r2
 800a17e:	bfc4      	itt	gt
 800a180:	1a9b      	subgt	r3, r3, r2
 800a182:	18ed      	addgt	r5, r5, r3
 800a184:	42b5      	cmp	r5, r6
 800a186:	d11a      	bne.n	800a1be <_printf_common+0xd2>
 800a188:	2000      	movs	r0, #0
 800a18a:	e008      	b.n	800a19e <_printf_common+0xb2>
 800a18c:	2301      	movs	r3, #1
 800a18e:	4652      	mov	r2, sl
 800a190:	4641      	mov	r1, r8
 800a192:	4638      	mov	r0, r7
 800a194:	47c8      	blx	r9
 800a196:	3001      	adds	r0, #1
 800a198:	d103      	bne.n	800a1a2 <_printf_common+0xb6>
 800a19a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a2:	3501      	adds	r5, #1
 800a1a4:	e7c1      	b.n	800a12a <_printf_common+0x3e>
 800a1a6:	2030      	movs	r0, #48	@ 0x30
 800a1a8:	18e1      	adds	r1, r4, r3
 800a1aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1b4:	4422      	add	r2, r4
 800a1b6:	3302      	adds	r3, #2
 800a1b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1bc:	e7c2      	b.n	800a144 <_printf_common+0x58>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4622      	mov	r2, r4
 800a1c2:	4641      	mov	r1, r8
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	47c8      	blx	r9
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d0e6      	beq.n	800a19a <_printf_common+0xae>
 800a1cc:	3601      	adds	r6, #1
 800a1ce:	e7d9      	b.n	800a184 <_printf_common+0x98>

0800a1d0 <_printf_i>:
 800a1d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d4:	7e0f      	ldrb	r7, [r1, #24]
 800a1d6:	4691      	mov	r9, r2
 800a1d8:	2f78      	cmp	r7, #120	@ 0x78
 800a1da:	4680      	mov	r8, r0
 800a1dc:	460c      	mov	r4, r1
 800a1de:	469a      	mov	sl, r3
 800a1e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a1e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a1e6:	d807      	bhi.n	800a1f8 <_printf_i+0x28>
 800a1e8:	2f62      	cmp	r7, #98	@ 0x62
 800a1ea:	d80a      	bhi.n	800a202 <_printf_i+0x32>
 800a1ec:	2f00      	cmp	r7, #0
 800a1ee:	f000 80d1 	beq.w	800a394 <_printf_i+0x1c4>
 800a1f2:	2f58      	cmp	r7, #88	@ 0x58
 800a1f4:	f000 80b8 	beq.w	800a368 <_printf_i+0x198>
 800a1f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a1fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a200:	e03a      	b.n	800a278 <_printf_i+0xa8>
 800a202:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a206:	2b15      	cmp	r3, #21
 800a208:	d8f6      	bhi.n	800a1f8 <_printf_i+0x28>
 800a20a:	a101      	add	r1, pc, #4	@ (adr r1, 800a210 <_printf_i+0x40>)
 800a20c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a210:	0800a269 	.word	0x0800a269
 800a214:	0800a27d 	.word	0x0800a27d
 800a218:	0800a1f9 	.word	0x0800a1f9
 800a21c:	0800a1f9 	.word	0x0800a1f9
 800a220:	0800a1f9 	.word	0x0800a1f9
 800a224:	0800a1f9 	.word	0x0800a1f9
 800a228:	0800a27d 	.word	0x0800a27d
 800a22c:	0800a1f9 	.word	0x0800a1f9
 800a230:	0800a1f9 	.word	0x0800a1f9
 800a234:	0800a1f9 	.word	0x0800a1f9
 800a238:	0800a1f9 	.word	0x0800a1f9
 800a23c:	0800a37b 	.word	0x0800a37b
 800a240:	0800a2a7 	.word	0x0800a2a7
 800a244:	0800a335 	.word	0x0800a335
 800a248:	0800a1f9 	.word	0x0800a1f9
 800a24c:	0800a1f9 	.word	0x0800a1f9
 800a250:	0800a39d 	.word	0x0800a39d
 800a254:	0800a1f9 	.word	0x0800a1f9
 800a258:	0800a2a7 	.word	0x0800a2a7
 800a25c:	0800a1f9 	.word	0x0800a1f9
 800a260:	0800a1f9 	.word	0x0800a1f9
 800a264:	0800a33d 	.word	0x0800a33d
 800a268:	6833      	ldr	r3, [r6, #0]
 800a26a:	1d1a      	adds	r2, r3, #4
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	6032      	str	r2, [r6, #0]
 800a270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a274:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a278:	2301      	movs	r3, #1
 800a27a:	e09c      	b.n	800a3b6 <_printf_i+0x1e6>
 800a27c:	6833      	ldr	r3, [r6, #0]
 800a27e:	6820      	ldr	r0, [r4, #0]
 800a280:	1d19      	adds	r1, r3, #4
 800a282:	6031      	str	r1, [r6, #0]
 800a284:	0606      	lsls	r6, r0, #24
 800a286:	d501      	bpl.n	800a28c <_printf_i+0xbc>
 800a288:	681d      	ldr	r5, [r3, #0]
 800a28a:	e003      	b.n	800a294 <_printf_i+0xc4>
 800a28c:	0645      	lsls	r5, r0, #25
 800a28e:	d5fb      	bpl.n	800a288 <_printf_i+0xb8>
 800a290:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a294:	2d00      	cmp	r5, #0
 800a296:	da03      	bge.n	800a2a0 <_printf_i+0xd0>
 800a298:	232d      	movs	r3, #45	@ 0x2d
 800a29a:	426d      	negs	r5, r5
 800a29c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2a0:	230a      	movs	r3, #10
 800a2a2:	4858      	ldr	r0, [pc, #352]	@ (800a404 <_printf_i+0x234>)
 800a2a4:	e011      	b.n	800a2ca <_printf_i+0xfa>
 800a2a6:	6821      	ldr	r1, [r4, #0]
 800a2a8:	6833      	ldr	r3, [r6, #0]
 800a2aa:	0608      	lsls	r0, r1, #24
 800a2ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2b0:	d402      	bmi.n	800a2b8 <_printf_i+0xe8>
 800a2b2:	0649      	lsls	r1, r1, #25
 800a2b4:	bf48      	it	mi
 800a2b6:	b2ad      	uxthmi	r5, r5
 800a2b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2ba:	6033      	str	r3, [r6, #0]
 800a2bc:	bf14      	ite	ne
 800a2be:	230a      	movne	r3, #10
 800a2c0:	2308      	moveq	r3, #8
 800a2c2:	4850      	ldr	r0, [pc, #320]	@ (800a404 <_printf_i+0x234>)
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a2ca:	6866      	ldr	r6, [r4, #4]
 800a2cc:	2e00      	cmp	r6, #0
 800a2ce:	60a6      	str	r6, [r4, #8]
 800a2d0:	db05      	blt.n	800a2de <_printf_i+0x10e>
 800a2d2:	6821      	ldr	r1, [r4, #0]
 800a2d4:	432e      	orrs	r6, r5
 800a2d6:	f021 0104 	bic.w	r1, r1, #4
 800a2da:	6021      	str	r1, [r4, #0]
 800a2dc:	d04b      	beq.n	800a376 <_printf_i+0x1a6>
 800a2de:	4616      	mov	r6, r2
 800a2e0:	fbb5 f1f3 	udiv	r1, r5, r3
 800a2e4:	fb03 5711 	mls	r7, r3, r1, r5
 800a2e8:	5dc7      	ldrb	r7, [r0, r7]
 800a2ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2ee:	462f      	mov	r7, r5
 800a2f0:	42bb      	cmp	r3, r7
 800a2f2:	460d      	mov	r5, r1
 800a2f4:	d9f4      	bls.n	800a2e0 <_printf_i+0x110>
 800a2f6:	2b08      	cmp	r3, #8
 800a2f8:	d10b      	bne.n	800a312 <_printf_i+0x142>
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	07df      	lsls	r7, r3, #31
 800a2fe:	d508      	bpl.n	800a312 <_printf_i+0x142>
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	6861      	ldr	r1, [r4, #4]
 800a304:	4299      	cmp	r1, r3
 800a306:	bfde      	ittt	le
 800a308:	2330      	movle	r3, #48	@ 0x30
 800a30a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a30e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a312:	1b92      	subs	r2, r2, r6
 800a314:	6122      	str	r2, [r4, #16]
 800a316:	464b      	mov	r3, r9
 800a318:	4621      	mov	r1, r4
 800a31a:	4640      	mov	r0, r8
 800a31c:	f8cd a000 	str.w	sl, [sp]
 800a320:	aa03      	add	r2, sp, #12
 800a322:	f7ff fee3 	bl	800a0ec <_printf_common>
 800a326:	3001      	adds	r0, #1
 800a328:	d14a      	bne.n	800a3c0 <_printf_i+0x1f0>
 800a32a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a32e:	b004      	add	sp, #16
 800a330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	f043 0320 	orr.w	r3, r3, #32
 800a33a:	6023      	str	r3, [r4, #0]
 800a33c:	2778      	movs	r7, #120	@ 0x78
 800a33e:	4832      	ldr	r0, [pc, #200]	@ (800a408 <_printf_i+0x238>)
 800a340:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	6831      	ldr	r1, [r6, #0]
 800a348:	061f      	lsls	r7, r3, #24
 800a34a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a34e:	d402      	bmi.n	800a356 <_printf_i+0x186>
 800a350:	065f      	lsls	r7, r3, #25
 800a352:	bf48      	it	mi
 800a354:	b2ad      	uxthmi	r5, r5
 800a356:	6031      	str	r1, [r6, #0]
 800a358:	07d9      	lsls	r1, r3, #31
 800a35a:	bf44      	itt	mi
 800a35c:	f043 0320 	orrmi.w	r3, r3, #32
 800a360:	6023      	strmi	r3, [r4, #0]
 800a362:	b11d      	cbz	r5, 800a36c <_printf_i+0x19c>
 800a364:	2310      	movs	r3, #16
 800a366:	e7ad      	b.n	800a2c4 <_printf_i+0xf4>
 800a368:	4826      	ldr	r0, [pc, #152]	@ (800a404 <_printf_i+0x234>)
 800a36a:	e7e9      	b.n	800a340 <_printf_i+0x170>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	f023 0320 	bic.w	r3, r3, #32
 800a372:	6023      	str	r3, [r4, #0]
 800a374:	e7f6      	b.n	800a364 <_printf_i+0x194>
 800a376:	4616      	mov	r6, r2
 800a378:	e7bd      	b.n	800a2f6 <_printf_i+0x126>
 800a37a:	6833      	ldr	r3, [r6, #0]
 800a37c:	6825      	ldr	r5, [r4, #0]
 800a37e:	1d18      	adds	r0, r3, #4
 800a380:	6961      	ldr	r1, [r4, #20]
 800a382:	6030      	str	r0, [r6, #0]
 800a384:	062e      	lsls	r6, r5, #24
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	d501      	bpl.n	800a38e <_printf_i+0x1be>
 800a38a:	6019      	str	r1, [r3, #0]
 800a38c:	e002      	b.n	800a394 <_printf_i+0x1c4>
 800a38e:	0668      	lsls	r0, r5, #25
 800a390:	d5fb      	bpl.n	800a38a <_printf_i+0x1ba>
 800a392:	8019      	strh	r1, [r3, #0]
 800a394:	2300      	movs	r3, #0
 800a396:	4616      	mov	r6, r2
 800a398:	6123      	str	r3, [r4, #16]
 800a39a:	e7bc      	b.n	800a316 <_printf_i+0x146>
 800a39c:	6833      	ldr	r3, [r6, #0]
 800a39e:	2100      	movs	r1, #0
 800a3a0:	1d1a      	adds	r2, r3, #4
 800a3a2:	6032      	str	r2, [r6, #0]
 800a3a4:	681e      	ldr	r6, [r3, #0]
 800a3a6:	6862      	ldr	r2, [r4, #4]
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f001 fa27 	bl	800b7fc <memchr>
 800a3ae:	b108      	cbz	r0, 800a3b4 <_printf_i+0x1e4>
 800a3b0:	1b80      	subs	r0, r0, r6
 800a3b2:	6060      	str	r0, [r4, #4]
 800a3b4:	6863      	ldr	r3, [r4, #4]
 800a3b6:	6123      	str	r3, [r4, #16]
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3be:	e7aa      	b.n	800a316 <_printf_i+0x146>
 800a3c0:	4632      	mov	r2, r6
 800a3c2:	4649      	mov	r1, r9
 800a3c4:	4640      	mov	r0, r8
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	47d0      	blx	sl
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	d0ad      	beq.n	800a32a <_printf_i+0x15a>
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	079b      	lsls	r3, r3, #30
 800a3d2:	d413      	bmi.n	800a3fc <_printf_i+0x22c>
 800a3d4:	68e0      	ldr	r0, [r4, #12]
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	4298      	cmp	r0, r3
 800a3da:	bfb8      	it	lt
 800a3dc:	4618      	movlt	r0, r3
 800a3de:	e7a6      	b.n	800a32e <_printf_i+0x15e>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	4632      	mov	r2, r6
 800a3e4:	4649      	mov	r1, r9
 800a3e6:	4640      	mov	r0, r8
 800a3e8:	47d0      	blx	sl
 800a3ea:	3001      	adds	r0, #1
 800a3ec:	d09d      	beq.n	800a32a <_printf_i+0x15a>
 800a3ee:	3501      	adds	r5, #1
 800a3f0:	68e3      	ldr	r3, [r4, #12]
 800a3f2:	9903      	ldr	r1, [sp, #12]
 800a3f4:	1a5b      	subs	r3, r3, r1
 800a3f6:	42ab      	cmp	r3, r5
 800a3f8:	dcf2      	bgt.n	800a3e0 <_printf_i+0x210>
 800a3fa:	e7eb      	b.n	800a3d4 <_printf_i+0x204>
 800a3fc:	2500      	movs	r5, #0
 800a3fe:	f104 0619 	add.w	r6, r4, #25
 800a402:	e7f5      	b.n	800a3f0 <_printf_i+0x220>
 800a404:	0800ec74 	.word	0x0800ec74
 800a408:	0800ec85 	.word	0x0800ec85

0800a40c <_scanf_float>:
 800a40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a410:	b087      	sub	sp, #28
 800a412:	9303      	str	r3, [sp, #12]
 800a414:	688b      	ldr	r3, [r1, #8]
 800a416:	4691      	mov	r9, r2
 800a418:	1e5a      	subs	r2, r3, #1
 800a41a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a41e:	bf82      	ittt	hi
 800a420:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a424:	eb03 0b05 	addhi.w	fp, r3, r5
 800a428:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a42c:	460a      	mov	r2, r1
 800a42e:	f04f 0500 	mov.w	r5, #0
 800a432:	bf88      	it	hi
 800a434:	608b      	strhi	r3, [r1, #8]
 800a436:	680b      	ldr	r3, [r1, #0]
 800a438:	4680      	mov	r8, r0
 800a43a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a43e:	f842 3b1c 	str.w	r3, [r2], #28
 800a442:	460c      	mov	r4, r1
 800a444:	bf98      	it	ls
 800a446:	f04f 0b00 	movls.w	fp, #0
 800a44a:	4616      	mov	r6, r2
 800a44c:	46aa      	mov	sl, r5
 800a44e:	462f      	mov	r7, r5
 800a450:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a454:	9201      	str	r2, [sp, #4]
 800a456:	9502      	str	r5, [sp, #8]
 800a458:	68a2      	ldr	r2, [r4, #8]
 800a45a:	b15a      	cbz	r2, 800a474 <_scanf_float+0x68>
 800a45c:	f8d9 3000 	ldr.w	r3, [r9]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	2b4e      	cmp	r3, #78	@ 0x4e
 800a464:	d862      	bhi.n	800a52c <_scanf_float+0x120>
 800a466:	2b40      	cmp	r3, #64	@ 0x40
 800a468:	d83a      	bhi.n	800a4e0 <_scanf_float+0xd4>
 800a46a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a46e:	b2c8      	uxtb	r0, r1
 800a470:	280e      	cmp	r0, #14
 800a472:	d938      	bls.n	800a4e6 <_scanf_float+0xda>
 800a474:	b11f      	cbz	r7, 800a47e <_scanf_float+0x72>
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a482:	f1ba 0f01 	cmp.w	sl, #1
 800a486:	f200 8114 	bhi.w	800a6b2 <_scanf_float+0x2a6>
 800a48a:	9b01      	ldr	r3, [sp, #4]
 800a48c:	429e      	cmp	r6, r3
 800a48e:	f200 8105 	bhi.w	800a69c <_scanf_float+0x290>
 800a492:	2001      	movs	r0, #1
 800a494:	b007      	add	sp, #28
 800a496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a49e:	2a0d      	cmp	r2, #13
 800a4a0:	d8e8      	bhi.n	800a474 <_scanf_float+0x68>
 800a4a2:	a101      	add	r1, pc, #4	@ (adr r1, 800a4a8 <_scanf_float+0x9c>)
 800a4a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a4a8:	0800a5f1 	.word	0x0800a5f1
 800a4ac:	0800a475 	.word	0x0800a475
 800a4b0:	0800a475 	.word	0x0800a475
 800a4b4:	0800a475 	.word	0x0800a475
 800a4b8:	0800a64d 	.word	0x0800a64d
 800a4bc:	0800a627 	.word	0x0800a627
 800a4c0:	0800a475 	.word	0x0800a475
 800a4c4:	0800a475 	.word	0x0800a475
 800a4c8:	0800a5ff 	.word	0x0800a5ff
 800a4cc:	0800a475 	.word	0x0800a475
 800a4d0:	0800a475 	.word	0x0800a475
 800a4d4:	0800a475 	.word	0x0800a475
 800a4d8:	0800a475 	.word	0x0800a475
 800a4dc:	0800a5bb 	.word	0x0800a5bb
 800a4e0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a4e4:	e7db      	b.n	800a49e <_scanf_float+0x92>
 800a4e6:	290e      	cmp	r1, #14
 800a4e8:	d8c4      	bhi.n	800a474 <_scanf_float+0x68>
 800a4ea:	a001      	add	r0, pc, #4	@ (adr r0, 800a4f0 <_scanf_float+0xe4>)
 800a4ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a4f0:	0800a5ab 	.word	0x0800a5ab
 800a4f4:	0800a475 	.word	0x0800a475
 800a4f8:	0800a5ab 	.word	0x0800a5ab
 800a4fc:	0800a63b 	.word	0x0800a63b
 800a500:	0800a475 	.word	0x0800a475
 800a504:	0800a54d 	.word	0x0800a54d
 800a508:	0800a591 	.word	0x0800a591
 800a50c:	0800a591 	.word	0x0800a591
 800a510:	0800a591 	.word	0x0800a591
 800a514:	0800a591 	.word	0x0800a591
 800a518:	0800a591 	.word	0x0800a591
 800a51c:	0800a591 	.word	0x0800a591
 800a520:	0800a591 	.word	0x0800a591
 800a524:	0800a591 	.word	0x0800a591
 800a528:	0800a591 	.word	0x0800a591
 800a52c:	2b6e      	cmp	r3, #110	@ 0x6e
 800a52e:	d809      	bhi.n	800a544 <_scanf_float+0x138>
 800a530:	2b60      	cmp	r3, #96	@ 0x60
 800a532:	d8b2      	bhi.n	800a49a <_scanf_float+0x8e>
 800a534:	2b54      	cmp	r3, #84	@ 0x54
 800a536:	d07b      	beq.n	800a630 <_scanf_float+0x224>
 800a538:	2b59      	cmp	r3, #89	@ 0x59
 800a53a:	d19b      	bne.n	800a474 <_scanf_float+0x68>
 800a53c:	2d07      	cmp	r5, #7
 800a53e:	d199      	bne.n	800a474 <_scanf_float+0x68>
 800a540:	2508      	movs	r5, #8
 800a542:	e02f      	b.n	800a5a4 <_scanf_float+0x198>
 800a544:	2b74      	cmp	r3, #116	@ 0x74
 800a546:	d073      	beq.n	800a630 <_scanf_float+0x224>
 800a548:	2b79      	cmp	r3, #121	@ 0x79
 800a54a:	e7f6      	b.n	800a53a <_scanf_float+0x12e>
 800a54c:	6821      	ldr	r1, [r4, #0]
 800a54e:	05c8      	lsls	r0, r1, #23
 800a550:	d51e      	bpl.n	800a590 <_scanf_float+0x184>
 800a552:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a556:	6021      	str	r1, [r4, #0]
 800a558:	3701      	adds	r7, #1
 800a55a:	f1bb 0f00 	cmp.w	fp, #0
 800a55e:	d003      	beq.n	800a568 <_scanf_float+0x15c>
 800a560:	3201      	adds	r2, #1
 800a562:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800a566:	60a2      	str	r2, [r4, #8]
 800a568:	68a3      	ldr	r3, [r4, #8]
 800a56a:	3b01      	subs	r3, #1
 800a56c:	60a3      	str	r3, [r4, #8]
 800a56e:	6923      	ldr	r3, [r4, #16]
 800a570:	3301      	adds	r3, #1
 800a572:	6123      	str	r3, [r4, #16]
 800a574:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a578:	3b01      	subs	r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f8c9 3004 	str.w	r3, [r9, #4]
 800a580:	f340 8083 	ble.w	800a68a <_scanf_float+0x27e>
 800a584:	f8d9 3000 	ldr.w	r3, [r9]
 800a588:	3301      	adds	r3, #1
 800a58a:	f8c9 3000 	str.w	r3, [r9]
 800a58e:	e763      	b.n	800a458 <_scanf_float+0x4c>
 800a590:	eb1a 0105 	adds.w	r1, sl, r5
 800a594:	f47f af6e 	bne.w	800a474 <_scanf_float+0x68>
 800a598:	460d      	mov	r5, r1
 800a59a:	468a      	mov	sl, r1
 800a59c:	6822      	ldr	r2, [r4, #0]
 800a59e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a5a2:	6022      	str	r2, [r4, #0]
 800a5a4:	f806 3b01 	strb.w	r3, [r6], #1
 800a5a8:	e7de      	b.n	800a568 <_scanf_float+0x15c>
 800a5aa:	6822      	ldr	r2, [r4, #0]
 800a5ac:	0610      	lsls	r0, r2, #24
 800a5ae:	f57f af61 	bpl.w	800a474 <_scanf_float+0x68>
 800a5b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a5b6:	6022      	str	r2, [r4, #0]
 800a5b8:	e7f4      	b.n	800a5a4 <_scanf_float+0x198>
 800a5ba:	f1ba 0f00 	cmp.w	sl, #0
 800a5be:	d10c      	bne.n	800a5da <_scanf_float+0x1ce>
 800a5c0:	b977      	cbnz	r7, 800a5e0 <_scanf_float+0x1d4>
 800a5c2:	6822      	ldr	r2, [r4, #0]
 800a5c4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a5c8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a5cc:	d108      	bne.n	800a5e0 <_scanf_float+0x1d4>
 800a5ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a5d2:	f04f 0a01 	mov.w	sl, #1
 800a5d6:	6022      	str	r2, [r4, #0]
 800a5d8:	e7e4      	b.n	800a5a4 <_scanf_float+0x198>
 800a5da:	f1ba 0f02 	cmp.w	sl, #2
 800a5de:	d051      	beq.n	800a684 <_scanf_float+0x278>
 800a5e0:	2d01      	cmp	r5, #1
 800a5e2:	d002      	beq.n	800a5ea <_scanf_float+0x1de>
 800a5e4:	2d04      	cmp	r5, #4
 800a5e6:	f47f af45 	bne.w	800a474 <_scanf_float+0x68>
 800a5ea:	3501      	adds	r5, #1
 800a5ec:	b2ed      	uxtb	r5, r5
 800a5ee:	e7d9      	b.n	800a5a4 <_scanf_float+0x198>
 800a5f0:	f1ba 0f01 	cmp.w	sl, #1
 800a5f4:	f47f af3e 	bne.w	800a474 <_scanf_float+0x68>
 800a5f8:	f04f 0a02 	mov.w	sl, #2
 800a5fc:	e7d2      	b.n	800a5a4 <_scanf_float+0x198>
 800a5fe:	b975      	cbnz	r5, 800a61e <_scanf_float+0x212>
 800a600:	2f00      	cmp	r7, #0
 800a602:	f47f af38 	bne.w	800a476 <_scanf_float+0x6a>
 800a606:	6822      	ldr	r2, [r4, #0]
 800a608:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a60c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a610:	f040 80ff 	bne.w	800a812 <_scanf_float+0x406>
 800a614:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a618:	2501      	movs	r5, #1
 800a61a:	6022      	str	r2, [r4, #0]
 800a61c:	e7c2      	b.n	800a5a4 <_scanf_float+0x198>
 800a61e:	2d03      	cmp	r5, #3
 800a620:	d0e3      	beq.n	800a5ea <_scanf_float+0x1de>
 800a622:	2d05      	cmp	r5, #5
 800a624:	e7df      	b.n	800a5e6 <_scanf_float+0x1da>
 800a626:	2d02      	cmp	r5, #2
 800a628:	f47f af24 	bne.w	800a474 <_scanf_float+0x68>
 800a62c:	2503      	movs	r5, #3
 800a62e:	e7b9      	b.n	800a5a4 <_scanf_float+0x198>
 800a630:	2d06      	cmp	r5, #6
 800a632:	f47f af1f 	bne.w	800a474 <_scanf_float+0x68>
 800a636:	2507      	movs	r5, #7
 800a638:	e7b4      	b.n	800a5a4 <_scanf_float+0x198>
 800a63a:	6822      	ldr	r2, [r4, #0]
 800a63c:	0591      	lsls	r1, r2, #22
 800a63e:	f57f af19 	bpl.w	800a474 <_scanf_float+0x68>
 800a642:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a646:	6022      	str	r2, [r4, #0]
 800a648:	9702      	str	r7, [sp, #8]
 800a64a:	e7ab      	b.n	800a5a4 <_scanf_float+0x198>
 800a64c:	6822      	ldr	r2, [r4, #0]
 800a64e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a652:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a656:	d005      	beq.n	800a664 <_scanf_float+0x258>
 800a658:	0550      	lsls	r0, r2, #21
 800a65a:	f57f af0b 	bpl.w	800a474 <_scanf_float+0x68>
 800a65e:	2f00      	cmp	r7, #0
 800a660:	f000 80d7 	beq.w	800a812 <_scanf_float+0x406>
 800a664:	0591      	lsls	r1, r2, #22
 800a666:	bf58      	it	pl
 800a668:	9902      	ldrpl	r1, [sp, #8]
 800a66a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a66e:	bf58      	it	pl
 800a670:	1a79      	subpl	r1, r7, r1
 800a672:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a676:	f04f 0700 	mov.w	r7, #0
 800a67a:	bf58      	it	pl
 800a67c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a680:	6022      	str	r2, [r4, #0]
 800a682:	e78f      	b.n	800a5a4 <_scanf_float+0x198>
 800a684:	f04f 0a03 	mov.w	sl, #3
 800a688:	e78c      	b.n	800a5a4 <_scanf_float+0x198>
 800a68a:	4649      	mov	r1, r9
 800a68c:	4640      	mov	r0, r8
 800a68e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a692:	4798      	blx	r3
 800a694:	2800      	cmp	r0, #0
 800a696:	f43f aedf 	beq.w	800a458 <_scanf_float+0x4c>
 800a69a:	e6eb      	b.n	800a474 <_scanf_float+0x68>
 800a69c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a6a0:	464a      	mov	r2, r9
 800a6a2:	4640      	mov	r0, r8
 800a6a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6a8:	4798      	blx	r3
 800a6aa:	6923      	ldr	r3, [r4, #16]
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	6123      	str	r3, [r4, #16]
 800a6b0:	e6eb      	b.n	800a48a <_scanf_float+0x7e>
 800a6b2:	1e6b      	subs	r3, r5, #1
 800a6b4:	2b06      	cmp	r3, #6
 800a6b6:	d824      	bhi.n	800a702 <_scanf_float+0x2f6>
 800a6b8:	2d02      	cmp	r5, #2
 800a6ba:	d836      	bhi.n	800a72a <_scanf_float+0x31e>
 800a6bc:	9b01      	ldr	r3, [sp, #4]
 800a6be:	429e      	cmp	r6, r3
 800a6c0:	f67f aee7 	bls.w	800a492 <_scanf_float+0x86>
 800a6c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a6c8:	464a      	mov	r2, r9
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6d0:	4798      	blx	r3
 800a6d2:	6923      	ldr	r3, [r4, #16]
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	6123      	str	r3, [r4, #16]
 800a6d8:	e7f0      	b.n	800a6bc <_scanf_float+0x2b0>
 800a6da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a6de:	464a      	mov	r2, r9
 800a6e0:	4640      	mov	r0, r8
 800a6e2:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a6e6:	4798      	blx	r3
 800a6e8:	6923      	ldr	r3, [r4, #16]
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	6123      	str	r3, [r4, #16]
 800a6ee:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a6f2:	fa5f fa8a 	uxtb.w	sl, sl
 800a6f6:	f1ba 0f02 	cmp.w	sl, #2
 800a6fa:	d1ee      	bne.n	800a6da <_scanf_float+0x2ce>
 800a6fc:	3d03      	subs	r5, #3
 800a6fe:	b2ed      	uxtb	r5, r5
 800a700:	1b76      	subs	r6, r6, r5
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	05da      	lsls	r2, r3, #23
 800a706:	d530      	bpl.n	800a76a <_scanf_float+0x35e>
 800a708:	055b      	lsls	r3, r3, #21
 800a70a:	d511      	bpl.n	800a730 <_scanf_float+0x324>
 800a70c:	9b01      	ldr	r3, [sp, #4]
 800a70e:	429e      	cmp	r6, r3
 800a710:	f67f aebf 	bls.w	800a492 <_scanf_float+0x86>
 800a714:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a718:	464a      	mov	r2, r9
 800a71a:	4640      	mov	r0, r8
 800a71c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a720:	4798      	blx	r3
 800a722:	6923      	ldr	r3, [r4, #16]
 800a724:	3b01      	subs	r3, #1
 800a726:	6123      	str	r3, [r4, #16]
 800a728:	e7f0      	b.n	800a70c <_scanf_float+0x300>
 800a72a:	46aa      	mov	sl, r5
 800a72c:	46b3      	mov	fp, r6
 800a72e:	e7de      	b.n	800a6ee <_scanf_float+0x2e2>
 800a730:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a734:	6923      	ldr	r3, [r4, #16]
 800a736:	2965      	cmp	r1, #101	@ 0x65
 800a738:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a73c:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800a740:	6123      	str	r3, [r4, #16]
 800a742:	d00c      	beq.n	800a75e <_scanf_float+0x352>
 800a744:	2945      	cmp	r1, #69	@ 0x45
 800a746:	d00a      	beq.n	800a75e <_scanf_float+0x352>
 800a748:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a74c:	464a      	mov	r2, r9
 800a74e:	4640      	mov	r0, r8
 800a750:	4798      	blx	r3
 800a752:	6923      	ldr	r3, [r4, #16]
 800a754:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a758:	3b01      	subs	r3, #1
 800a75a:	1eb5      	subs	r5, r6, #2
 800a75c:	6123      	str	r3, [r4, #16]
 800a75e:	464a      	mov	r2, r9
 800a760:	4640      	mov	r0, r8
 800a762:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a766:	4798      	blx	r3
 800a768:	462e      	mov	r6, r5
 800a76a:	6822      	ldr	r2, [r4, #0]
 800a76c:	f012 0210 	ands.w	r2, r2, #16
 800a770:	d001      	beq.n	800a776 <_scanf_float+0x36a>
 800a772:	2000      	movs	r0, #0
 800a774:	e68e      	b.n	800a494 <_scanf_float+0x88>
 800a776:	7032      	strb	r2, [r6, #0]
 800a778:	6823      	ldr	r3, [r4, #0]
 800a77a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a77e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a782:	d125      	bne.n	800a7d0 <_scanf_float+0x3c4>
 800a784:	9b02      	ldr	r3, [sp, #8]
 800a786:	429f      	cmp	r7, r3
 800a788:	d00a      	beq.n	800a7a0 <_scanf_float+0x394>
 800a78a:	1bda      	subs	r2, r3, r7
 800a78c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a790:	429e      	cmp	r6, r3
 800a792:	bf28      	it	cs
 800a794:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a798:	4630      	mov	r0, r6
 800a79a:	491f      	ldr	r1, [pc, #124]	@ (800a818 <_scanf_float+0x40c>)
 800a79c:	f000 f876 	bl	800a88c <siprintf>
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	4640      	mov	r0, r8
 800a7a4:	9901      	ldr	r1, [sp, #4]
 800a7a6:	f000 ff33 	bl	800b610 <_strtod_r>
 800a7aa:	9b03      	ldr	r3, [sp, #12]
 800a7ac:	6825      	ldr	r5, [r4, #0]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f015 0f02 	tst.w	r5, #2
 800a7b4:	4606      	mov	r6, r0
 800a7b6:	460f      	mov	r7, r1
 800a7b8:	f103 0204 	add.w	r2, r3, #4
 800a7bc:	d015      	beq.n	800a7ea <_scanf_float+0x3de>
 800a7be:	9903      	ldr	r1, [sp, #12]
 800a7c0:	600a      	str	r2, [r1, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	e9c3 6700 	strd	r6, r7, [r3]
 800a7c8:	68e3      	ldr	r3, [r4, #12]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	60e3      	str	r3, [r4, #12]
 800a7ce:	e7d0      	b.n	800a772 <_scanf_float+0x366>
 800a7d0:	9b04      	ldr	r3, [sp, #16]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d0e4      	beq.n	800a7a0 <_scanf_float+0x394>
 800a7d6:	9905      	ldr	r1, [sp, #20]
 800a7d8:	230a      	movs	r3, #10
 800a7da:	4640      	mov	r0, r8
 800a7dc:	3101      	adds	r1, #1
 800a7de:	f000 ff97 	bl	800b710 <_strtol_r>
 800a7e2:	9b04      	ldr	r3, [sp, #16]
 800a7e4:	9e05      	ldr	r6, [sp, #20]
 800a7e6:	1ac2      	subs	r2, r0, r3
 800a7e8:	e7d0      	b.n	800a78c <_scanf_float+0x380>
 800a7ea:	076d      	lsls	r5, r5, #29
 800a7ec:	d4e7      	bmi.n	800a7be <_scanf_float+0x3b2>
 800a7ee:	9d03      	ldr	r5, [sp, #12]
 800a7f0:	602a      	str	r2, [r5, #0]
 800a7f2:	681d      	ldr	r5, [r3, #0]
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	f7f6 f908 	bl	8000a0c <__aeabi_dcmpun>
 800a7fc:	b120      	cbz	r0, 800a808 <_scanf_float+0x3fc>
 800a7fe:	4807      	ldr	r0, [pc, #28]	@ (800a81c <_scanf_float+0x410>)
 800a800:	f001 f81e 	bl	800b840 <nanf>
 800a804:	6028      	str	r0, [r5, #0]
 800a806:	e7df      	b.n	800a7c8 <_scanf_float+0x3bc>
 800a808:	4630      	mov	r0, r6
 800a80a:	4639      	mov	r1, r7
 800a80c:	f7f6 f95c 	bl	8000ac8 <__aeabi_d2f>
 800a810:	e7f8      	b.n	800a804 <_scanf_float+0x3f8>
 800a812:	2700      	movs	r7, #0
 800a814:	e633      	b.n	800a47e <_scanf_float+0x72>
 800a816:	bf00      	nop
 800a818:	0800ec96 	.word	0x0800ec96
 800a81c:	0800ee37 	.word	0x0800ee37

0800a820 <sniprintf>:
 800a820:	b40c      	push	{r2, r3}
 800a822:	b530      	push	{r4, r5, lr}
 800a824:	4b18      	ldr	r3, [pc, #96]	@ (800a888 <sniprintf+0x68>)
 800a826:	1e0c      	subs	r4, r1, #0
 800a828:	681d      	ldr	r5, [r3, #0]
 800a82a:	b09d      	sub	sp, #116	@ 0x74
 800a82c:	da08      	bge.n	800a840 <sniprintf+0x20>
 800a82e:	238b      	movs	r3, #139	@ 0x8b
 800a830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a834:	602b      	str	r3, [r5, #0]
 800a836:	b01d      	add	sp, #116	@ 0x74
 800a838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a83c:	b002      	add	sp, #8
 800a83e:	4770      	bx	lr
 800a840:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a844:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a848:	f04f 0300 	mov.w	r3, #0
 800a84c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a84e:	bf0c      	ite	eq
 800a850:	4623      	moveq	r3, r4
 800a852:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a856:	9304      	str	r3, [sp, #16]
 800a858:	9307      	str	r3, [sp, #28]
 800a85a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a85e:	9002      	str	r0, [sp, #8]
 800a860:	9006      	str	r0, [sp, #24]
 800a862:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a866:	4628      	mov	r0, r5
 800a868:	ab21      	add	r3, sp, #132	@ 0x84
 800a86a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a86c:	a902      	add	r1, sp, #8
 800a86e:	9301      	str	r3, [sp, #4]
 800a870:	f002 f9da 	bl	800cc28 <_svfiprintf_r>
 800a874:	1c43      	adds	r3, r0, #1
 800a876:	bfbc      	itt	lt
 800a878:	238b      	movlt	r3, #139	@ 0x8b
 800a87a:	602b      	strlt	r3, [r5, #0]
 800a87c:	2c00      	cmp	r4, #0
 800a87e:	d0da      	beq.n	800a836 <sniprintf+0x16>
 800a880:	2200      	movs	r2, #0
 800a882:	9b02      	ldr	r3, [sp, #8]
 800a884:	701a      	strb	r2, [r3, #0]
 800a886:	e7d6      	b.n	800a836 <sniprintf+0x16>
 800a888:	20000184 	.word	0x20000184

0800a88c <siprintf>:
 800a88c:	b40e      	push	{r1, r2, r3}
 800a88e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a892:	b510      	push	{r4, lr}
 800a894:	2400      	movs	r4, #0
 800a896:	b09d      	sub	sp, #116	@ 0x74
 800a898:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a89a:	9002      	str	r0, [sp, #8]
 800a89c:	9006      	str	r0, [sp, #24]
 800a89e:	9107      	str	r1, [sp, #28]
 800a8a0:	9104      	str	r1, [sp, #16]
 800a8a2:	4809      	ldr	r0, [pc, #36]	@ (800a8c8 <siprintf+0x3c>)
 800a8a4:	4909      	ldr	r1, [pc, #36]	@ (800a8cc <siprintf+0x40>)
 800a8a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8aa:	9105      	str	r1, [sp, #20]
 800a8ac:	6800      	ldr	r0, [r0, #0]
 800a8ae:	a902      	add	r1, sp, #8
 800a8b0:	9301      	str	r3, [sp, #4]
 800a8b2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a8b4:	f002 f9b8 	bl	800cc28 <_svfiprintf_r>
 800a8b8:	9b02      	ldr	r3, [sp, #8]
 800a8ba:	701c      	strb	r4, [r3, #0]
 800a8bc:	b01d      	add	sp, #116	@ 0x74
 800a8be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8c2:	b003      	add	sp, #12
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	20000184 	.word	0x20000184
 800a8cc:	ffff0208 	.word	0xffff0208

0800a8d0 <std>:
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	b510      	push	{r4, lr}
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	e9c0 3300 	strd	r3, r3, [r0]
 800a8da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8de:	6083      	str	r3, [r0, #8]
 800a8e0:	8181      	strh	r1, [r0, #12]
 800a8e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a8e4:	81c2      	strh	r2, [r0, #14]
 800a8e6:	6183      	str	r3, [r0, #24]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	2208      	movs	r2, #8
 800a8ec:	305c      	adds	r0, #92	@ 0x5c
 800a8ee:	f000 ff39 	bl	800b764 <memset>
 800a8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a928 <std+0x58>)
 800a8f4:	6224      	str	r4, [r4, #32]
 800a8f6:	6263      	str	r3, [r4, #36]	@ 0x24
 800a8f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a92c <std+0x5c>)
 800a8fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a8fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a930 <std+0x60>)
 800a8fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a900:	4b0c      	ldr	r3, [pc, #48]	@ (800a934 <std+0x64>)
 800a902:	6323      	str	r3, [r4, #48]	@ 0x30
 800a904:	4b0c      	ldr	r3, [pc, #48]	@ (800a938 <std+0x68>)
 800a906:	429c      	cmp	r4, r3
 800a908:	d006      	beq.n	800a918 <std+0x48>
 800a90a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a90e:	4294      	cmp	r4, r2
 800a910:	d002      	beq.n	800a918 <std+0x48>
 800a912:	33d0      	adds	r3, #208	@ 0xd0
 800a914:	429c      	cmp	r4, r3
 800a916:	d105      	bne.n	800a924 <std+0x54>
 800a918:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a91c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a920:	f000 bf64 	b.w	800b7ec <__retarget_lock_init_recursive>
 800a924:	bd10      	pop	{r4, pc}
 800a926:	bf00      	nop
 800a928:	0800da41 	.word	0x0800da41
 800a92c:	0800da63 	.word	0x0800da63
 800a930:	0800da9b 	.word	0x0800da9b
 800a934:	0800dabf 	.word	0x0800dabf
 800a938:	20000a48 	.word	0x20000a48

0800a93c <stdio_exit_handler>:
 800a93c:	4a02      	ldr	r2, [pc, #8]	@ (800a948 <stdio_exit_handler+0xc>)
 800a93e:	4903      	ldr	r1, [pc, #12]	@ (800a94c <stdio_exit_handler+0x10>)
 800a940:	4803      	ldr	r0, [pc, #12]	@ (800a950 <stdio_exit_handler+0x14>)
 800a942:	f000 bef1 	b.w	800b728 <_fwalk_sglue>
 800a946:	bf00      	nop
 800a948:	2000000c 	.word	0x2000000c
 800a94c:	0800d099 	.word	0x0800d099
 800a950:	20000188 	.word	0x20000188

0800a954 <cleanup_stdio>:
 800a954:	6841      	ldr	r1, [r0, #4]
 800a956:	4b0c      	ldr	r3, [pc, #48]	@ (800a988 <cleanup_stdio+0x34>)
 800a958:	b510      	push	{r4, lr}
 800a95a:	4299      	cmp	r1, r3
 800a95c:	4604      	mov	r4, r0
 800a95e:	d001      	beq.n	800a964 <cleanup_stdio+0x10>
 800a960:	f002 fb9a 	bl	800d098 <_fflush_r>
 800a964:	68a1      	ldr	r1, [r4, #8]
 800a966:	4b09      	ldr	r3, [pc, #36]	@ (800a98c <cleanup_stdio+0x38>)
 800a968:	4299      	cmp	r1, r3
 800a96a:	d002      	beq.n	800a972 <cleanup_stdio+0x1e>
 800a96c:	4620      	mov	r0, r4
 800a96e:	f002 fb93 	bl	800d098 <_fflush_r>
 800a972:	68e1      	ldr	r1, [r4, #12]
 800a974:	4b06      	ldr	r3, [pc, #24]	@ (800a990 <cleanup_stdio+0x3c>)
 800a976:	4299      	cmp	r1, r3
 800a978:	d004      	beq.n	800a984 <cleanup_stdio+0x30>
 800a97a:	4620      	mov	r0, r4
 800a97c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a980:	f002 bb8a 	b.w	800d098 <_fflush_r>
 800a984:	bd10      	pop	{r4, pc}
 800a986:	bf00      	nop
 800a988:	20000a48 	.word	0x20000a48
 800a98c:	20000ab0 	.word	0x20000ab0
 800a990:	20000b18 	.word	0x20000b18

0800a994 <global_stdio_init.part.0>:
 800a994:	b510      	push	{r4, lr}
 800a996:	4b0b      	ldr	r3, [pc, #44]	@ (800a9c4 <global_stdio_init.part.0+0x30>)
 800a998:	4c0b      	ldr	r4, [pc, #44]	@ (800a9c8 <global_stdio_init.part.0+0x34>)
 800a99a:	4a0c      	ldr	r2, [pc, #48]	@ (800a9cc <global_stdio_init.part.0+0x38>)
 800a99c:	4620      	mov	r0, r4
 800a99e:	601a      	str	r2, [r3, #0]
 800a9a0:	2104      	movs	r1, #4
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f7ff ff94 	bl	800a8d0 <std>
 800a9a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	2109      	movs	r1, #9
 800a9b0:	f7ff ff8e 	bl	800a8d0 <std>
 800a9b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a9b8:	2202      	movs	r2, #2
 800a9ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9be:	2112      	movs	r1, #18
 800a9c0:	f7ff bf86 	b.w	800a8d0 <std>
 800a9c4:	20000b80 	.word	0x20000b80
 800a9c8:	20000a48 	.word	0x20000a48
 800a9cc:	0800a93d 	.word	0x0800a93d

0800a9d0 <__sfp_lock_acquire>:
 800a9d0:	4801      	ldr	r0, [pc, #4]	@ (800a9d8 <__sfp_lock_acquire+0x8>)
 800a9d2:	f000 bf0c 	b.w	800b7ee <__retarget_lock_acquire_recursive>
 800a9d6:	bf00      	nop
 800a9d8:	20000b85 	.word	0x20000b85

0800a9dc <__sfp_lock_release>:
 800a9dc:	4801      	ldr	r0, [pc, #4]	@ (800a9e4 <__sfp_lock_release+0x8>)
 800a9de:	f000 bf07 	b.w	800b7f0 <__retarget_lock_release_recursive>
 800a9e2:	bf00      	nop
 800a9e4:	20000b85 	.word	0x20000b85

0800a9e8 <__sinit>:
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	f7ff fff0 	bl	800a9d0 <__sfp_lock_acquire>
 800a9f0:	6a23      	ldr	r3, [r4, #32]
 800a9f2:	b11b      	cbz	r3, 800a9fc <__sinit+0x14>
 800a9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9f8:	f7ff bff0 	b.w	800a9dc <__sfp_lock_release>
 800a9fc:	4b04      	ldr	r3, [pc, #16]	@ (800aa10 <__sinit+0x28>)
 800a9fe:	6223      	str	r3, [r4, #32]
 800aa00:	4b04      	ldr	r3, [pc, #16]	@ (800aa14 <__sinit+0x2c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1f5      	bne.n	800a9f4 <__sinit+0xc>
 800aa08:	f7ff ffc4 	bl	800a994 <global_stdio_init.part.0>
 800aa0c:	e7f2      	b.n	800a9f4 <__sinit+0xc>
 800aa0e:	bf00      	nop
 800aa10:	0800a955 	.word	0x0800a955
 800aa14:	20000b80 	.word	0x20000b80

0800aa18 <sulp>:
 800aa18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa1c:	460f      	mov	r7, r1
 800aa1e:	4690      	mov	r8, r2
 800aa20:	f002 feda 	bl	800d7d8 <__ulp>
 800aa24:	4604      	mov	r4, r0
 800aa26:	460d      	mov	r5, r1
 800aa28:	f1b8 0f00 	cmp.w	r8, #0
 800aa2c:	d011      	beq.n	800aa52 <sulp+0x3a>
 800aa2e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800aa32:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	dd0b      	ble.n	800aa52 <sulp+0x3a>
 800aa3a:	2400      	movs	r4, #0
 800aa3c:	051b      	lsls	r3, r3, #20
 800aa3e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aa42:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800aa46:	4622      	mov	r2, r4
 800aa48:	462b      	mov	r3, r5
 800aa4a:	f7f5 fd45 	bl	80004d8 <__aeabi_dmul>
 800aa4e:	4604      	mov	r4, r0
 800aa50:	460d      	mov	r5, r1
 800aa52:	4620      	mov	r0, r4
 800aa54:	4629      	mov	r1, r5
 800aa56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa5a:	0000      	movs	r0, r0
 800aa5c:	0000      	movs	r0, r0
	...

0800aa60 <_strtod_l>:
 800aa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa64:	b09f      	sub	sp, #124	@ 0x7c
 800aa66:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aa68:	2200      	movs	r2, #0
 800aa6a:	460c      	mov	r4, r1
 800aa6c:	921a      	str	r2, [sp, #104]	@ 0x68
 800aa6e:	f04f 0a00 	mov.w	sl, #0
 800aa72:	f04f 0b00 	mov.w	fp, #0
 800aa76:	460a      	mov	r2, r1
 800aa78:	9005      	str	r0, [sp, #20]
 800aa7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa7c:	7811      	ldrb	r1, [r2, #0]
 800aa7e:	292b      	cmp	r1, #43	@ 0x2b
 800aa80:	d048      	beq.n	800ab14 <_strtod_l+0xb4>
 800aa82:	d836      	bhi.n	800aaf2 <_strtod_l+0x92>
 800aa84:	290d      	cmp	r1, #13
 800aa86:	d830      	bhi.n	800aaea <_strtod_l+0x8a>
 800aa88:	2908      	cmp	r1, #8
 800aa8a:	d830      	bhi.n	800aaee <_strtod_l+0x8e>
 800aa8c:	2900      	cmp	r1, #0
 800aa8e:	d039      	beq.n	800ab04 <_strtod_l+0xa4>
 800aa90:	2200      	movs	r2, #0
 800aa92:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800aa96:	782a      	ldrb	r2, [r5, #0]
 800aa98:	2a30      	cmp	r2, #48	@ 0x30
 800aa9a:	f040 80b0 	bne.w	800abfe <_strtod_l+0x19e>
 800aa9e:	786a      	ldrb	r2, [r5, #1]
 800aaa0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aaa4:	2a58      	cmp	r2, #88	@ 0x58
 800aaa6:	d16c      	bne.n	800ab82 <_strtod_l+0x122>
 800aaa8:	9302      	str	r3, [sp, #8]
 800aaaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaac:	4a8f      	ldr	r2, [pc, #572]	@ (800acec <_strtod_l+0x28c>)
 800aaae:	9301      	str	r3, [sp, #4]
 800aab0:	ab1a      	add	r3, sp, #104	@ 0x68
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	9805      	ldr	r0, [sp, #20]
 800aab6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aab8:	a919      	add	r1, sp, #100	@ 0x64
 800aaba:	f001 fd89 	bl	800c5d0 <__gethex>
 800aabe:	f010 060f 	ands.w	r6, r0, #15
 800aac2:	4604      	mov	r4, r0
 800aac4:	d005      	beq.n	800aad2 <_strtod_l+0x72>
 800aac6:	2e06      	cmp	r6, #6
 800aac8:	d126      	bne.n	800ab18 <_strtod_l+0xb8>
 800aaca:	2300      	movs	r3, #0
 800aacc:	3501      	adds	r5, #1
 800aace:	9519      	str	r5, [sp, #100]	@ 0x64
 800aad0:	930e      	str	r3, [sp, #56]	@ 0x38
 800aad2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f040 8582 	bne.w	800b5de <_strtod_l+0xb7e>
 800aada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aadc:	b1bb      	cbz	r3, 800ab0e <_strtod_l+0xae>
 800aade:	4650      	mov	r0, sl
 800aae0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800aae4:	b01f      	add	sp, #124	@ 0x7c
 800aae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaea:	2920      	cmp	r1, #32
 800aaec:	d1d0      	bne.n	800aa90 <_strtod_l+0x30>
 800aaee:	3201      	adds	r2, #1
 800aaf0:	e7c3      	b.n	800aa7a <_strtod_l+0x1a>
 800aaf2:	292d      	cmp	r1, #45	@ 0x2d
 800aaf4:	d1cc      	bne.n	800aa90 <_strtod_l+0x30>
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	910e      	str	r1, [sp, #56]	@ 0x38
 800aafa:	1c51      	adds	r1, r2, #1
 800aafc:	9119      	str	r1, [sp, #100]	@ 0x64
 800aafe:	7852      	ldrb	r2, [r2, #1]
 800ab00:	2a00      	cmp	r2, #0
 800ab02:	d1c7      	bne.n	800aa94 <_strtod_l+0x34>
 800ab04:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab06:	9419      	str	r4, [sp, #100]	@ 0x64
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f040 8566 	bne.w	800b5da <_strtod_l+0xb7a>
 800ab0e:	4650      	mov	r0, sl
 800ab10:	4659      	mov	r1, fp
 800ab12:	e7e7      	b.n	800aae4 <_strtod_l+0x84>
 800ab14:	2100      	movs	r1, #0
 800ab16:	e7ef      	b.n	800aaf8 <_strtod_l+0x98>
 800ab18:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ab1a:	b13a      	cbz	r2, 800ab2c <_strtod_l+0xcc>
 800ab1c:	2135      	movs	r1, #53	@ 0x35
 800ab1e:	a81c      	add	r0, sp, #112	@ 0x70
 800ab20:	f002 ff4a 	bl	800d9b8 <__copybits>
 800ab24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab26:	9805      	ldr	r0, [sp, #20]
 800ab28:	f002 fb2a 	bl	800d180 <_Bfree>
 800ab2c:	3e01      	subs	r6, #1
 800ab2e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ab30:	2e04      	cmp	r6, #4
 800ab32:	d806      	bhi.n	800ab42 <_strtod_l+0xe2>
 800ab34:	e8df f006 	tbb	[pc, r6]
 800ab38:	201d0314 	.word	0x201d0314
 800ab3c:	14          	.byte	0x14
 800ab3d:	00          	.byte	0x00
 800ab3e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ab42:	05e1      	lsls	r1, r4, #23
 800ab44:	bf48      	it	mi
 800ab46:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ab4a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab4e:	0d1b      	lsrs	r3, r3, #20
 800ab50:	051b      	lsls	r3, r3, #20
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1bd      	bne.n	800aad2 <_strtod_l+0x72>
 800ab56:	f000 fe1f 	bl	800b798 <__errno>
 800ab5a:	2322      	movs	r3, #34	@ 0x22
 800ab5c:	6003      	str	r3, [r0, #0]
 800ab5e:	e7b8      	b.n	800aad2 <_strtod_l+0x72>
 800ab60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ab64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ab68:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ab6c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ab70:	e7e7      	b.n	800ab42 <_strtod_l+0xe2>
 800ab72:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800acf0 <_strtod_l+0x290>
 800ab76:	e7e4      	b.n	800ab42 <_strtod_l+0xe2>
 800ab78:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ab7c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ab80:	e7df      	b.n	800ab42 <_strtod_l+0xe2>
 800ab82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab84:	1c5a      	adds	r2, r3, #1
 800ab86:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab88:	785b      	ldrb	r3, [r3, #1]
 800ab8a:	2b30      	cmp	r3, #48	@ 0x30
 800ab8c:	d0f9      	beq.n	800ab82 <_strtod_l+0x122>
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d09f      	beq.n	800aad2 <_strtod_l+0x72>
 800ab92:	2301      	movs	r3, #1
 800ab94:	2700      	movs	r7, #0
 800ab96:	220a      	movs	r2, #10
 800ab98:	46b9      	mov	r9, r7
 800ab9a:	9308      	str	r3, [sp, #32]
 800ab9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab9e:	970b      	str	r7, [sp, #44]	@ 0x2c
 800aba0:	930c      	str	r3, [sp, #48]	@ 0x30
 800aba2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aba4:	7805      	ldrb	r5, [r0, #0]
 800aba6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800abaa:	b2d9      	uxtb	r1, r3
 800abac:	2909      	cmp	r1, #9
 800abae:	d928      	bls.n	800ac02 <_strtod_l+0x1a2>
 800abb0:	2201      	movs	r2, #1
 800abb2:	4950      	ldr	r1, [pc, #320]	@ (800acf4 <_strtod_l+0x294>)
 800abb4:	f000 fdde 	bl	800b774 <strncmp>
 800abb8:	2800      	cmp	r0, #0
 800abba:	d032      	beq.n	800ac22 <_strtod_l+0x1c2>
 800abbc:	2000      	movs	r0, #0
 800abbe:	462a      	mov	r2, r5
 800abc0:	4603      	mov	r3, r0
 800abc2:	464d      	mov	r5, r9
 800abc4:	900a      	str	r0, [sp, #40]	@ 0x28
 800abc6:	2a65      	cmp	r2, #101	@ 0x65
 800abc8:	d001      	beq.n	800abce <_strtod_l+0x16e>
 800abca:	2a45      	cmp	r2, #69	@ 0x45
 800abcc:	d114      	bne.n	800abf8 <_strtod_l+0x198>
 800abce:	b91d      	cbnz	r5, 800abd8 <_strtod_l+0x178>
 800abd0:	9a08      	ldr	r2, [sp, #32]
 800abd2:	4302      	orrs	r2, r0
 800abd4:	d096      	beq.n	800ab04 <_strtod_l+0xa4>
 800abd6:	2500      	movs	r5, #0
 800abd8:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800abda:	1c62      	adds	r2, r4, #1
 800abdc:	9219      	str	r2, [sp, #100]	@ 0x64
 800abde:	7862      	ldrb	r2, [r4, #1]
 800abe0:	2a2b      	cmp	r2, #43	@ 0x2b
 800abe2:	d07a      	beq.n	800acda <_strtod_l+0x27a>
 800abe4:	2a2d      	cmp	r2, #45	@ 0x2d
 800abe6:	d07e      	beq.n	800ace6 <_strtod_l+0x286>
 800abe8:	f04f 0c00 	mov.w	ip, #0
 800abec:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800abf0:	2909      	cmp	r1, #9
 800abf2:	f240 8085 	bls.w	800ad00 <_strtod_l+0x2a0>
 800abf6:	9419      	str	r4, [sp, #100]	@ 0x64
 800abf8:	f04f 0800 	mov.w	r8, #0
 800abfc:	e0a5      	b.n	800ad4a <_strtod_l+0x2ea>
 800abfe:	2300      	movs	r3, #0
 800ac00:	e7c8      	b.n	800ab94 <_strtod_l+0x134>
 800ac02:	f1b9 0f08 	cmp.w	r9, #8
 800ac06:	bfd8      	it	le
 800ac08:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ac0a:	f100 0001 	add.w	r0, r0, #1
 800ac0e:	bfd6      	itet	le
 800ac10:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac14:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ac18:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ac1a:	f109 0901 	add.w	r9, r9, #1
 800ac1e:	9019      	str	r0, [sp, #100]	@ 0x64
 800ac20:	e7bf      	b.n	800aba2 <_strtod_l+0x142>
 800ac22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac24:	1c5a      	adds	r2, r3, #1
 800ac26:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac28:	785a      	ldrb	r2, [r3, #1]
 800ac2a:	f1b9 0f00 	cmp.w	r9, #0
 800ac2e:	d03b      	beq.n	800aca8 <_strtod_l+0x248>
 800ac30:	464d      	mov	r5, r9
 800ac32:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac34:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ac38:	2b09      	cmp	r3, #9
 800ac3a:	d912      	bls.n	800ac62 <_strtod_l+0x202>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e7c2      	b.n	800abc6 <_strtod_l+0x166>
 800ac40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac42:	3001      	adds	r0, #1
 800ac44:	1c5a      	adds	r2, r3, #1
 800ac46:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac48:	785a      	ldrb	r2, [r3, #1]
 800ac4a:	2a30      	cmp	r2, #48	@ 0x30
 800ac4c:	d0f8      	beq.n	800ac40 <_strtod_l+0x1e0>
 800ac4e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ac52:	2b08      	cmp	r3, #8
 800ac54:	f200 84c8 	bhi.w	800b5e8 <_strtod_l+0xb88>
 800ac58:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	4605      	mov	r5, r0
 800ac5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac60:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac62:	3a30      	subs	r2, #48	@ 0x30
 800ac64:	f100 0301 	add.w	r3, r0, #1
 800ac68:	d018      	beq.n	800ac9c <_strtod_l+0x23c>
 800ac6a:	462e      	mov	r6, r5
 800ac6c:	f04f 0e0a 	mov.w	lr, #10
 800ac70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac72:	4419      	add	r1, r3
 800ac74:	910a      	str	r1, [sp, #40]	@ 0x28
 800ac76:	1c71      	adds	r1, r6, #1
 800ac78:	eba1 0c05 	sub.w	ip, r1, r5
 800ac7c:	4563      	cmp	r3, ip
 800ac7e:	dc15      	bgt.n	800acac <_strtod_l+0x24c>
 800ac80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ac84:	182b      	adds	r3, r5, r0
 800ac86:	2b08      	cmp	r3, #8
 800ac88:	f105 0501 	add.w	r5, r5, #1
 800ac8c:	4405      	add	r5, r0
 800ac8e:	dc1a      	bgt.n	800acc6 <_strtod_l+0x266>
 800ac90:	230a      	movs	r3, #10
 800ac92:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac94:	fb03 2301 	mla	r3, r3, r1, r2
 800ac98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac9e:	4618      	mov	r0, r3
 800aca0:	1c51      	adds	r1, r2, #1
 800aca2:	9119      	str	r1, [sp, #100]	@ 0x64
 800aca4:	7852      	ldrb	r2, [r2, #1]
 800aca6:	e7c5      	b.n	800ac34 <_strtod_l+0x1d4>
 800aca8:	4648      	mov	r0, r9
 800acaa:	e7ce      	b.n	800ac4a <_strtod_l+0x1ea>
 800acac:	2e08      	cmp	r6, #8
 800acae:	dc05      	bgt.n	800acbc <_strtod_l+0x25c>
 800acb0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800acb2:	fb0e f606 	mul.w	r6, lr, r6
 800acb6:	960b      	str	r6, [sp, #44]	@ 0x2c
 800acb8:	460e      	mov	r6, r1
 800acba:	e7dc      	b.n	800ac76 <_strtod_l+0x216>
 800acbc:	2910      	cmp	r1, #16
 800acbe:	bfd8      	it	le
 800acc0:	fb0e f707 	mulle.w	r7, lr, r7
 800acc4:	e7f8      	b.n	800acb8 <_strtod_l+0x258>
 800acc6:	2b0f      	cmp	r3, #15
 800acc8:	bfdc      	itt	le
 800acca:	230a      	movle	r3, #10
 800accc:	fb03 2707 	mlale	r7, r3, r7, r2
 800acd0:	e7e3      	b.n	800ac9a <_strtod_l+0x23a>
 800acd2:	2300      	movs	r3, #0
 800acd4:	930a      	str	r3, [sp, #40]	@ 0x28
 800acd6:	2301      	movs	r3, #1
 800acd8:	e77a      	b.n	800abd0 <_strtod_l+0x170>
 800acda:	f04f 0c00 	mov.w	ip, #0
 800acde:	1ca2      	adds	r2, r4, #2
 800ace0:	9219      	str	r2, [sp, #100]	@ 0x64
 800ace2:	78a2      	ldrb	r2, [r4, #2]
 800ace4:	e782      	b.n	800abec <_strtod_l+0x18c>
 800ace6:	f04f 0c01 	mov.w	ip, #1
 800acea:	e7f8      	b.n	800acde <_strtod_l+0x27e>
 800acec:	0800ee4c 	.word	0x0800ee4c
 800acf0:	7ff00000 	.word	0x7ff00000
 800acf4:	0800ec9b 	.word	0x0800ec9b
 800acf8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acfa:	1c51      	adds	r1, r2, #1
 800acfc:	9119      	str	r1, [sp, #100]	@ 0x64
 800acfe:	7852      	ldrb	r2, [r2, #1]
 800ad00:	2a30      	cmp	r2, #48	@ 0x30
 800ad02:	d0f9      	beq.n	800acf8 <_strtod_l+0x298>
 800ad04:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ad08:	2908      	cmp	r1, #8
 800ad0a:	f63f af75 	bhi.w	800abf8 <_strtod_l+0x198>
 800ad0e:	f04f 080a 	mov.w	r8, #10
 800ad12:	3a30      	subs	r2, #48	@ 0x30
 800ad14:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad18:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ad1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad1c:	1c56      	adds	r6, r2, #1
 800ad1e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ad20:	7852      	ldrb	r2, [r2, #1]
 800ad22:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ad26:	f1be 0f09 	cmp.w	lr, #9
 800ad2a:	d939      	bls.n	800ada0 <_strtod_l+0x340>
 800ad2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ad2e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ad32:	1a76      	subs	r6, r6, r1
 800ad34:	2e08      	cmp	r6, #8
 800ad36:	dc03      	bgt.n	800ad40 <_strtod_l+0x2e0>
 800ad38:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad3a:	4588      	cmp	r8, r1
 800ad3c:	bfa8      	it	ge
 800ad3e:	4688      	movge	r8, r1
 800ad40:	f1bc 0f00 	cmp.w	ip, #0
 800ad44:	d001      	beq.n	800ad4a <_strtod_l+0x2ea>
 800ad46:	f1c8 0800 	rsb	r8, r8, #0
 800ad4a:	2d00      	cmp	r5, #0
 800ad4c:	d14e      	bne.n	800adec <_strtod_l+0x38c>
 800ad4e:	9908      	ldr	r1, [sp, #32]
 800ad50:	4308      	orrs	r0, r1
 800ad52:	f47f aebe 	bne.w	800aad2 <_strtod_l+0x72>
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	f47f aed4 	bne.w	800ab04 <_strtod_l+0xa4>
 800ad5c:	2a69      	cmp	r2, #105	@ 0x69
 800ad5e:	d028      	beq.n	800adb2 <_strtod_l+0x352>
 800ad60:	dc25      	bgt.n	800adae <_strtod_l+0x34e>
 800ad62:	2a49      	cmp	r2, #73	@ 0x49
 800ad64:	d025      	beq.n	800adb2 <_strtod_l+0x352>
 800ad66:	2a4e      	cmp	r2, #78	@ 0x4e
 800ad68:	f47f aecc 	bne.w	800ab04 <_strtod_l+0xa4>
 800ad6c:	4999      	ldr	r1, [pc, #612]	@ (800afd4 <_strtod_l+0x574>)
 800ad6e:	a819      	add	r0, sp, #100	@ 0x64
 800ad70:	f001 fe50 	bl	800ca14 <__match>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	f43f aec5 	beq.w	800ab04 <_strtod_l+0xa4>
 800ad7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	2b28      	cmp	r3, #40	@ 0x28
 800ad80:	d12e      	bne.n	800ade0 <_strtod_l+0x380>
 800ad82:	4995      	ldr	r1, [pc, #596]	@ (800afd8 <_strtod_l+0x578>)
 800ad84:	aa1c      	add	r2, sp, #112	@ 0x70
 800ad86:	a819      	add	r0, sp, #100	@ 0x64
 800ad88:	f001 fe58 	bl	800ca3c <__hexnan>
 800ad8c:	2805      	cmp	r0, #5
 800ad8e:	d127      	bne.n	800ade0 <_strtod_l+0x380>
 800ad90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ad92:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ad96:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ad9a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ad9e:	e698      	b.n	800aad2 <_strtod_l+0x72>
 800ada0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ada2:	fb08 2101 	mla	r1, r8, r1, r2
 800ada6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800adaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800adac:	e7b5      	b.n	800ad1a <_strtod_l+0x2ba>
 800adae:	2a6e      	cmp	r2, #110	@ 0x6e
 800adb0:	e7da      	b.n	800ad68 <_strtod_l+0x308>
 800adb2:	498a      	ldr	r1, [pc, #552]	@ (800afdc <_strtod_l+0x57c>)
 800adb4:	a819      	add	r0, sp, #100	@ 0x64
 800adb6:	f001 fe2d 	bl	800ca14 <__match>
 800adba:	2800      	cmp	r0, #0
 800adbc:	f43f aea2 	beq.w	800ab04 <_strtod_l+0xa4>
 800adc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adc2:	4987      	ldr	r1, [pc, #540]	@ (800afe0 <_strtod_l+0x580>)
 800adc4:	3b01      	subs	r3, #1
 800adc6:	a819      	add	r0, sp, #100	@ 0x64
 800adc8:	9319      	str	r3, [sp, #100]	@ 0x64
 800adca:	f001 fe23 	bl	800ca14 <__match>
 800adce:	b910      	cbnz	r0, 800add6 <_strtod_l+0x376>
 800add0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800add2:	3301      	adds	r3, #1
 800add4:	9319      	str	r3, [sp, #100]	@ 0x64
 800add6:	f04f 0a00 	mov.w	sl, #0
 800adda:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800afe4 <_strtod_l+0x584>
 800adde:	e678      	b.n	800aad2 <_strtod_l+0x72>
 800ade0:	4881      	ldr	r0, [pc, #516]	@ (800afe8 <_strtod_l+0x588>)
 800ade2:	f000 fd27 	bl	800b834 <nan>
 800ade6:	4682      	mov	sl, r0
 800ade8:	468b      	mov	fp, r1
 800adea:	e672      	b.n	800aad2 <_strtod_l+0x72>
 800adec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adee:	f1b9 0f00 	cmp.w	r9, #0
 800adf2:	bf08      	it	eq
 800adf4:	46a9      	moveq	r9, r5
 800adf6:	eba8 0303 	sub.w	r3, r8, r3
 800adfa:	2d10      	cmp	r5, #16
 800adfc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800adfe:	462c      	mov	r4, r5
 800ae00:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae02:	bfa8      	it	ge
 800ae04:	2410      	movge	r4, #16
 800ae06:	f7f5 faed 	bl	80003e4 <__aeabi_ui2d>
 800ae0a:	2d09      	cmp	r5, #9
 800ae0c:	4682      	mov	sl, r0
 800ae0e:	468b      	mov	fp, r1
 800ae10:	dc11      	bgt.n	800ae36 <_strtod_l+0x3d6>
 800ae12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f43f ae5c 	beq.w	800aad2 <_strtod_l+0x72>
 800ae1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae1c:	dd76      	ble.n	800af0c <_strtod_l+0x4ac>
 800ae1e:	2b16      	cmp	r3, #22
 800ae20:	dc5d      	bgt.n	800aede <_strtod_l+0x47e>
 800ae22:	4972      	ldr	r1, [pc, #456]	@ (800afec <_strtod_l+0x58c>)
 800ae24:	4652      	mov	r2, sl
 800ae26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae2a:	465b      	mov	r3, fp
 800ae2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae30:	f7f5 fb52 	bl	80004d8 <__aeabi_dmul>
 800ae34:	e7d7      	b.n	800ade6 <_strtod_l+0x386>
 800ae36:	4b6d      	ldr	r3, [pc, #436]	@ (800afec <_strtod_l+0x58c>)
 800ae38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ae40:	f7f5 fb4a 	bl	80004d8 <__aeabi_dmul>
 800ae44:	4682      	mov	sl, r0
 800ae46:	4638      	mov	r0, r7
 800ae48:	468b      	mov	fp, r1
 800ae4a:	f7f5 facb 	bl	80003e4 <__aeabi_ui2d>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4650      	mov	r0, sl
 800ae54:	4659      	mov	r1, fp
 800ae56:	f7f5 f989 	bl	800016c <__adddf3>
 800ae5a:	2d0f      	cmp	r5, #15
 800ae5c:	4682      	mov	sl, r0
 800ae5e:	468b      	mov	fp, r1
 800ae60:	ddd7      	ble.n	800ae12 <_strtod_l+0x3b2>
 800ae62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae64:	1b2c      	subs	r4, r5, r4
 800ae66:	441c      	add	r4, r3
 800ae68:	2c00      	cmp	r4, #0
 800ae6a:	f340 8093 	ble.w	800af94 <_strtod_l+0x534>
 800ae6e:	f014 030f 	ands.w	r3, r4, #15
 800ae72:	d00a      	beq.n	800ae8a <_strtod_l+0x42a>
 800ae74:	495d      	ldr	r1, [pc, #372]	@ (800afec <_strtod_l+0x58c>)
 800ae76:	4652      	mov	r2, sl
 800ae78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae80:	465b      	mov	r3, fp
 800ae82:	f7f5 fb29 	bl	80004d8 <__aeabi_dmul>
 800ae86:	4682      	mov	sl, r0
 800ae88:	468b      	mov	fp, r1
 800ae8a:	f034 040f 	bics.w	r4, r4, #15
 800ae8e:	d073      	beq.n	800af78 <_strtod_l+0x518>
 800ae90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ae94:	dd49      	ble.n	800af2a <_strtod_l+0x4ca>
 800ae96:	2400      	movs	r4, #0
 800ae98:	46a0      	mov	r8, r4
 800ae9a:	46a1      	mov	r9, r4
 800ae9c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ae9e:	2322      	movs	r3, #34	@ 0x22
 800aea0:	f04f 0a00 	mov.w	sl, #0
 800aea4:	9a05      	ldr	r2, [sp, #20]
 800aea6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800afe4 <_strtod_l+0x584>
 800aeaa:	6013      	str	r3, [r2, #0]
 800aeac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f43f ae0f 	beq.w	800aad2 <_strtod_l+0x72>
 800aeb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aeb6:	9805      	ldr	r0, [sp, #20]
 800aeb8:	f002 f962 	bl	800d180 <_Bfree>
 800aebc:	4649      	mov	r1, r9
 800aebe:	9805      	ldr	r0, [sp, #20]
 800aec0:	f002 f95e 	bl	800d180 <_Bfree>
 800aec4:	4641      	mov	r1, r8
 800aec6:	9805      	ldr	r0, [sp, #20]
 800aec8:	f002 f95a 	bl	800d180 <_Bfree>
 800aecc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aece:	9805      	ldr	r0, [sp, #20]
 800aed0:	f002 f956 	bl	800d180 <_Bfree>
 800aed4:	4621      	mov	r1, r4
 800aed6:	9805      	ldr	r0, [sp, #20]
 800aed8:	f002 f952 	bl	800d180 <_Bfree>
 800aedc:	e5f9      	b.n	800aad2 <_strtod_l+0x72>
 800aede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aee0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800aee4:	4293      	cmp	r3, r2
 800aee6:	dbbc      	blt.n	800ae62 <_strtod_l+0x402>
 800aee8:	4c40      	ldr	r4, [pc, #256]	@ (800afec <_strtod_l+0x58c>)
 800aeea:	f1c5 050f 	rsb	r5, r5, #15
 800aeee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aef2:	4652      	mov	r2, sl
 800aef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aef8:	465b      	mov	r3, fp
 800aefa:	f7f5 faed 	bl	80004d8 <__aeabi_dmul>
 800aefe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af00:	1b5d      	subs	r5, r3, r5
 800af02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800af06:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af0a:	e791      	b.n	800ae30 <_strtod_l+0x3d0>
 800af0c:	3316      	adds	r3, #22
 800af0e:	dba8      	blt.n	800ae62 <_strtod_l+0x402>
 800af10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af12:	4650      	mov	r0, sl
 800af14:	eba3 0808 	sub.w	r8, r3, r8
 800af18:	4b34      	ldr	r3, [pc, #208]	@ (800afec <_strtod_l+0x58c>)
 800af1a:	4659      	mov	r1, fp
 800af1c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800af20:	e9d8 2300 	ldrd	r2, r3, [r8]
 800af24:	f7f5 fc02 	bl	800072c <__aeabi_ddiv>
 800af28:	e75d      	b.n	800ade6 <_strtod_l+0x386>
 800af2a:	2300      	movs	r3, #0
 800af2c:	4650      	mov	r0, sl
 800af2e:	4659      	mov	r1, fp
 800af30:	461e      	mov	r6, r3
 800af32:	4f2f      	ldr	r7, [pc, #188]	@ (800aff0 <_strtod_l+0x590>)
 800af34:	1124      	asrs	r4, r4, #4
 800af36:	2c01      	cmp	r4, #1
 800af38:	dc21      	bgt.n	800af7e <_strtod_l+0x51e>
 800af3a:	b10b      	cbz	r3, 800af40 <_strtod_l+0x4e0>
 800af3c:	4682      	mov	sl, r0
 800af3e:	468b      	mov	fp, r1
 800af40:	492b      	ldr	r1, [pc, #172]	@ (800aff0 <_strtod_l+0x590>)
 800af42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800af46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800af4a:	4652      	mov	r2, sl
 800af4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af50:	465b      	mov	r3, fp
 800af52:	f7f5 fac1 	bl	80004d8 <__aeabi_dmul>
 800af56:	4b23      	ldr	r3, [pc, #140]	@ (800afe4 <_strtod_l+0x584>)
 800af58:	460a      	mov	r2, r1
 800af5a:	400b      	ands	r3, r1
 800af5c:	4925      	ldr	r1, [pc, #148]	@ (800aff4 <_strtod_l+0x594>)
 800af5e:	4682      	mov	sl, r0
 800af60:	428b      	cmp	r3, r1
 800af62:	d898      	bhi.n	800ae96 <_strtod_l+0x436>
 800af64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800af68:	428b      	cmp	r3, r1
 800af6a:	bf86      	itte	hi
 800af6c:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800af70:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800aff8 <_strtod_l+0x598>
 800af74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800af78:	2300      	movs	r3, #0
 800af7a:	9308      	str	r3, [sp, #32]
 800af7c:	e076      	b.n	800b06c <_strtod_l+0x60c>
 800af7e:	07e2      	lsls	r2, r4, #31
 800af80:	d504      	bpl.n	800af8c <_strtod_l+0x52c>
 800af82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af86:	f7f5 faa7 	bl	80004d8 <__aeabi_dmul>
 800af8a:	2301      	movs	r3, #1
 800af8c:	3601      	adds	r6, #1
 800af8e:	1064      	asrs	r4, r4, #1
 800af90:	3708      	adds	r7, #8
 800af92:	e7d0      	b.n	800af36 <_strtod_l+0x4d6>
 800af94:	d0f0      	beq.n	800af78 <_strtod_l+0x518>
 800af96:	4264      	negs	r4, r4
 800af98:	f014 020f 	ands.w	r2, r4, #15
 800af9c:	d00a      	beq.n	800afb4 <_strtod_l+0x554>
 800af9e:	4b13      	ldr	r3, [pc, #76]	@ (800afec <_strtod_l+0x58c>)
 800afa0:	4650      	mov	r0, sl
 800afa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afa6:	4659      	mov	r1, fp
 800afa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afac:	f7f5 fbbe 	bl	800072c <__aeabi_ddiv>
 800afb0:	4682      	mov	sl, r0
 800afb2:	468b      	mov	fp, r1
 800afb4:	1124      	asrs	r4, r4, #4
 800afb6:	d0df      	beq.n	800af78 <_strtod_l+0x518>
 800afb8:	2c1f      	cmp	r4, #31
 800afba:	dd1f      	ble.n	800affc <_strtod_l+0x59c>
 800afbc:	2400      	movs	r4, #0
 800afbe:	46a0      	mov	r8, r4
 800afc0:	46a1      	mov	r9, r4
 800afc2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800afc4:	2322      	movs	r3, #34	@ 0x22
 800afc6:	9a05      	ldr	r2, [sp, #20]
 800afc8:	f04f 0a00 	mov.w	sl, #0
 800afcc:	f04f 0b00 	mov.w	fp, #0
 800afd0:	6013      	str	r3, [r2, #0]
 800afd2:	e76b      	b.n	800aeac <_strtod_l+0x44c>
 800afd4:	0800ec6f 	.word	0x0800ec6f
 800afd8:	0800ee38 	.word	0x0800ee38
 800afdc:	0800ec67 	.word	0x0800ec67
 800afe0:	0800eca8 	.word	0x0800eca8
 800afe4:	7ff00000 	.word	0x7ff00000
 800afe8:	0800ee37 	.word	0x0800ee37
 800afec:	0800efc0 	.word	0x0800efc0
 800aff0:	0800ef98 	.word	0x0800ef98
 800aff4:	7ca00000 	.word	0x7ca00000
 800aff8:	7fefffff 	.word	0x7fefffff
 800affc:	f014 0310 	ands.w	r3, r4, #16
 800b000:	bf18      	it	ne
 800b002:	236a      	movne	r3, #106	@ 0x6a
 800b004:	4650      	mov	r0, sl
 800b006:	9308      	str	r3, [sp, #32]
 800b008:	4659      	mov	r1, fp
 800b00a:	2300      	movs	r3, #0
 800b00c:	4e77      	ldr	r6, [pc, #476]	@ (800b1ec <_strtod_l+0x78c>)
 800b00e:	07e7      	lsls	r7, r4, #31
 800b010:	d504      	bpl.n	800b01c <_strtod_l+0x5bc>
 800b012:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b016:	f7f5 fa5f 	bl	80004d8 <__aeabi_dmul>
 800b01a:	2301      	movs	r3, #1
 800b01c:	1064      	asrs	r4, r4, #1
 800b01e:	f106 0608 	add.w	r6, r6, #8
 800b022:	d1f4      	bne.n	800b00e <_strtod_l+0x5ae>
 800b024:	b10b      	cbz	r3, 800b02a <_strtod_l+0x5ca>
 800b026:	4682      	mov	sl, r0
 800b028:	468b      	mov	fp, r1
 800b02a:	9b08      	ldr	r3, [sp, #32]
 800b02c:	b1b3      	cbz	r3, 800b05c <_strtod_l+0x5fc>
 800b02e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b032:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b036:	2b00      	cmp	r3, #0
 800b038:	4659      	mov	r1, fp
 800b03a:	dd0f      	ble.n	800b05c <_strtod_l+0x5fc>
 800b03c:	2b1f      	cmp	r3, #31
 800b03e:	dd58      	ble.n	800b0f2 <_strtod_l+0x692>
 800b040:	2b34      	cmp	r3, #52	@ 0x34
 800b042:	bfd8      	it	le
 800b044:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800b048:	f04f 0a00 	mov.w	sl, #0
 800b04c:	bfcf      	iteee	gt
 800b04e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b052:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b056:	4093      	lslle	r3, r2
 800b058:	ea03 0b01 	andle.w	fp, r3, r1
 800b05c:	2200      	movs	r2, #0
 800b05e:	2300      	movs	r3, #0
 800b060:	4650      	mov	r0, sl
 800b062:	4659      	mov	r1, fp
 800b064:	f7f5 fca0 	bl	80009a8 <__aeabi_dcmpeq>
 800b068:	2800      	cmp	r0, #0
 800b06a:	d1a7      	bne.n	800afbc <_strtod_l+0x55c>
 800b06c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b06e:	464a      	mov	r2, r9
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b074:	462b      	mov	r3, r5
 800b076:	9805      	ldr	r0, [sp, #20]
 800b078:	f002 f8ea 	bl	800d250 <__s2b>
 800b07c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b07e:	2800      	cmp	r0, #0
 800b080:	f43f af09 	beq.w	800ae96 <_strtod_l+0x436>
 800b084:	2400      	movs	r4, #0
 800b086:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b08a:	2a00      	cmp	r2, #0
 800b08c:	eba3 0308 	sub.w	r3, r3, r8
 800b090:	bfa8      	it	ge
 800b092:	2300      	movge	r3, #0
 800b094:	46a0      	mov	r8, r4
 800b096:	9312      	str	r3, [sp, #72]	@ 0x48
 800b098:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b09c:	9316      	str	r3, [sp, #88]	@ 0x58
 800b09e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0a0:	9805      	ldr	r0, [sp, #20]
 800b0a2:	6859      	ldr	r1, [r3, #4]
 800b0a4:	f002 f82c 	bl	800d100 <_Balloc>
 800b0a8:	4681      	mov	r9, r0
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	f43f aef7 	beq.w	800ae9e <_strtod_l+0x43e>
 800b0b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0b2:	300c      	adds	r0, #12
 800b0b4:	691a      	ldr	r2, [r3, #16]
 800b0b6:	f103 010c 	add.w	r1, r3, #12
 800b0ba:	3202      	adds	r2, #2
 800b0bc:	0092      	lsls	r2, r2, #2
 800b0be:	f000 fbab 	bl	800b818 <memcpy>
 800b0c2:	ab1c      	add	r3, sp, #112	@ 0x70
 800b0c4:	9301      	str	r3, [sp, #4]
 800b0c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	4652      	mov	r2, sl
 800b0cc:	465b      	mov	r3, fp
 800b0ce:	9805      	ldr	r0, [sp, #20]
 800b0d0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b0d4:	f002 fbe8 	bl	800d8a8 <__d2b>
 800b0d8:	901a      	str	r0, [sp, #104]	@ 0x68
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	f43f aedf 	beq.w	800ae9e <_strtod_l+0x43e>
 800b0e0:	2101      	movs	r1, #1
 800b0e2:	9805      	ldr	r0, [sp, #20]
 800b0e4:	f002 f94a 	bl	800d37c <__i2b>
 800b0e8:	4680      	mov	r8, r0
 800b0ea:	b948      	cbnz	r0, 800b100 <_strtod_l+0x6a0>
 800b0ec:	f04f 0800 	mov.w	r8, #0
 800b0f0:	e6d5      	b.n	800ae9e <_strtod_l+0x43e>
 800b0f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0fa:	ea03 0a0a 	and.w	sl, r3, sl
 800b0fe:	e7ad      	b.n	800b05c <_strtod_l+0x5fc>
 800b100:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b102:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b104:	2d00      	cmp	r5, #0
 800b106:	bfab      	itete	ge
 800b108:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b10a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b10c:	18ef      	addge	r7, r5, r3
 800b10e:	1b5e      	sublt	r6, r3, r5
 800b110:	9b08      	ldr	r3, [sp, #32]
 800b112:	bfa8      	it	ge
 800b114:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b116:	eba5 0503 	sub.w	r5, r5, r3
 800b11a:	4415      	add	r5, r2
 800b11c:	4b34      	ldr	r3, [pc, #208]	@ (800b1f0 <_strtod_l+0x790>)
 800b11e:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800b122:	bfb8      	it	lt
 800b124:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b126:	429d      	cmp	r5, r3
 800b128:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b12c:	da50      	bge.n	800b1d0 <_strtod_l+0x770>
 800b12e:	1b5b      	subs	r3, r3, r5
 800b130:	2b1f      	cmp	r3, #31
 800b132:	f04f 0101 	mov.w	r1, #1
 800b136:	eba2 0203 	sub.w	r2, r2, r3
 800b13a:	dc3d      	bgt.n	800b1b8 <_strtod_l+0x758>
 800b13c:	fa01 f303 	lsl.w	r3, r1, r3
 800b140:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b142:	2300      	movs	r3, #0
 800b144:	9310      	str	r3, [sp, #64]	@ 0x40
 800b146:	18bd      	adds	r5, r7, r2
 800b148:	9b08      	ldr	r3, [sp, #32]
 800b14a:	42af      	cmp	r7, r5
 800b14c:	4416      	add	r6, r2
 800b14e:	441e      	add	r6, r3
 800b150:	463b      	mov	r3, r7
 800b152:	bfa8      	it	ge
 800b154:	462b      	movge	r3, r5
 800b156:	42b3      	cmp	r3, r6
 800b158:	bfa8      	it	ge
 800b15a:	4633      	movge	r3, r6
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	bfc2      	ittt	gt
 800b160:	1aed      	subgt	r5, r5, r3
 800b162:	1af6      	subgt	r6, r6, r3
 800b164:	1aff      	subgt	r7, r7, r3
 800b166:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b168:	2b00      	cmp	r3, #0
 800b16a:	dd16      	ble.n	800b19a <_strtod_l+0x73a>
 800b16c:	4641      	mov	r1, r8
 800b16e:	461a      	mov	r2, r3
 800b170:	9805      	ldr	r0, [sp, #20]
 800b172:	f002 f9bb 	bl	800d4ec <__pow5mult>
 800b176:	4680      	mov	r8, r0
 800b178:	2800      	cmp	r0, #0
 800b17a:	d0b7      	beq.n	800b0ec <_strtod_l+0x68c>
 800b17c:	4601      	mov	r1, r0
 800b17e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b180:	9805      	ldr	r0, [sp, #20]
 800b182:	f002 f911 	bl	800d3a8 <__multiply>
 800b186:	900a      	str	r0, [sp, #40]	@ 0x28
 800b188:	2800      	cmp	r0, #0
 800b18a:	f43f ae88 	beq.w	800ae9e <_strtod_l+0x43e>
 800b18e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b190:	9805      	ldr	r0, [sp, #20]
 800b192:	f001 fff5 	bl	800d180 <_Bfree>
 800b196:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b198:	931a      	str	r3, [sp, #104]	@ 0x68
 800b19a:	2d00      	cmp	r5, #0
 800b19c:	dc1d      	bgt.n	800b1da <_strtod_l+0x77a>
 800b19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	dd27      	ble.n	800b1f4 <_strtod_l+0x794>
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b1a8:	9805      	ldr	r0, [sp, #20]
 800b1aa:	f002 f99f 	bl	800d4ec <__pow5mult>
 800b1ae:	4681      	mov	r9, r0
 800b1b0:	bb00      	cbnz	r0, 800b1f4 <_strtod_l+0x794>
 800b1b2:	f04f 0900 	mov.w	r9, #0
 800b1b6:	e672      	b.n	800ae9e <_strtod_l+0x43e>
 800b1b8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b1bc:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b1c0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b1c4:	35e2      	adds	r5, #226	@ 0xe2
 800b1c6:	fa01 f305 	lsl.w	r3, r1, r5
 800b1ca:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1cc:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b1ce:	e7ba      	b.n	800b146 <_strtod_l+0x6e6>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1d8:	e7b5      	b.n	800b146 <_strtod_l+0x6e6>
 800b1da:	462a      	mov	r2, r5
 800b1dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1de:	9805      	ldr	r0, [sp, #20]
 800b1e0:	f002 f9de 	bl	800d5a0 <__lshift>
 800b1e4:	901a      	str	r0, [sp, #104]	@ 0x68
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	d1d9      	bne.n	800b19e <_strtod_l+0x73e>
 800b1ea:	e658      	b.n	800ae9e <_strtod_l+0x43e>
 800b1ec:	0800ee60 	.word	0x0800ee60
 800b1f0:	fffffc02 	.word	0xfffffc02
 800b1f4:	2e00      	cmp	r6, #0
 800b1f6:	dd07      	ble.n	800b208 <_strtod_l+0x7a8>
 800b1f8:	4649      	mov	r1, r9
 800b1fa:	4632      	mov	r2, r6
 800b1fc:	9805      	ldr	r0, [sp, #20]
 800b1fe:	f002 f9cf 	bl	800d5a0 <__lshift>
 800b202:	4681      	mov	r9, r0
 800b204:	2800      	cmp	r0, #0
 800b206:	d0d4      	beq.n	800b1b2 <_strtod_l+0x752>
 800b208:	2f00      	cmp	r7, #0
 800b20a:	dd08      	ble.n	800b21e <_strtod_l+0x7be>
 800b20c:	4641      	mov	r1, r8
 800b20e:	463a      	mov	r2, r7
 800b210:	9805      	ldr	r0, [sp, #20]
 800b212:	f002 f9c5 	bl	800d5a0 <__lshift>
 800b216:	4680      	mov	r8, r0
 800b218:	2800      	cmp	r0, #0
 800b21a:	f43f ae40 	beq.w	800ae9e <_strtod_l+0x43e>
 800b21e:	464a      	mov	r2, r9
 800b220:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b222:	9805      	ldr	r0, [sp, #20]
 800b224:	f002 fa44 	bl	800d6b0 <__mdiff>
 800b228:	4604      	mov	r4, r0
 800b22a:	2800      	cmp	r0, #0
 800b22c:	f43f ae37 	beq.w	800ae9e <_strtod_l+0x43e>
 800b230:	68c3      	ldr	r3, [r0, #12]
 800b232:	4641      	mov	r1, r8
 800b234:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b236:	2300      	movs	r3, #0
 800b238:	60c3      	str	r3, [r0, #12]
 800b23a:	f002 fa1d 	bl	800d678 <__mcmp>
 800b23e:	2800      	cmp	r0, #0
 800b240:	da3d      	bge.n	800b2be <_strtod_l+0x85e>
 800b242:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b244:	ea53 030a 	orrs.w	r3, r3, sl
 800b248:	d163      	bne.n	800b312 <_strtod_l+0x8b2>
 800b24a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d15f      	bne.n	800b312 <_strtod_l+0x8b2>
 800b252:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b256:	0d1b      	lsrs	r3, r3, #20
 800b258:	051b      	lsls	r3, r3, #20
 800b25a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b25e:	d958      	bls.n	800b312 <_strtod_l+0x8b2>
 800b260:	6963      	ldr	r3, [r4, #20]
 800b262:	b913      	cbnz	r3, 800b26a <_strtod_l+0x80a>
 800b264:	6923      	ldr	r3, [r4, #16]
 800b266:	2b01      	cmp	r3, #1
 800b268:	dd53      	ble.n	800b312 <_strtod_l+0x8b2>
 800b26a:	4621      	mov	r1, r4
 800b26c:	2201      	movs	r2, #1
 800b26e:	9805      	ldr	r0, [sp, #20]
 800b270:	f002 f996 	bl	800d5a0 <__lshift>
 800b274:	4641      	mov	r1, r8
 800b276:	4604      	mov	r4, r0
 800b278:	f002 f9fe 	bl	800d678 <__mcmp>
 800b27c:	2800      	cmp	r0, #0
 800b27e:	dd48      	ble.n	800b312 <_strtod_l+0x8b2>
 800b280:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b284:	9a08      	ldr	r2, [sp, #32]
 800b286:	0d1b      	lsrs	r3, r3, #20
 800b288:	051b      	lsls	r3, r3, #20
 800b28a:	2a00      	cmp	r2, #0
 800b28c:	d062      	beq.n	800b354 <_strtod_l+0x8f4>
 800b28e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b292:	d85f      	bhi.n	800b354 <_strtod_l+0x8f4>
 800b294:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b298:	f67f ae94 	bls.w	800afc4 <_strtod_l+0x564>
 800b29c:	4650      	mov	r0, sl
 800b29e:	4659      	mov	r1, fp
 800b2a0:	4ba3      	ldr	r3, [pc, #652]	@ (800b530 <_strtod_l+0xad0>)
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f7f5 f918 	bl	80004d8 <__aeabi_dmul>
 800b2a8:	4ba2      	ldr	r3, [pc, #648]	@ (800b534 <_strtod_l+0xad4>)
 800b2aa:	4682      	mov	sl, r0
 800b2ac:	400b      	ands	r3, r1
 800b2ae:	468b      	mov	fp, r1
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f47f adff 	bne.w	800aeb4 <_strtod_l+0x454>
 800b2b6:	2322      	movs	r3, #34	@ 0x22
 800b2b8:	9a05      	ldr	r2, [sp, #20]
 800b2ba:	6013      	str	r3, [r2, #0]
 800b2bc:	e5fa      	b.n	800aeb4 <_strtod_l+0x454>
 800b2be:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b2c2:	d165      	bne.n	800b390 <_strtod_l+0x930>
 800b2c4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b2c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2ca:	b35a      	cbz	r2, 800b324 <_strtod_l+0x8c4>
 800b2cc:	4a9a      	ldr	r2, [pc, #616]	@ (800b538 <_strtod_l+0xad8>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d12b      	bne.n	800b32a <_strtod_l+0x8ca>
 800b2d2:	9b08      	ldr	r3, [sp, #32]
 800b2d4:	4651      	mov	r1, sl
 800b2d6:	b303      	cbz	r3, 800b31a <_strtod_l+0x8ba>
 800b2d8:	465a      	mov	r2, fp
 800b2da:	4b96      	ldr	r3, [pc, #600]	@ (800b534 <_strtod_l+0xad4>)
 800b2dc:	4013      	ands	r3, r2
 800b2de:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b2e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b2e6:	d81b      	bhi.n	800b320 <_strtod_l+0x8c0>
 800b2e8:	0d1b      	lsrs	r3, r3, #20
 800b2ea:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b2ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b2f2:	4299      	cmp	r1, r3
 800b2f4:	d119      	bne.n	800b32a <_strtod_l+0x8ca>
 800b2f6:	4b91      	ldr	r3, [pc, #580]	@ (800b53c <_strtod_l+0xadc>)
 800b2f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d102      	bne.n	800b304 <_strtod_l+0x8a4>
 800b2fe:	3101      	adds	r1, #1
 800b300:	f43f adcd 	beq.w	800ae9e <_strtod_l+0x43e>
 800b304:	f04f 0a00 	mov.w	sl, #0
 800b308:	4b8a      	ldr	r3, [pc, #552]	@ (800b534 <_strtod_l+0xad4>)
 800b30a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b30c:	401a      	ands	r2, r3
 800b30e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b312:	9b08      	ldr	r3, [sp, #32]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1c1      	bne.n	800b29c <_strtod_l+0x83c>
 800b318:	e5cc      	b.n	800aeb4 <_strtod_l+0x454>
 800b31a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b31e:	e7e8      	b.n	800b2f2 <_strtod_l+0x892>
 800b320:	4613      	mov	r3, r2
 800b322:	e7e6      	b.n	800b2f2 <_strtod_l+0x892>
 800b324:	ea53 030a 	orrs.w	r3, r3, sl
 800b328:	d0aa      	beq.n	800b280 <_strtod_l+0x820>
 800b32a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b32c:	b1db      	cbz	r3, 800b366 <_strtod_l+0x906>
 800b32e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b330:	4213      	tst	r3, r2
 800b332:	d0ee      	beq.n	800b312 <_strtod_l+0x8b2>
 800b334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b336:	4650      	mov	r0, sl
 800b338:	4659      	mov	r1, fp
 800b33a:	9a08      	ldr	r2, [sp, #32]
 800b33c:	b1bb      	cbz	r3, 800b36e <_strtod_l+0x90e>
 800b33e:	f7ff fb6b 	bl	800aa18 <sulp>
 800b342:	4602      	mov	r2, r0
 800b344:	460b      	mov	r3, r1
 800b346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b34a:	f7f4 ff0f 	bl	800016c <__adddf3>
 800b34e:	4682      	mov	sl, r0
 800b350:	468b      	mov	fp, r1
 800b352:	e7de      	b.n	800b312 <_strtod_l+0x8b2>
 800b354:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b358:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b35c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b360:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b364:	e7d5      	b.n	800b312 <_strtod_l+0x8b2>
 800b366:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b368:	ea13 0f0a 	tst.w	r3, sl
 800b36c:	e7e1      	b.n	800b332 <_strtod_l+0x8d2>
 800b36e:	f7ff fb53 	bl	800aa18 <sulp>
 800b372:	4602      	mov	r2, r0
 800b374:	460b      	mov	r3, r1
 800b376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b37a:	f7f4 fef5 	bl	8000168 <__aeabi_dsub>
 800b37e:	2200      	movs	r2, #0
 800b380:	2300      	movs	r3, #0
 800b382:	4682      	mov	sl, r0
 800b384:	468b      	mov	fp, r1
 800b386:	f7f5 fb0f 	bl	80009a8 <__aeabi_dcmpeq>
 800b38a:	2800      	cmp	r0, #0
 800b38c:	d0c1      	beq.n	800b312 <_strtod_l+0x8b2>
 800b38e:	e619      	b.n	800afc4 <_strtod_l+0x564>
 800b390:	4641      	mov	r1, r8
 800b392:	4620      	mov	r0, r4
 800b394:	f002 fae0 	bl	800d958 <__ratio>
 800b398:	2200      	movs	r2, #0
 800b39a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b39e:	4606      	mov	r6, r0
 800b3a0:	460f      	mov	r7, r1
 800b3a2:	f7f5 fb15 	bl	80009d0 <__aeabi_dcmple>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d06d      	beq.n	800b486 <_strtod_l+0xa26>
 800b3aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d178      	bne.n	800b4a2 <_strtod_l+0xa42>
 800b3b0:	f1ba 0f00 	cmp.w	sl, #0
 800b3b4:	d156      	bne.n	800b464 <_strtod_l+0xa04>
 800b3b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d158      	bne.n	800b472 <_strtod_l+0xa12>
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	4639      	mov	r1, r7
 800b3c6:	4b5e      	ldr	r3, [pc, #376]	@ (800b540 <_strtod_l+0xae0>)
 800b3c8:	f7f5 faf8 	bl	80009bc <__aeabi_dcmplt>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d157      	bne.n	800b480 <_strtod_l+0xa20>
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	4639      	mov	r1, r7
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	4b5b      	ldr	r3, [pc, #364]	@ (800b544 <_strtod_l+0xae4>)
 800b3d8:	f7f5 f87e 	bl	80004d8 <__aeabi_dmul>
 800b3dc:	4606      	mov	r6, r0
 800b3de:	460f      	mov	r7, r1
 800b3e0:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b3e4:	9606      	str	r6, [sp, #24]
 800b3e6:	9307      	str	r3, [sp, #28]
 800b3e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3ec:	4d51      	ldr	r5, [pc, #324]	@ (800b534 <_strtod_l+0xad4>)
 800b3ee:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b3f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3f4:	401d      	ands	r5, r3
 800b3f6:	4b54      	ldr	r3, [pc, #336]	@ (800b548 <_strtod_l+0xae8>)
 800b3f8:	429d      	cmp	r5, r3
 800b3fa:	f040 80ab 	bne.w	800b554 <_strtod_l+0xaf4>
 800b3fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b400:	4650      	mov	r0, sl
 800b402:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b406:	4659      	mov	r1, fp
 800b408:	f002 f9e6 	bl	800d7d8 <__ulp>
 800b40c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b410:	f7f5 f862 	bl	80004d8 <__aeabi_dmul>
 800b414:	4652      	mov	r2, sl
 800b416:	465b      	mov	r3, fp
 800b418:	f7f4 fea8 	bl	800016c <__adddf3>
 800b41c:	460b      	mov	r3, r1
 800b41e:	4945      	ldr	r1, [pc, #276]	@ (800b534 <_strtod_l+0xad4>)
 800b420:	4a4a      	ldr	r2, [pc, #296]	@ (800b54c <_strtod_l+0xaec>)
 800b422:	4019      	ands	r1, r3
 800b424:	4291      	cmp	r1, r2
 800b426:	4682      	mov	sl, r0
 800b428:	d942      	bls.n	800b4b0 <_strtod_l+0xa50>
 800b42a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b42c:	4b43      	ldr	r3, [pc, #268]	@ (800b53c <_strtod_l+0xadc>)
 800b42e:	429a      	cmp	r2, r3
 800b430:	d103      	bne.n	800b43a <_strtod_l+0x9da>
 800b432:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b434:	3301      	adds	r3, #1
 800b436:	f43f ad32 	beq.w	800ae9e <_strtod_l+0x43e>
 800b43a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b43e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800b53c <_strtod_l+0xadc>
 800b442:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b444:	9805      	ldr	r0, [sp, #20]
 800b446:	f001 fe9b 	bl	800d180 <_Bfree>
 800b44a:	4649      	mov	r1, r9
 800b44c:	9805      	ldr	r0, [sp, #20]
 800b44e:	f001 fe97 	bl	800d180 <_Bfree>
 800b452:	4641      	mov	r1, r8
 800b454:	9805      	ldr	r0, [sp, #20]
 800b456:	f001 fe93 	bl	800d180 <_Bfree>
 800b45a:	4621      	mov	r1, r4
 800b45c:	9805      	ldr	r0, [sp, #20]
 800b45e:	f001 fe8f 	bl	800d180 <_Bfree>
 800b462:	e61c      	b.n	800b09e <_strtod_l+0x63e>
 800b464:	f1ba 0f01 	cmp.w	sl, #1
 800b468:	d103      	bne.n	800b472 <_strtod_l+0xa12>
 800b46a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f43f ada9 	beq.w	800afc4 <_strtod_l+0x564>
 800b472:	2200      	movs	r2, #0
 800b474:	4b36      	ldr	r3, [pc, #216]	@ (800b550 <_strtod_l+0xaf0>)
 800b476:	2600      	movs	r6, #0
 800b478:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b47c:	4f30      	ldr	r7, [pc, #192]	@ (800b540 <_strtod_l+0xae0>)
 800b47e:	e7b3      	b.n	800b3e8 <_strtod_l+0x988>
 800b480:	2600      	movs	r6, #0
 800b482:	4f30      	ldr	r7, [pc, #192]	@ (800b544 <_strtod_l+0xae4>)
 800b484:	e7ac      	b.n	800b3e0 <_strtod_l+0x980>
 800b486:	4630      	mov	r0, r6
 800b488:	4639      	mov	r1, r7
 800b48a:	4b2e      	ldr	r3, [pc, #184]	@ (800b544 <_strtod_l+0xae4>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	f7f5 f823 	bl	80004d8 <__aeabi_dmul>
 800b492:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b494:	4606      	mov	r6, r0
 800b496:	460f      	mov	r7, r1
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d0a1      	beq.n	800b3e0 <_strtod_l+0x980>
 800b49c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b4a0:	e7a2      	b.n	800b3e8 <_strtod_l+0x988>
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	4b26      	ldr	r3, [pc, #152]	@ (800b540 <_strtod_l+0xae0>)
 800b4a6:	4616      	mov	r6, r2
 800b4a8:	461f      	mov	r7, r3
 800b4aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b4ae:	e79b      	b.n	800b3e8 <_strtod_l+0x988>
 800b4b0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b4b4:	9b08      	ldr	r3, [sp, #32]
 800b4b6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1c1      	bne.n	800b442 <_strtod_l+0x9e2>
 800b4be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4c2:	0d1b      	lsrs	r3, r3, #20
 800b4c4:	051b      	lsls	r3, r3, #20
 800b4c6:	429d      	cmp	r5, r3
 800b4c8:	d1bb      	bne.n	800b442 <_strtod_l+0x9e2>
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	4639      	mov	r1, r7
 800b4ce:	f7f5 fe6d 	bl	80011ac <__aeabi_d2lz>
 800b4d2:	f7f4 ffd3 	bl	800047c <__aeabi_l2d>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4630      	mov	r0, r6
 800b4dc:	4639      	mov	r1, r7
 800b4de:	f7f4 fe43 	bl	8000168 <__aeabi_dsub>
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b4ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b4ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4f0:	ea46 060a 	orr.w	r6, r6, sl
 800b4f4:	431e      	orrs	r6, r3
 800b4f6:	d06a      	beq.n	800b5ce <_strtod_l+0xb6e>
 800b4f8:	a309      	add	r3, pc, #36	@ (adr r3, 800b520 <_strtod_l+0xac0>)
 800b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fe:	f7f5 fa5d 	bl	80009bc <__aeabi_dcmplt>
 800b502:	2800      	cmp	r0, #0
 800b504:	f47f acd6 	bne.w	800aeb4 <_strtod_l+0x454>
 800b508:	a307      	add	r3, pc, #28	@ (adr r3, 800b528 <_strtod_l+0xac8>)
 800b50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b512:	f7f5 fa71 	bl	80009f8 <__aeabi_dcmpgt>
 800b516:	2800      	cmp	r0, #0
 800b518:	d093      	beq.n	800b442 <_strtod_l+0x9e2>
 800b51a:	e4cb      	b.n	800aeb4 <_strtod_l+0x454>
 800b51c:	f3af 8000 	nop.w
 800b520:	94a03595 	.word	0x94a03595
 800b524:	3fdfffff 	.word	0x3fdfffff
 800b528:	35afe535 	.word	0x35afe535
 800b52c:	3fe00000 	.word	0x3fe00000
 800b530:	39500000 	.word	0x39500000
 800b534:	7ff00000 	.word	0x7ff00000
 800b538:	000fffff 	.word	0x000fffff
 800b53c:	7fefffff 	.word	0x7fefffff
 800b540:	3ff00000 	.word	0x3ff00000
 800b544:	3fe00000 	.word	0x3fe00000
 800b548:	7fe00000 	.word	0x7fe00000
 800b54c:	7c9fffff 	.word	0x7c9fffff
 800b550:	bff00000 	.word	0xbff00000
 800b554:	9b08      	ldr	r3, [sp, #32]
 800b556:	b323      	cbz	r3, 800b5a2 <_strtod_l+0xb42>
 800b558:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b55c:	d821      	bhi.n	800b5a2 <_strtod_l+0xb42>
 800b55e:	a328      	add	r3, pc, #160	@ (adr r3, 800b600 <_strtod_l+0xba0>)
 800b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b564:	4630      	mov	r0, r6
 800b566:	4639      	mov	r1, r7
 800b568:	f7f5 fa32 	bl	80009d0 <__aeabi_dcmple>
 800b56c:	b1a0      	cbz	r0, 800b598 <_strtod_l+0xb38>
 800b56e:	4639      	mov	r1, r7
 800b570:	4630      	mov	r0, r6
 800b572:	f7f5 fa89 	bl	8000a88 <__aeabi_d2uiz>
 800b576:	2801      	cmp	r0, #1
 800b578:	bf38      	it	cc
 800b57a:	2001      	movcc	r0, #1
 800b57c:	f7f4 ff32 	bl	80003e4 <__aeabi_ui2d>
 800b580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b582:	4606      	mov	r6, r0
 800b584:	460f      	mov	r7, r1
 800b586:	b9fb      	cbnz	r3, 800b5c8 <_strtod_l+0xb68>
 800b588:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b58c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b58e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b590:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b594:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b598:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b59a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b59e:	1b5b      	subs	r3, r3, r5
 800b5a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b5a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b5aa:	f002 f915 	bl	800d7d8 <__ulp>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	4650      	mov	r0, sl
 800b5b4:	4659      	mov	r1, fp
 800b5b6:	f7f4 ff8f 	bl	80004d8 <__aeabi_dmul>
 800b5ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b5be:	f7f4 fdd5 	bl	800016c <__adddf3>
 800b5c2:	4682      	mov	sl, r0
 800b5c4:	468b      	mov	fp, r1
 800b5c6:	e775      	b.n	800b4b4 <_strtod_l+0xa54>
 800b5c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b5cc:	e7e0      	b.n	800b590 <_strtod_l+0xb30>
 800b5ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800b608 <_strtod_l+0xba8>)
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	f7f5 f9f2 	bl	80009bc <__aeabi_dcmplt>
 800b5d8:	e79d      	b.n	800b516 <_strtod_l+0xab6>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	930e      	str	r3, [sp, #56]	@ 0x38
 800b5de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5e0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b5e2:	6013      	str	r3, [r2, #0]
 800b5e4:	f7ff ba79 	b.w	800aada <_strtod_l+0x7a>
 800b5e8:	2a65      	cmp	r2, #101	@ 0x65
 800b5ea:	f43f ab72 	beq.w	800acd2 <_strtod_l+0x272>
 800b5ee:	2a45      	cmp	r2, #69	@ 0x45
 800b5f0:	f43f ab6f 	beq.w	800acd2 <_strtod_l+0x272>
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	f7ff bbaa 	b.w	800ad4e <_strtod_l+0x2ee>
 800b5fa:	bf00      	nop
 800b5fc:	f3af 8000 	nop.w
 800b600:	ffc00000 	.word	0xffc00000
 800b604:	41dfffff 	.word	0x41dfffff
 800b608:	94a03595 	.word	0x94a03595
 800b60c:	3fcfffff 	.word	0x3fcfffff

0800b610 <_strtod_r>:
 800b610:	4b01      	ldr	r3, [pc, #4]	@ (800b618 <_strtod_r+0x8>)
 800b612:	f7ff ba25 	b.w	800aa60 <_strtod_l>
 800b616:	bf00      	nop
 800b618:	20000018 	.word	0x20000018

0800b61c <_strtol_l.isra.0>:
 800b61c:	2b24      	cmp	r3, #36	@ 0x24
 800b61e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b622:	4686      	mov	lr, r0
 800b624:	4690      	mov	r8, r2
 800b626:	d801      	bhi.n	800b62c <_strtol_l.isra.0+0x10>
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d106      	bne.n	800b63a <_strtol_l.isra.0+0x1e>
 800b62c:	f000 f8b4 	bl	800b798 <__errno>
 800b630:	2316      	movs	r3, #22
 800b632:	6003      	str	r3, [r0, #0]
 800b634:	2000      	movs	r0, #0
 800b636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b63a:	460d      	mov	r5, r1
 800b63c:	4833      	ldr	r0, [pc, #204]	@ (800b70c <_strtol_l.isra.0+0xf0>)
 800b63e:	462a      	mov	r2, r5
 800b640:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b644:	5d06      	ldrb	r6, [r0, r4]
 800b646:	f016 0608 	ands.w	r6, r6, #8
 800b64a:	d1f8      	bne.n	800b63e <_strtol_l.isra.0+0x22>
 800b64c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b64e:	d110      	bne.n	800b672 <_strtol_l.isra.0+0x56>
 800b650:	2601      	movs	r6, #1
 800b652:	782c      	ldrb	r4, [r5, #0]
 800b654:	1c95      	adds	r5, r2, #2
 800b656:	f033 0210 	bics.w	r2, r3, #16
 800b65a:	d115      	bne.n	800b688 <_strtol_l.isra.0+0x6c>
 800b65c:	2c30      	cmp	r4, #48	@ 0x30
 800b65e:	d10d      	bne.n	800b67c <_strtol_l.isra.0+0x60>
 800b660:	782a      	ldrb	r2, [r5, #0]
 800b662:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b666:	2a58      	cmp	r2, #88	@ 0x58
 800b668:	d108      	bne.n	800b67c <_strtol_l.isra.0+0x60>
 800b66a:	786c      	ldrb	r4, [r5, #1]
 800b66c:	3502      	adds	r5, #2
 800b66e:	2310      	movs	r3, #16
 800b670:	e00a      	b.n	800b688 <_strtol_l.isra.0+0x6c>
 800b672:	2c2b      	cmp	r4, #43	@ 0x2b
 800b674:	bf04      	itt	eq
 800b676:	782c      	ldrbeq	r4, [r5, #0]
 800b678:	1c95      	addeq	r5, r2, #2
 800b67a:	e7ec      	b.n	800b656 <_strtol_l.isra.0+0x3a>
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1f6      	bne.n	800b66e <_strtol_l.isra.0+0x52>
 800b680:	2c30      	cmp	r4, #48	@ 0x30
 800b682:	bf14      	ite	ne
 800b684:	230a      	movne	r3, #10
 800b686:	2308      	moveq	r3, #8
 800b688:	2200      	movs	r2, #0
 800b68a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b68e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b692:	fbbc f9f3 	udiv	r9, ip, r3
 800b696:	4610      	mov	r0, r2
 800b698:	fb03 ca19 	mls	sl, r3, r9, ip
 800b69c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b6a0:	2f09      	cmp	r7, #9
 800b6a2:	d80f      	bhi.n	800b6c4 <_strtol_l.isra.0+0xa8>
 800b6a4:	463c      	mov	r4, r7
 800b6a6:	42a3      	cmp	r3, r4
 800b6a8:	dd1b      	ble.n	800b6e2 <_strtol_l.isra.0+0xc6>
 800b6aa:	1c57      	adds	r7, r2, #1
 800b6ac:	d007      	beq.n	800b6be <_strtol_l.isra.0+0xa2>
 800b6ae:	4581      	cmp	r9, r0
 800b6b0:	d314      	bcc.n	800b6dc <_strtol_l.isra.0+0xc0>
 800b6b2:	d101      	bne.n	800b6b8 <_strtol_l.isra.0+0x9c>
 800b6b4:	45a2      	cmp	sl, r4
 800b6b6:	db11      	blt.n	800b6dc <_strtol_l.isra.0+0xc0>
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	fb00 4003 	mla	r0, r0, r3, r4
 800b6be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6c2:	e7eb      	b.n	800b69c <_strtol_l.isra.0+0x80>
 800b6c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b6c8:	2f19      	cmp	r7, #25
 800b6ca:	d801      	bhi.n	800b6d0 <_strtol_l.isra.0+0xb4>
 800b6cc:	3c37      	subs	r4, #55	@ 0x37
 800b6ce:	e7ea      	b.n	800b6a6 <_strtol_l.isra.0+0x8a>
 800b6d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b6d4:	2f19      	cmp	r7, #25
 800b6d6:	d804      	bhi.n	800b6e2 <_strtol_l.isra.0+0xc6>
 800b6d8:	3c57      	subs	r4, #87	@ 0x57
 800b6da:	e7e4      	b.n	800b6a6 <_strtol_l.isra.0+0x8a>
 800b6dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b6e0:	e7ed      	b.n	800b6be <_strtol_l.isra.0+0xa2>
 800b6e2:	1c53      	adds	r3, r2, #1
 800b6e4:	d108      	bne.n	800b6f8 <_strtol_l.isra.0+0xdc>
 800b6e6:	2322      	movs	r3, #34	@ 0x22
 800b6e8:	4660      	mov	r0, ip
 800b6ea:	f8ce 3000 	str.w	r3, [lr]
 800b6ee:	f1b8 0f00 	cmp.w	r8, #0
 800b6f2:	d0a0      	beq.n	800b636 <_strtol_l.isra.0+0x1a>
 800b6f4:	1e69      	subs	r1, r5, #1
 800b6f6:	e006      	b.n	800b706 <_strtol_l.isra.0+0xea>
 800b6f8:	b106      	cbz	r6, 800b6fc <_strtol_l.isra.0+0xe0>
 800b6fa:	4240      	negs	r0, r0
 800b6fc:	f1b8 0f00 	cmp.w	r8, #0
 800b700:	d099      	beq.n	800b636 <_strtol_l.isra.0+0x1a>
 800b702:	2a00      	cmp	r2, #0
 800b704:	d1f6      	bne.n	800b6f4 <_strtol_l.isra.0+0xd8>
 800b706:	f8c8 1000 	str.w	r1, [r8]
 800b70a:	e794      	b.n	800b636 <_strtol_l.isra.0+0x1a>
 800b70c:	0800ee89 	.word	0x0800ee89

0800b710 <_strtol_r>:
 800b710:	f7ff bf84 	b.w	800b61c <_strtol_l.isra.0>

0800b714 <strtol>:
 800b714:	4613      	mov	r3, r2
 800b716:	460a      	mov	r2, r1
 800b718:	4601      	mov	r1, r0
 800b71a:	4802      	ldr	r0, [pc, #8]	@ (800b724 <strtol+0x10>)
 800b71c:	6800      	ldr	r0, [r0, #0]
 800b71e:	f7ff bf7d 	b.w	800b61c <_strtol_l.isra.0>
 800b722:	bf00      	nop
 800b724:	20000184 	.word	0x20000184

0800b728 <_fwalk_sglue>:
 800b728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b72c:	4607      	mov	r7, r0
 800b72e:	4688      	mov	r8, r1
 800b730:	4614      	mov	r4, r2
 800b732:	2600      	movs	r6, #0
 800b734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b738:	f1b9 0901 	subs.w	r9, r9, #1
 800b73c:	d505      	bpl.n	800b74a <_fwalk_sglue+0x22>
 800b73e:	6824      	ldr	r4, [r4, #0]
 800b740:	2c00      	cmp	r4, #0
 800b742:	d1f7      	bne.n	800b734 <_fwalk_sglue+0xc>
 800b744:	4630      	mov	r0, r6
 800b746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b74a:	89ab      	ldrh	r3, [r5, #12]
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d907      	bls.n	800b760 <_fwalk_sglue+0x38>
 800b750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b754:	3301      	adds	r3, #1
 800b756:	d003      	beq.n	800b760 <_fwalk_sglue+0x38>
 800b758:	4629      	mov	r1, r5
 800b75a:	4638      	mov	r0, r7
 800b75c:	47c0      	blx	r8
 800b75e:	4306      	orrs	r6, r0
 800b760:	3568      	adds	r5, #104	@ 0x68
 800b762:	e7e9      	b.n	800b738 <_fwalk_sglue+0x10>

0800b764 <memset>:
 800b764:	4603      	mov	r3, r0
 800b766:	4402      	add	r2, r0
 800b768:	4293      	cmp	r3, r2
 800b76a:	d100      	bne.n	800b76e <memset+0xa>
 800b76c:	4770      	bx	lr
 800b76e:	f803 1b01 	strb.w	r1, [r3], #1
 800b772:	e7f9      	b.n	800b768 <memset+0x4>

0800b774 <strncmp>:
 800b774:	b510      	push	{r4, lr}
 800b776:	b16a      	cbz	r2, 800b794 <strncmp+0x20>
 800b778:	3901      	subs	r1, #1
 800b77a:	1884      	adds	r4, r0, r2
 800b77c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b780:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b784:	429a      	cmp	r2, r3
 800b786:	d103      	bne.n	800b790 <strncmp+0x1c>
 800b788:	42a0      	cmp	r0, r4
 800b78a:	d001      	beq.n	800b790 <strncmp+0x1c>
 800b78c:	2a00      	cmp	r2, #0
 800b78e:	d1f5      	bne.n	800b77c <strncmp+0x8>
 800b790:	1ad0      	subs	r0, r2, r3
 800b792:	bd10      	pop	{r4, pc}
 800b794:	4610      	mov	r0, r2
 800b796:	e7fc      	b.n	800b792 <strncmp+0x1e>

0800b798 <__errno>:
 800b798:	4b01      	ldr	r3, [pc, #4]	@ (800b7a0 <__errno+0x8>)
 800b79a:	6818      	ldr	r0, [r3, #0]
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	20000184 	.word	0x20000184

0800b7a4 <__libc_init_array>:
 800b7a4:	b570      	push	{r4, r5, r6, lr}
 800b7a6:	2600      	movs	r6, #0
 800b7a8:	4d0c      	ldr	r5, [pc, #48]	@ (800b7dc <__libc_init_array+0x38>)
 800b7aa:	4c0d      	ldr	r4, [pc, #52]	@ (800b7e0 <__libc_init_array+0x3c>)
 800b7ac:	1b64      	subs	r4, r4, r5
 800b7ae:	10a4      	asrs	r4, r4, #2
 800b7b0:	42a6      	cmp	r6, r4
 800b7b2:	d109      	bne.n	800b7c8 <__libc_init_array+0x24>
 800b7b4:	f003 f8ee 	bl	800e994 <_init>
 800b7b8:	2600      	movs	r6, #0
 800b7ba:	4d0a      	ldr	r5, [pc, #40]	@ (800b7e4 <__libc_init_array+0x40>)
 800b7bc:	4c0a      	ldr	r4, [pc, #40]	@ (800b7e8 <__libc_init_array+0x44>)
 800b7be:	1b64      	subs	r4, r4, r5
 800b7c0:	10a4      	asrs	r4, r4, #2
 800b7c2:	42a6      	cmp	r6, r4
 800b7c4:	d105      	bne.n	800b7d2 <__libc_init_array+0x2e>
 800b7c6:	bd70      	pop	{r4, r5, r6, pc}
 800b7c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7cc:	4798      	blx	r3
 800b7ce:	3601      	adds	r6, #1
 800b7d0:	e7ee      	b.n	800b7b0 <__libc_init_array+0xc>
 800b7d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7d6:	4798      	blx	r3
 800b7d8:	3601      	adds	r6, #1
 800b7da:	e7f2      	b.n	800b7c2 <__libc_init_array+0x1e>
 800b7dc:	0800f0d0 	.word	0x0800f0d0
 800b7e0:	0800f0d0 	.word	0x0800f0d0
 800b7e4:	0800f0d0 	.word	0x0800f0d0
 800b7e8:	0800f0d4 	.word	0x0800f0d4

0800b7ec <__retarget_lock_init_recursive>:
 800b7ec:	4770      	bx	lr

0800b7ee <__retarget_lock_acquire_recursive>:
 800b7ee:	4770      	bx	lr

0800b7f0 <__retarget_lock_release_recursive>:
 800b7f0:	4770      	bx	lr
	...

0800b7f4 <_localeconv_r>:
 800b7f4:	4800      	ldr	r0, [pc, #0]	@ (800b7f8 <_localeconv_r+0x4>)
 800b7f6:	4770      	bx	lr
 800b7f8:	20000108 	.word	0x20000108

0800b7fc <memchr>:
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	b510      	push	{r4, lr}
 800b800:	b2c9      	uxtb	r1, r1
 800b802:	4402      	add	r2, r0
 800b804:	4293      	cmp	r3, r2
 800b806:	4618      	mov	r0, r3
 800b808:	d101      	bne.n	800b80e <memchr+0x12>
 800b80a:	2000      	movs	r0, #0
 800b80c:	e003      	b.n	800b816 <memchr+0x1a>
 800b80e:	7804      	ldrb	r4, [r0, #0]
 800b810:	3301      	adds	r3, #1
 800b812:	428c      	cmp	r4, r1
 800b814:	d1f6      	bne.n	800b804 <memchr+0x8>
 800b816:	bd10      	pop	{r4, pc}

0800b818 <memcpy>:
 800b818:	440a      	add	r2, r1
 800b81a:	4291      	cmp	r1, r2
 800b81c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b820:	d100      	bne.n	800b824 <memcpy+0xc>
 800b822:	4770      	bx	lr
 800b824:	b510      	push	{r4, lr}
 800b826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b82a:	4291      	cmp	r1, r2
 800b82c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b830:	d1f9      	bne.n	800b826 <memcpy+0xe>
 800b832:	bd10      	pop	{r4, pc}

0800b834 <nan>:
 800b834:	2000      	movs	r0, #0
 800b836:	4901      	ldr	r1, [pc, #4]	@ (800b83c <nan+0x8>)
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop
 800b83c:	7ff80000 	.word	0x7ff80000

0800b840 <nanf>:
 800b840:	4800      	ldr	r0, [pc, #0]	@ (800b844 <nanf+0x4>)
 800b842:	4770      	bx	lr
 800b844:	7fc00000 	.word	0x7fc00000

0800b848 <quorem>:
 800b848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	6903      	ldr	r3, [r0, #16]
 800b84e:	690c      	ldr	r4, [r1, #16]
 800b850:	4607      	mov	r7, r0
 800b852:	42a3      	cmp	r3, r4
 800b854:	db7e      	blt.n	800b954 <quorem+0x10c>
 800b856:	3c01      	subs	r4, #1
 800b858:	00a3      	lsls	r3, r4, #2
 800b85a:	f100 0514 	add.w	r5, r0, #20
 800b85e:	f101 0814 	add.w	r8, r1, #20
 800b862:	9300      	str	r3, [sp, #0]
 800b864:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b868:	9301      	str	r3, [sp, #4]
 800b86a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b86e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b872:	3301      	adds	r3, #1
 800b874:	429a      	cmp	r2, r3
 800b876:	fbb2 f6f3 	udiv	r6, r2, r3
 800b87a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b87e:	d32e      	bcc.n	800b8de <quorem+0x96>
 800b880:	f04f 0a00 	mov.w	sl, #0
 800b884:	46c4      	mov	ip, r8
 800b886:	46ae      	mov	lr, r5
 800b888:	46d3      	mov	fp, sl
 800b88a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b88e:	b298      	uxth	r0, r3
 800b890:	fb06 a000 	mla	r0, r6, r0, sl
 800b894:	0c1b      	lsrs	r3, r3, #16
 800b896:	0c02      	lsrs	r2, r0, #16
 800b898:	fb06 2303 	mla	r3, r6, r3, r2
 800b89c:	f8de 2000 	ldr.w	r2, [lr]
 800b8a0:	b280      	uxth	r0, r0
 800b8a2:	b292      	uxth	r2, r2
 800b8a4:	1a12      	subs	r2, r2, r0
 800b8a6:	445a      	add	r2, fp
 800b8a8:	f8de 0000 	ldr.w	r0, [lr]
 800b8ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b8b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b8ba:	b292      	uxth	r2, r2
 800b8bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b8c0:	45e1      	cmp	r9, ip
 800b8c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b8c6:	f84e 2b04 	str.w	r2, [lr], #4
 800b8ca:	d2de      	bcs.n	800b88a <quorem+0x42>
 800b8cc:	9b00      	ldr	r3, [sp, #0]
 800b8ce:	58eb      	ldr	r3, [r5, r3]
 800b8d0:	b92b      	cbnz	r3, 800b8de <quorem+0x96>
 800b8d2:	9b01      	ldr	r3, [sp, #4]
 800b8d4:	3b04      	subs	r3, #4
 800b8d6:	429d      	cmp	r5, r3
 800b8d8:	461a      	mov	r2, r3
 800b8da:	d32f      	bcc.n	800b93c <quorem+0xf4>
 800b8dc:	613c      	str	r4, [r7, #16]
 800b8de:	4638      	mov	r0, r7
 800b8e0:	f001 feca 	bl	800d678 <__mcmp>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	db25      	blt.n	800b934 <quorem+0xec>
 800b8e8:	4629      	mov	r1, r5
 800b8ea:	2000      	movs	r0, #0
 800b8ec:	f858 2b04 	ldr.w	r2, [r8], #4
 800b8f0:	f8d1 c000 	ldr.w	ip, [r1]
 800b8f4:	fa1f fe82 	uxth.w	lr, r2
 800b8f8:	fa1f f38c 	uxth.w	r3, ip
 800b8fc:	eba3 030e 	sub.w	r3, r3, lr
 800b900:	4403      	add	r3, r0
 800b902:	0c12      	lsrs	r2, r2, #16
 800b904:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b908:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b912:	45c1      	cmp	r9, r8
 800b914:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b918:	f841 3b04 	str.w	r3, [r1], #4
 800b91c:	d2e6      	bcs.n	800b8ec <quorem+0xa4>
 800b91e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b922:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b926:	b922      	cbnz	r2, 800b932 <quorem+0xea>
 800b928:	3b04      	subs	r3, #4
 800b92a:	429d      	cmp	r5, r3
 800b92c:	461a      	mov	r2, r3
 800b92e:	d30b      	bcc.n	800b948 <quorem+0x100>
 800b930:	613c      	str	r4, [r7, #16]
 800b932:	3601      	adds	r6, #1
 800b934:	4630      	mov	r0, r6
 800b936:	b003      	add	sp, #12
 800b938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93c:	6812      	ldr	r2, [r2, #0]
 800b93e:	3b04      	subs	r3, #4
 800b940:	2a00      	cmp	r2, #0
 800b942:	d1cb      	bne.n	800b8dc <quorem+0x94>
 800b944:	3c01      	subs	r4, #1
 800b946:	e7c6      	b.n	800b8d6 <quorem+0x8e>
 800b948:	6812      	ldr	r2, [r2, #0]
 800b94a:	3b04      	subs	r3, #4
 800b94c:	2a00      	cmp	r2, #0
 800b94e:	d1ef      	bne.n	800b930 <quorem+0xe8>
 800b950:	3c01      	subs	r4, #1
 800b952:	e7ea      	b.n	800b92a <quorem+0xe2>
 800b954:	2000      	movs	r0, #0
 800b956:	e7ee      	b.n	800b936 <quorem+0xee>

0800b958 <_dtoa_r>:
 800b958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95c:	4614      	mov	r4, r2
 800b95e:	461d      	mov	r5, r3
 800b960:	69c7      	ldr	r7, [r0, #28]
 800b962:	b097      	sub	sp, #92	@ 0x5c
 800b964:	4681      	mov	r9, r0
 800b966:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b96a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b96c:	b97f      	cbnz	r7, 800b98e <_dtoa_r+0x36>
 800b96e:	2010      	movs	r0, #16
 800b970:	f001 fa56 	bl	800ce20 <malloc>
 800b974:	4602      	mov	r2, r0
 800b976:	f8c9 001c 	str.w	r0, [r9, #28]
 800b97a:	b920      	cbnz	r0, 800b986 <_dtoa_r+0x2e>
 800b97c:	21ef      	movs	r1, #239	@ 0xef
 800b97e:	4bac      	ldr	r3, [pc, #688]	@ (800bc30 <_dtoa_r+0x2d8>)
 800b980:	48ac      	ldr	r0, [pc, #688]	@ (800bc34 <_dtoa_r+0x2dc>)
 800b982:	f002 f94b 	bl	800dc1c <__assert_func>
 800b986:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b98a:	6007      	str	r7, [r0, #0]
 800b98c:	60c7      	str	r7, [r0, #12]
 800b98e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b992:	6819      	ldr	r1, [r3, #0]
 800b994:	b159      	cbz	r1, 800b9ae <_dtoa_r+0x56>
 800b996:	685a      	ldr	r2, [r3, #4]
 800b998:	2301      	movs	r3, #1
 800b99a:	4093      	lsls	r3, r2
 800b99c:	604a      	str	r2, [r1, #4]
 800b99e:	608b      	str	r3, [r1, #8]
 800b9a0:	4648      	mov	r0, r9
 800b9a2:	f001 fbed 	bl	800d180 <_Bfree>
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b9ac:	601a      	str	r2, [r3, #0]
 800b9ae:	1e2b      	subs	r3, r5, #0
 800b9b0:	bfaf      	iteee	ge
 800b9b2:	2300      	movge	r3, #0
 800b9b4:	2201      	movlt	r2, #1
 800b9b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b9ba:	9307      	strlt	r3, [sp, #28]
 800b9bc:	bfa8      	it	ge
 800b9be:	6033      	strge	r3, [r6, #0]
 800b9c0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800b9c4:	4b9c      	ldr	r3, [pc, #624]	@ (800bc38 <_dtoa_r+0x2e0>)
 800b9c6:	bfb8      	it	lt
 800b9c8:	6032      	strlt	r2, [r6, #0]
 800b9ca:	ea33 0308 	bics.w	r3, r3, r8
 800b9ce:	d112      	bne.n	800b9f6 <_dtoa_r+0x9e>
 800b9d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b9d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b9d6:	6013      	str	r3, [r2, #0]
 800b9d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b9dc:	4323      	orrs	r3, r4
 800b9de:	f000 855e 	beq.w	800c49e <_dtoa_r+0xb46>
 800b9e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b9e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bc3c <_dtoa_r+0x2e4>
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f000 8560 	beq.w	800c4ae <_dtoa_r+0xb56>
 800b9ee:	f10a 0303 	add.w	r3, sl, #3
 800b9f2:	f000 bd5a 	b.w	800c4aa <_dtoa_r+0xb52>
 800b9f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b9fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba02:	2200      	movs	r2, #0
 800ba04:	2300      	movs	r3, #0
 800ba06:	f7f4 ffcf 	bl	80009a8 <__aeabi_dcmpeq>
 800ba0a:	4607      	mov	r7, r0
 800ba0c:	b158      	cbz	r0, 800ba26 <_dtoa_r+0xce>
 800ba0e:	2301      	movs	r3, #1
 800ba10:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ba12:	6013      	str	r3, [r2, #0]
 800ba14:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ba16:	b113      	cbz	r3, 800ba1e <_dtoa_r+0xc6>
 800ba18:	4b89      	ldr	r3, [pc, #548]	@ (800bc40 <_dtoa_r+0x2e8>)
 800ba1a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ba1c:	6013      	str	r3, [r2, #0]
 800ba1e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800bc44 <_dtoa_r+0x2ec>
 800ba22:	f000 bd44 	b.w	800c4ae <_dtoa_r+0xb56>
 800ba26:	ab14      	add	r3, sp, #80	@ 0x50
 800ba28:	9301      	str	r3, [sp, #4]
 800ba2a:	ab15      	add	r3, sp, #84	@ 0x54
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	4648      	mov	r0, r9
 800ba30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ba34:	f001 ff38 	bl	800d8a8 <__d2b>
 800ba38:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800ba3c:	9003      	str	r0, [sp, #12]
 800ba3e:	2e00      	cmp	r6, #0
 800ba40:	d078      	beq.n	800bb34 <_dtoa_r+0x1dc>
 800ba42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba48:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ba4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba50:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ba54:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ba58:	9712      	str	r7, [sp, #72]	@ 0x48
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	4b7a      	ldr	r3, [pc, #488]	@ (800bc48 <_dtoa_r+0x2f0>)
 800ba60:	f7f4 fb82 	bl	8000168 <__aeabi_dsub>
 800ba64:	a36c      	add	r3, pc, #432	@ (adr r3, 800bc18 <_dtoa_r+0x2c0>)
 800ba66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6a:	f7f4 fd35 	bl	80004d8 <__aeabi_dmul>
 800ba6e:	a36c      	add	r3, pc, #432	@ (adr r3, 800bc20 <_dtoa_r+0x2c8>)
 800ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba74:	f7f4 fb7a 	bl	800016c <__adddf3>
 800ba78:	4604      	mov	r4, r0
 800ba7a:	4630      	mov	r0, r6
 800ba7c:	460d      	mov	r5, r1
 800ba7e:	f7f4 fcc1 	bl	8000404 <__aeabi_i2d>
 800ba82:	a369      	add	r3, pc, #420	@ (adr r3, 800bc28 <_dtoa_r+0x2d0>)
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	f7f4 fd26 	bl	80004d8 <__aeabi_dmul>
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	460b      	mov	r3, r1
 800ba90:	4620      	mov	r0, r4
 800ba92:	4629      	mov	r1, r5
 800ba94:	f7f4 fb6a 	bl	800016c <__adddf3>
 800ba98:	4604      	mov	r4, r0
 800ba9a:	460d      	mov	r5, r1
 800ba9c:	f7f4 ffcc 	bl	8000a38 <__aeabi_d2iz>
 800baa0:	2200      	movs	r2, #0
 800baa2:	4607      	mov	r7, r0
 800baa4:	2300      	movs	r3, #0
 800baa6:	4620      	mov	r0, r4
 800baa8:	4629      	mov	r1, r5
 800baaa:	f7f4 ff87 	bl	80009bc <__aeabi_dcmplt>
 800baae:	b140      	cbz	r0, 800bac2 <_dtoa_r+0x16a>
 800bab0:	4638      	mov	r0, r7
 800bab2:	f7f4 fca7 	bl	8000404 <__aeabi_i2d>
 800bab6:	4622      	mov	r2, r4
 800bab8:	462b      	mov	r3, r5
 800baba:	f7f4 ff75 	bl	80009a8 <__aeabi_dcmpeq>
 800babe:	b900      	cbnz	r0, 800bac2 <_dtoa_r+0x16a>
 800bac0:	3f01      	subs	r7, #1
 800bac2:	2f16      	cmp	r7, #22
 800bac4:	d854      	bhi.n	800bb70 <_dtoa_r+0x218>
 800bac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800baca:	4b60      	ldr	r3, [pc, #384]	@ (800bc4c <_dtoa_r+0x2f4>)
 800bacc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad4:	f7f4 ff72 	bl	80009bc <__aeabi_dcmplt>
 800bad8:	2800      	cmp	r0, #0
 800bada:	d04b      	beq.n	800bb74 <_dtoa_r+0x21c>
 800badc:	2300      	movs	r3, #0
 800bade:	3f01      	subs	r7, #1
 800bae0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bae2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bae4:	1b9b      	subs	r3, r3, r6
 800bae6:	1e5a      	subs	r2, r3, #1
 800bae8:	bf49      	itett	mi
 800baea:	f1c3 0301 	rsbmi	r3, r3, #1
 800baee:	2300      	movpl	r3, #0
 800baf0:	9304      	strmi	r3, [sp, #16]
 800baf2:	2300      	movmi	r3, #0
 800baf4:	9209      	str	r2, [sp, #36]	@ 0x24
 800baf6:	bf54      	ite	pl
 800baf8:	9304      	strpl	r3, [sp, #16]
 800bafa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800bafc:	2f00      	cmp	r7, #0
 800bafe:	db3b      	blt.n	800bb78 <_dtoa_r+0x220>
 800bb00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb02:	970e      	str	r7, [sp, #56]	@ 0x38
 800bb04:	443b      	add	r3, r7
 800bb06:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb08:	2300      	movs	r3, #0
 800bb0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bb0e:	2b09      	cmp	r3, #9
 800bb10:	d865      	bhi.n	800bbde <_dtoa_r+0x286>
 800bb12:	2b05      	cmp	r3, #5
 800bb14:	bfc4      	itt	gt
 800bb16:	3b04      	subgt	r3, #4
 800bb18:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800bb1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bb1c:	bfc8      	it	gt
 800bb1e:	2400      	movgt	r4, #0
 800bb20:	f1a3 0302 	sub.w	r3, r3, #2
 800bb24:	bfd8      	it	le
 800bb26:	2401      	movle	r4, #1
 800bb28:	2b03      	cmp	r3, #3
 800bb2a:	d864      	bhi.n	800bbf6 <_dtoa_r+0x29e>
 800bb2c:	e8df f003 	tbb	[pc, r3]
 800bb30:	2c385553 	.word	0x2c385553
 800bb34:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bb38:	441e      	add	r6, r3
 800bb3a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bb3e:	2b20      	cmp	r3, #32
 800bb40:	bfc1      	itttt	gt
 800bb42:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bb46:	fa08 f803 	lslgt.w	r8, r8, r3
 800bb4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bb4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bb52:	bfd6      	itet	le
 800bb54:	f1c3 0320 	rsble	r3, r3, #32
 800bb58:	ea48 0003 	orrgt.w	r0, r8, r3
 800bb5c:	fa04 f003 	lslle.w	r0, r4, r3
 800bb60:	f7f4 fc40 	bl	80003e4 <__aeabi_ui2d>
 800bb64:	2201      	movs	r2, #1
 800bb66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bb6a:	3e01      	subs	r6, #1
 800bb6c:	9212      	str	r2, [sp, #72]	@ 0x48
 800bb6e:	e774      	b.n	800ba5a <_dtoa_r+0x102>
 800bb70:	2301      	movs	r3, #1
 800bb72:	e7b5      	b.n	800bae0 <_dtoa_r+0x188>
 800bb74:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bb76:	e7b4      	b.n	800bae2 <_dtoa_r+0x18a>
 800bb78:	9b04      	ldr	r3, [sp, #16]
 800bb7a:	1bdb      	subs	r3, r3, r7
 800bb7c:	9304      	str	r3, [sp, #16]
 800bb7e:	427b      	negs	r3, r7
 800bb80:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb82:	2300      	movs	r3, #0
 800bb84:	930e      	str	r3, [sp, #56]	@ 0x38
 800bb86:	e7c1      	b.n	800bb0c <_dtoa_r+0x1b4>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bb8e:	eb07 0b03 	add.w	fp, r7, r3
 800bb92:	f10b 0301 	add.w	r3, fp, #1
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	9308      	str	r3, [sp, #32]
 800bb9a:	bfb8      	it	lt
 800bb9c:	2301      	movlt	r3, #1
 800bb9e:	e006      	b.n	800bbae <_dtoa_r+0x256>
 800bba0:	2301      	movs	r3, #1
 800bba2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bba4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	dd28      	ble.n	800bbfc <_dtoa_r+0x2a4>
 800bbaa:	469b      	mov	fp, r3
 800bbac:	9308      	str	r3, [sp, #32]
 800bbae:	2100      	movs	r1, #0
 800bbb0:	2204      	movs	r2, #4
 800bbb2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bbb6:	f102 0514 	add.w	r5, r2, #20
 800bbba:	429d      	cmp	r5, r3
 800bbbc:	d926      	bls.n	800bc0c <_dtoa_r+0x2b4>
 800bbbe:	6041      	str	r1, [r0, #4]
 800bbc0:	4648      	mov	r0, r9
 800bbc2:	f001 fa9d 	bl	800d100 <_Balloc>
 800bbc6:	4682      	mov	sl, r0
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d143      	bne.n	800bc54 <_dtoa_r+0x2fc>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	f240 11af 	movw	r1, #431	@ 0x1af
 800bbd2:	4b1f      	ldr	r3, [pc, #124]	@ (800bc50 <_dtoa_r+0x2f8>)
 800bbd4:	e6d4      	b.n	800b980 <_dtoa_r+0x28>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	e7e3      	b.n	800bba2 <_dtoa_r+0x24a>
 800bbda:	2300      	movs	r3, #0
 800bbdc:	e7d5      	b.n	800bb8a <_dtoa_r+0x232>
 800bbde:	2401      	movs	r4, #1
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bbe4:	9320      	str	r3, [sp, #128]	@ 0x80
 800bbe6:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800bbea:	2200      	movs	r2, #0
 800bbec:	2312      	movs	r3, #18
 800bbee:	f8cd b020 	str.w	fp, [sp, #32]
 800bbf2:	9221      	str	r2, [sp, #132]	@ 0x84
 800bbf4:	e7db      	b.n	800bbae <_dtoa_r+0x256>
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbfa:	e7f4      	b.n	800bbe6 <_dtoa_r+0x28e>
 800bbfc:	f04f 0b01 	mov.w	fp, #1
 800bc00:	465b      	mov	r3, fp
 800bc02:	f8cd b020 	str.w	fp, [sp, #32]
 800bc06:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800bc0a:	e7d0      	b.n	800bbae <_dtoa_r+0x256>
 800bc0c:	3101      	adds	r1, #1
 800bc0e:	0052      	lsls	r2, r2, #1
 800bc10:	e7d1      	b.n	800bbb6 <_dtoa_r+0x25e>
 800bc12:	bf00      	nop
 800bc14:	f3af 8000 	nop.w
 800bc18:	636f4361 	.word	0x636f4361
 800bc1c:	3fd287a7 	.word	0x3fd287a7
 800bc20:	8b60c8b3 	.word	0x8b60c8b3
 800bc24:	3fc68a28 	.word	0x3fc68a28
 800bc28:	509f79fb 	.word	0x509f79fb
 800bc2c:	3fd34413 	.word	0x3fd34413
 800bc30:	0800ecb2 	.word	0x0800ecb2
 800bc34:	0800ecc9 	.word	0x0800ecc9
 800bc38:	7ff00000 	.word	0x7ff00000
 800bc3c:	0800ecae 	.word	0x0800ecae
 800bc40:	0800ec73 	.word	0x0800ec73
 800bc44:	0800ec72 	.word	0x0800ec72
 800bc48:	3ff80000 	.word	0x3ff80000
 800bc4c:	0800efc0 	.word	0x0800efc0
 800bc50:	0800ed21 	.word	0x0800ed21
 800bc54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bc58:	6018      	str	r0, [r3, #0]
 800bc5a:	9b08      	ldr	r3, [sp, #32]
 800bc5c:	2b0e      	cmp	r3, #14
 800bc5e:	f200 80a1 	bhi.w	800bda4 <_dtoa_r+0x44c>
 800bc62:	2c00      	cmp	r4, #0
 800bc64:	f000 809e 	beq.w	800bda4 <_dtoa_r+0x44c>
 800bc68:	2f00      	cmp	r7, #0
 800bc6a:	dd33      	ble.n	800bcd4 <_dtoa_r+0x37c>
 800bc6c:	4b9c      	ldr	r3, [pc, #624]	@ (800bee0 <_dtoa_r+0x588>)
 800bc6e:	f007 020f 	and.w	r2, r7, #15
 800bc72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc76:	05f8      	lsls	r0, r7, #23
 800bc78:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bc7c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800bc80:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bc84:	d516      	bpl.n	800bcb4 <_dtoa_r+0x35c>
 800bc86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc8a:	4b96      	ldr	r3, [pc, #600]	@ (800bee4 <_dtoa_r+0x58c>)
 800bc8c:	2603      	movs	r6, #3
 800bc8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc92:	f7f4 fd4b 	bl	800072c <__aeabi_ddiv>
 800bc96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bc9a:	f004 040f 	and.w	r4, r4, #15
 800bc9e:	4d91      	ldr	r5, [pc, #580]	@ (800bee4 <_dtoa_r+0x58c>)
 800bca0:	b954      	cbnz	r4, 800bcb8 <_dtoa_r+0x360>
 800bca2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcaa:	f7f4 fd3f 	bl	800072c <__aeabi_ddiv>
 800bcae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bcb2:	e028      	b.n	800bd06 <_dtoa_r+0x3ae>
 800bcb4:	2602      	movs	r6, #2
 800bcb6:	e7f2      	b.n	800bc9e <_dtoa_r+0x346>
 800bcb8:	07e1      	lsls	r1, r4, #31
 800bcba:	d508      	bpl.n	800bcce <_dtoa_r+0x376>
 800bcbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bcc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bcc4:	f7f4 fc08 	bl	80004d8 <__aeabi_dmul>
 800bcc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bccc:	3601      	adds	r6, #1
 800bcce:	1064      	asrs	r4, r4, #1
 800bcd0:	3508      	adds	r5, #8
 800bcd2:	e7e5      	b.n	800bca0 <_dtoa_r+0x348>
 800bcd4:	f000 80af 	beq.w	800be36 <_dtoa_r+0x4de>
 800bcd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcdc:	427c      	negs	r4, r7
 800bcde:	4b80      	ldr	r3, [pc, #512]	@ (800bee0 <_dtoa_r+0x588>)
 800bce0:	f004 020f 	and.w	r2, r4, #15
 800bce4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcec:	f7f4 fbf4 	bl	80004d8 <__aeabi_dmul>
 800bcf0:	2602      	movs	r6, #2
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bcf8:	4d7a      	ldr	r5, [pc, #488]	@ (800bee4 <_dtoa_r+0x58c>)
 800bcfa:	1124      	asrs	r4, r4, #4
 800bcfc:	2c00      	cmp	r4, #0
 800bcfe:	f040 808f 	bne.w	800be20 <_dtoa_r+0x4c8>
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d1d3      	bne.n	800bcae <_dtoa_r+0x356>
 800bd06:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800bd0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f000 8094 	beq.w	800be3a <_dtoa_r+0x4e2>
 800bd12:	2200      	movs	r2, #0
 800bd14:	4620      	mov	r0, r4
 800bd16:	4629      	mov	r1, r5
 800bd18:	4b73      	ldr	r3, [pc, #460]	@ (800bee8 <_dtoa_r+0x590>)
 800bd1a:	f7f4 fe4f 	bl	80009bc <__aeabi_dcmplt>
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	f000 808b 	beq.w	800be3a <_dtoa_r+0x4e2>
 800bd24:	9b08      	ldr	r3, [sp, #32]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f000 8087 	beq.w	800be3a <_dtoa_r+0x4e2>
 800bd2c:	f1bb 0f00 	cmp.w	fp, #0
 800bd30:	dd34      	ble.n	800bd9c <_dtoa_r+0x444>
 800bd32:	4620      	mov	r0, r4
 800bd34:	2200      	movs	r2, #0
 800bd36:	4629      	mov	r1, r5
 800bd38:	4b6c      	ldr	r3, [pc, #432]	@ (800beec <_dtoa_r+0x594>)
 800bd3a:	f7f4 fbcd 	bl	80004d8 <__aeabi_dmul>
 800bd3e:	465c      	mov	r4, fp
 800bd40:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd44:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800bd48:	3601      	adds	r6, #1
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	f7f4 fb5a 	bl	8000404 <__aeabi_i2d>
 800bd50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd54:	f7f4 fbc0 	bl	80004d8 <__aeabi_dmul>
 800bd58:	2200      	movs	r2, #0
 800bd5a:	4b65      	ldr	r3, [pc, #404]	@ (800bef0 <_dtoa_r+0x598>)
 800bd5c:	f7f4 fa06 	bl	800016c <__adddf3>
 800bd60:	4605      	mov	r5, r0
 800bd62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bd66:	2c00      	cmp	r4, #0
 800bd68:	d16a      	bne.n	800be40 <_dtoa_r+0x4e8>
 800bd6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	4b60      	ldr	r3, [pc, #384]	@ (800bef4 <_dtoa_r+0x59c>)
 800bd72:	f7f4 f9f9 	bl	8000168 <__aeabi_dsub>
 800bd76:	4602      	mov	r2, r0
 800bd78:	460b      	mov	r3, r1
 800bd7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd7e:	462a      	mov	r2, r5
 800bd80:	4633      	mov	r3, r6
 800bd82:	f7f4 fe39 	bl	80009f8 <__aeabi_dcmpgt>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	f040 8298 	bne.w	800c2bc <_dtoa_r+0x964>
 800bd8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd90:	462a      	mov	r2, r5
 800bd92:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bd96:	f7f4 fe11 	bl	80009bc <__aeabi_dcmplt>
 800bd9a:	bb38      	cbnz	r0, 800bdec <_dtoa_r+0x494>
 800bd9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bda0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bda4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f2c0 8157 	blt.w	800c05a <_dtoa_r+0x702>
 800bdac:	2f0e      	cmp	r7, #14
 800bdae:	f300 8154 	bgt.w	800c05a <_dtoa_r+0x702>
 800bdb2:	4b4b      	ldr	r3, [pc, #300]	@ (800bee0 <_dtoa_r+0x588>)
 800bdb4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bdb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bdbc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bdc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f280 80e5 	bge.w	800bf92 <_dtoa_r+0x63a>
 800bdc8:	9b08      	ldr	r3, [sp, #32]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	f300 80e1 	bgt.w	800bf92 <_dtoa_r+0x63a>
 800bdd0:	d10c      	bne.n	800bdec <_dtoa_r+0x494>
 800bdd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	4b46      	ldr	r3, [pc, #280]	@ (800bef4 <_dtoa_r+0x59c>)
 800bdda:	f7f4 fb7d 	bl	80004d8 <__aeabi_dmul>
 800bdde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bde2:	f7f4 fdff 	bl	80009e4 <__aeabi_dcmpge>
 800bde6:	2800      	cmp	r0, #0
 800bde8:	f000 8266 	beq.w	800c2b8 <_dtoa_r+0x960>
 800bdec:	2400      	movs	r4, #0
 800bdee:	4625      	mov	r5, r4
 800bdf0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bdf2:	4656      	mov	r6, sl
 800bdf4:	ea6f 0803 	mvn.w	r8, r3
 800bdf8:	2700      	movs	r7, #0
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	4648      	mov	r0, r9
 800bdfe:	f001 f9bf 	bl	800d180 <_Bfree>
 800be02:	2d00      	cmp	r5, #0
 800be04:	f000 80bd 	beq.w	800bf82 <_dtoa_r+0x62a>
 800be08:	b12f      	cbz	r7, 800be16 <_dtoa_r+0x4be>
 800be0a:	42af      	cmp	r7, r5
 800be0c:	d003      	beq.n	800be16 <_dtoa_r+0x4be>
 800be0e:	4639      	mov	r1, r7
 800be10:	4648      	mov	r0, r9
 800be12:	f001 f9b5 	bl	800d180 <_Bfree>
 800be16:	4629      	mov	r1, r5
 800be18:	4648      	mov	r0, r9
 800be1a:	f001 f9b1 	bl	800d180 <_Bfree>
 800be1e:	e0b0      	b.n	800bf82 <_dtoa_r+0x62a>
 800be20:	07e2      	lsls	r2, r4, #31
 800be22:	d505      	bpl.n	800be30 <_dtoa_r+0x4d8>
 800be24:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be28:	f7f4 fb56 	bl	80004d8 <__aeabi_dmul>
 800be2c:	2301      	movs	r3, #1
 800be2e:	3601      	adds	r6, #1
 800be30:	1064      	asrs	r4, r4, #1
 800be32:	3508      	adds	r5, #8
 800be34:	e762      	b.n	800bcfc <_dtoa_r+0x3a4>
 800be36:	2602      	movs	r6, #2
 800be38:	e765      	b.n	800bd06 <_dtoa_r+0x3ae>
 800be3a:	46b8      	mov	r8, r7
 800be3c:	9c08      	ldr	r4, [sp, #32]
 800be3e:	e784      	b.n	800bd4a <_dtoa_r+0x3f2>
 800be40:	4b27      	ldr	r3, [pc, #156]	@ (800bee0 <_dtoa_r+0x588>)
 800be42:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be4c:	4454      	add	r4, sl
 800be4e:	2900      	cmp	r1, #0
 800be50:	d054      	beq.n	800befc <_dtoa_r+0x5a4>
 800be52:	2000      	movs	r0, #0
 800be54:	4928      	ldr	r1, [pc, #160]	@ (800bef8 <_dtoa_r+0x5a0>)
 800be56:	f7f4 fc69 	bl	800072c <__aeabi_ddiv>
 800be5a:	4633      	mov	r3, r6
 800be5c:	462a      	mov	r2, r5
 800be5e:	f7f4 f983 	bl	8000168 <__aeabi_dsub>
 800be62:	4656      	mov	r6, sl
 800be64:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be6c:	f7f4 fde4 	bl	8000a38 <__aeabi_d2iz>
 800be70:	4605      	mov	r5, r0
 800be72:	f7f4 fac7 	bl	8000404 <__aeabi_i2d>
 800be76:	4602      	mov	r2, r0
 800be78:	460b      	mov	r3, r1
 800be7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be7e:	f7f4 f973 	bl	8000168 <__aeabi_dsub>
 800be82:	4602      	mov	r2, r0
 800be84:	460b      	mov	r3, r1
 800be86:	3530      	adds	r5, #48	@ 0x30
 800be88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be90:	f806 5b01 	strb.w	r5, [r6], #1
 800be94:	f7f4 fd92 	bl	80009bc <__aeabi_dcmplt>
 800be98:	2800      	cmp	r0, #0
 800be9a:	d172      	bne.n	800bf82 <_dtoa_r+0x62a>
 800be9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bea0:	2000      	movs	r0, #0
 800bea2:	4911      	ldr	r1, [pc, #68]	@ (800bee8 <_dtoa_r+0x590>)
 800bea4:	f7f4 f960 	bl	8000168 <__aeabi_dsub>
 800bea8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800beac:	f7f4 fd86 	bl	80009bc <__aeabi_dcmplt>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	f040 80b4 	bne.w	800c01e <_dtoa_r+0x6c6>
 800beb6:	42a6      	cmp	r6, r4
 800beb8:	f43f af70 	beq.w	800bd9c <_dtoa_r+0x444>
 800bebc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bec0:	2200      	movs	r2, #0
 800bec2:	4b0a      	ldr	r3, [pc, #40]	@ (800beec <_dtoa_r+0x594>)
 800bec4:	f7f4 fb08 	bl	80004d8 <__aeabi_dmul>
 800bec8:	2200      	movs	r2, #0
 800beca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bece:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bed2:	4b06      	ldr	r3, [pc, #24]	@ (800beec <_dtoa_r+0x594>)
 800bed4:	f7f4 fb00 	bl	80004d8 <__aeabi_dmul>
 800bed8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bedc:	e7c4      	b.n	800be68 <_dtoa_r+0x510>
 800bede:	bf00      	nop
 800bee0:	0800efc0 	.word	0x0800efc0
 800bee4:	0800ef98 	.word	0x0800ef98
 800bee8:	3ff00000 	.word	0x3ff00000
 800beec:	40240000 	.word	0x40240000
 800bef0:	401c0000 	.word	0x401c0000
 800bef4:	40140000 	.word	0x40140000
 800bef8:	3fe00000 	.word	0x3fe00000
 800befc:	4631      	mov	r1, r6
 800befe:	4628      	mov	r0, r5
 800bf00:	f7f4 faea 	bl	80004d8 <__aeabi_dmul>
 800bf04:	4656      	mov	r6, sl
 800bf06:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf0a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bf0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf10:	f7f4 fd92 	bl	8000a38 <__aeabi_d2iz>
 800bf14:	4605      	mov	r5, r0
 800bf16:	f7f4 fa75 	bl	8000404 <__aeabi_i2d>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf22:	f7f4 f921 	bl	8000168 <__aeabi_dsub>
 800bf26:	4602      	mov	r2, r0
 800bf28:	460b      	mov	r3, r1
 800bf2a:	3530      	adds	r5, #48	@ 0x30
 800bf2c:	f806 5b01 	strb.w	r5, [r6], #1
 800bf30:	42a6      	cmp	r6, r4
 800bf32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bf36:	f04f 0200 	mov.w	r2, #0
 800bf3a:	d124      	bne.n	800bf86 <_dtoa_r+0x62e>
 800bf3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bf40:	4bae      	ldr	r3, [pc, #696]	@ (800c1fc <_dtoa_r+0x8a4>)
 800bf42:	f7f4 f913 	bl	800016c <__adddf3>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf4e:	f7f4 fd53 	bl	80009f8 <__aeabi_dcmpgt>
 800bf52:	2800      	cmp	r0, #0
 800bf54:	d163      	bne.n	800c01e <_dtoa_r+0x6c6>
 800bf56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf5a:	2000      	movs	r0, #0
 800bf5c:	49a7      	ldr	r1, [pc, #668]	@ (800c1fc <_dtoa_r+0x8a4>)
 800bf5e:	f7f4 f903 	bl	8000168 <__aeabi_dsub>
 800bf62:	4602      	mov	r2, r0
 800bf64:	460b      	mov	r3, r1
 800bf66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf6a:	f7f4 fd27 	bl	80009bc <__aeabi_dcmplt>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	f43f af14 	beq.w	800bd9c <_dtoa_r+0x444>
 800bf74:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bf76:	1e73      	subs	r3, r6, #1
 800bf78:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bf7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf7e:	2b30      	cmp	r3, #48	@ 0x30
 800bf80:	d0f8      	beq.n	800bf74 <_dtoa_r+0x61c>
 800bf82:	4647      	mov	r7, r8
 800bf84:	e03b      	b.n	800bffe <_dtoa_r+0x6a6>
 800bf86:	4b9e      	ldr	r3, [pc, #632]	@ (800c200 <_dtoa_r+0x8a8>)
 800bf88:	f7f4 faa6 	bl	80004d8 <__aeabi_dmul>
 800bf8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf90:	e7bc      	b.n	800bf0c <_dtoa_r+0x5b4>
 800bf92:	4656      	mov	r6, sl
 800bf94:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800bf98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	4629      	mov	r1, r5
 800bfa0:	f7f4 fbc4 	bl	800072c <__aeabi_ddiv>
 800bfa4:	f7f4 fd48 	bl	8000a38 <__aeabi_d2iz>
 800bfa8:	4680      	mov	r8, r0
 800bfaa:	f7f4 fa2b 	bl	8000404 <__aeabi_i2d>
 800bfae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfb2:	f7f4 fa91 	bl	80004d8 <__aeabi_dmul>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	460b      	mov	r3, r1
 800bfba:	4620      	mov	r0, r4
 800bfbc:	4629      	mov	r1, r5
 800bfbe:	f7f4 f8d3 	bl	8000168 <__aeabi_dsub>
 800bfc2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bfc6:	9d08      	ldr	r5, [sp, #32]
 800bfc8:	f806 4b01 	strb.w	r4, [r6], #1
 800bfcc:	eba6 040a 	sub.w	r4, r6, sl
 800bfd0:	42a5      	cmp	r5, r4
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	d133      	bne.n	800c040 <_dtoa_r+0x6e8>
 800bfd8:	f7f4 f8c8 	bl	800016c <__adddf3>
 800bfdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	460d      	mov	r5, r1
 800bfe4:	f7f4 fd08 	bl	80009f8 <__aeabi_dcmpgt>
 800bfe8:	b9c0      	cbnz	r0, 800c01c <_dtoa_r+0x6c4>
 800bfea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfee:	4620      	mov	r0, r4
 800bff0:	4629      	mov	r1, r5
 800bff2:	f7f4 fcd9 	bl	80009a8 <__aeabi_dcmpeq>
 800bff6:	b110      	cbz	r0, 800bffe <_dtoa_r+0x6a6>
 800bff8:	f018 0f01 	tst.w	r8, #1
 800bffc:	d10e      	bne.n	800c01c <_dtoa_r+0x6c4>
 800bffe:	4648      	mov	r0, r9
 800c000:	9903      	ldr	r1, [sp, #12]
 800c002:	f001 f8bd 	bl	800d180 <_Bfree>
 800c006:	2300      	movs	r3, #0
 800c008:	7033      	strb	r3, [r6, #0]
 800c00a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c00c:	3701      	adds	r7, #1
 800c00e:	601f      	str	r7, [r3, #0]
 800c010:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c012:	2b00      	cmp	r3, #0
 800c014:	f000 824b 	beq.w	800c4ae <_dtoa_r+0xb56>
 800c018:	601e      	str	r6, [r3, #0]
 800c01a:	e248      	b.n	800c4ae <_dtoa_r+0xb56>
 800c01c:	46b8      	mov	r8, r7
 800c01e:	4633      	mov	r3, r6
 800c020:	461e      	mov	r6, r3
 800c022:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c026:	2a39      	cmp	r2, #57	@ 0x39
 800c028:	d106      	bne.n	800c038 <_dtoa_r+0x6e0>
 800c02a:	459a      	cmp	sl, r3
 800c02c:	d1f8      	bne.n	800c020 <_dtoa_r+0x6c8>
 800c02e:	2230      	movs	r2, #48	@ 0x30
 800c030:	f108 0801 	add.w	r8, r8, #1
 800c034:	f88a 2000 	strb.w	r2, [sl]
 800c038:	781a      	ldrb	r2, [r3, #0]
 800c03a:	3201      	adds	r2, #1
 800c03c:	701a      	strb	r2, [r3, #0]
 800c03e:	e7a0      	b.n	800bf82 <_dtoa_r+0x62a>
 800c040:	2200      	movs	r2, #0
 800c042:	4b6f      	ldr	r3, [pc, #444]	@ (800c200 <_dtoa_r+0x8a8>)
 800c044:	f7f4 fa48 	bl	80004d8 <__aeabi_dmul>
 800c048:	2200      	movs	r2, #0
 800c04a:	2300      	movs	r3, #0
 800c04c:	4604      	mov	r4, r0
 800c04e:	460d      	mov	r5, r1
 800c050:	f7f4 fcaa 	bl	80009a8 <__aeabi_dcmpeq>
 800c054:	2800      	cmp	r0, #0
 800c056:	d09f      	beq.n	800bf98 <_dtoa_r+0x640>
 800c058:	e7d1      	b.n	800bffe <_dtoa_r+0x6a6>
 800c05a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c05c:	2a00      	cmp	r2, #0
 800c05e:	f000 80ea 	beq.w	800c236 <_dtoa_r+0x8de>
 800c062:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c064:	2a01      	cmp	r2, #1
 800c066:	f300 80cd 	bgt.w	800c204 <_dtoa_r+0x8ac>
 800c06a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c06c:	2a00      	cmp	r2, #0
 800c06e:	f000 80c1 	beq.w	800c1f4 <_dtoa_r+0x89c>
 800c072:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c076:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c078:	9e04      	ldr	r6, [sp, #16]
 800c07a:	9a04      	ldr	r2, [sp, #16]
 800c07c:	2101      	movs	r1, #1
 800c07e:	441a      	add	r2, r3
 800c080:	9204      	str	r2, [sp, #16]
 800c082:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c084:	4648      	mov	r0, r9
 800c086:	441a      	add	r2, r3
 800c088:	9209      	str	r2, [sp, #36]	@ 0x24
 800c08a:	f001 f977 	bl	800d37c <__i2b>
 800c08e:	4605      	mov	r5, r0
 800c090:	b166      	cbz	r6, 800c0ac <_dtoa_r+0x754>
 800c092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c094:	2b00      	cmp	r3, #0
 800c096:	dd09      	ble.n	800c0ac <_dtoa_r+0x754>
 800c098:	42b3      	cmp	r3, r6
 800c09a:	bfa8      	it	ge
 800c09c:	4633      	movge	r3, r6
 800c09e:	9a04      	ldr	r2, [sp, #16]
 800c0a0:	1af6      	subs	r6, r6, r3
 800c0a2:	1ad2      	subs	r2, r2, r3
 800c0a4:	9204      	str	r2, [sp, #16]
 800c0a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0a8:	1ad3      	subs	r3, r2, r3
 800c0aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0ae:	b30b      	cbz	r3, 800c0f4 <_dtoa_r+0x79c>
 800c0b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	f000 80c6 	beq.w	800c244 <_dtoa_r+0x8ec>
 800c0b8:	2c00      	cmp	r4, #0
 800c0ba:	f000 80c0 	beq.w	800c23e <_dtoa_r+0x8e6>
 800c0be:	4629      	mov	r1, r5
 800c0c0:	4622      	mov	r2, r4
 800c0c2:	4648      	mov	r0, r9
 800c0c4:	f001 fa12 	bl	800d4ec <__pow5mult>
 800c0c8:	9a03      	ldr	r2, [sp, #12]
 800c0ca:	4601      	mov	r1, r0
 800c0cc:	4605      	mov	r5, r0
 800c0ce:	4648      	mov	r0, r9
 800c0d0:	f001 f96a 	bl	800d3a8 <__multiply>
 800c0d4:	9903      	ldr	r1, [sp, #12]
 800c0d6:	4680      	mov	r8, r0
 800c0d8:	4648      	mov	r0, r9
 800c0da:	f001 f851 	bl	800d180 <_Bfree>
 800c0de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0e0:	1b1b      	subs	r3, r3, r4
 800c0e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0e4:	f000 80b1 	beq.w	800c24a <_dtoa_r+0x8f2>
 800c0e8:	4641      	mov	r1, r8
 800c0ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0ec:	4648      	mov	r0, r9
 800c0ee:	f001 f9fd 	bl	800d4ec <__pow5mult>
 800c0f2:	9003      	str	r0, [sp, #12]
 800c0f4:	2101      	movs	r1, #1
 800c0f6:	4648      	mov	r0, r9
 800c0f8:	f001 f940 	bl	800d37c <__i2b>
 800c0fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0fe:	4604      	mov	r4, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	f000 81d8 	beq.w	800c4b6 <_dtoa_r+0xb5e>
 800c106:	461a      	mov	r2, r3
 800c108:	4601      	mov	r1, r0
 800c10a:	4648      	mov	r0, r9
 800c10c:	f001 f9ee 	bl	800d4ec <__pow5mult>
 800c110:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c112:	4604      	mov	r4, r0
 800c114:	2b01      	cmp	r3, #1
 800c116:	f300 809f 	bgt.w	800c258 <_dtoa_r+0x900>
 800c11a:	9b06      	ldr	r3, [sp, #24]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f040 8097 	bne.w	800c250 <_dtoa_r+0x8f8>
 800c122:	9b07      	ldr	r3, [sp, #28]
 800c124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f040 8093 	bne.w	800c254 <_dtoa_r+0x8fc>
 800c12e:	9b07      	ldr	r3, [sp, #28]
 800c130:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c134:	0d1b      	lsrs	r3, r3, #20
 800c136:	051b      	lsls	r3, r3, #20
 800c138:	b133      	cbz	r3, 800c148 <_dtoa_r+0x7f0>
 800c13a:	9b04      	ldr	r3, [sp, #16]
 800c13c:	3301      	adds	r3, #1
 800c13e:	9304      	str	r3, [sp, #16]
 800c140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c142:	3301      	adds	r3, #1
 800c144:	9309      	str	r3, [sp, #36]	@ 0x24
 800c146:	2301      	movs	r3, #1
 800c148:	930a      	str	r3, [sp, #40]	@ 0x28
 800c14a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f000 81b8 	beq.w	800c4c2 <_dtoa_r+0xb6a>
 800c152:	6923      	ldr	r3, [r4, #16]
 800c154:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c158:	6918      	ldr	r0, [r3, #16]
 800c15a:	f001 f8c3 	bl	800d2e4 <__hi0bits>
 800c15e:	f1c0 0020 	rsb	r0, r0, #32
 800c162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c164:	4418      	add	r0, r3
 800c166:	f010 001f 	ands.w	r0, r0, #31
 800c16a:	f000 8082 	beq.w	800c272 <_dtoa_r+0x91a>
 800c16e:	f1c0 0320 	rsb	r3, r0, #32
 800c172:	2b04      	cmp	r3, #4
 800c174:	dd73      	ble.n	800c25e <_dtoa_r+0x906>
 800c176:	9b04      	ldr	r3, [sp, #16]
 800c178:	f1c0 001c 	rsb	r0, r0, #28
 800c17c:	4403      	add	r3, r0
 800c17e:	9304      	str	r3, [sp, #16]
 800c180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c182:	4406      	add	r6, r0
 800c184:	4403      	add	r3, r0
 800c186:	9309      	str	r3, [sp, #36]	@ 0x24
 800c188:	9b04      	ldr	r3, [sp, #16]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	dd05      	ble.n	800c19a <_dtoa_r+0x842>
 800c18e:	461a      	mov	r2, r3
 800c190:	4648      	mov	r0, r9
 800c192:	9903      	ldr	r1, [sp, #12]
 800c194:	f001 fa04 	bl	800d5a0 <__lshift>
 800c198:	9003      	str	r0, [sp, #12]
 800c19a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	dd05      	ble.n	800c1ac <_dtoa_r+0x854>
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	4648      	mov	r0, r9
 800c1a6:	f001 f9fb 	bl	800d5a0 <__lshift>
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d061      	beq.n	800c276 <_dtoa_r+0x91e>
 800c1b2:	4621      	mov	r1, r4
 800c1b4:	9803      	ldr	r0, [sp, #12]
 800c1b6:	f001 fa5f 	bl	800d678 <__mcmp>
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	da5b      	bge.n	800c276 <_dtoa_r+0x91e>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	220a      	movs	r2, #10
 800c1c2:	4648      	mov	r0, r9
 800c1c4:	9903      	ldr	r1, [sp, #12]
 800c1c6:	f000 fffd 	bl	800d1c4 <__multadd>
 800c1ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1cc:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800c1d0:	9003      	str	r0, [sp, #12]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f000 8177 	beq.w	800c4c6 <_dtoa_r+0xb6e>
 800c1d8:	4629      	mov	r1, r5
 800c1da:	2300      	movs	r3, #0
 800c1dc:	220a      	movs	r2, #10
 800c1de:	4648      	mov	r0, r9
 800c1e0:	f000 fff0 	bl	800d1c4 <__multadd>
 800c1e4:	f1bb 0f00 	cmp.w	fp, #0
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	dc6f      	bgt.n	800c2cc <_dtoa_r+0x974>
 800c1ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c1ee:	2b02      	cmp	r3, #2
 800c1f0:	dc49      	bgt.n	800c286 <_dtoa_r+0x92e>
 800c1f2:	e06b      	b.n	800c2cc <_dtoa_r+0x974>
 800c1f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c1f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c1fa:	e73c      	b.n	800c076 <_dtoa_r+0x71e>
 800c1fc:	3fe00000 	.word	0x3fe00000
 800c200:	40240000 	.word	0x40240000
 800c204:	9b08      	ldr	r3, [sp, #32]
 800c206:	1e5c      	subs	r4, r3, #1
 800c208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c20a:	42a3      	cmp	r3, r4
 800c20c:	db09      	blt.n	800c222 <_dtoa_r+0x8ca>
 800c20e:	1b1c      	subs	r4, r3, r4
 800c210:	9b08      	ldr	r3, [sp, #32]
 800c212:	2b00      	cmp	r3, #0
 800c214:	f6bf af30 	bge.w	800c078 <_dtoa_r+0x720>
 800c218:	9b04      	ldr	r3, [sp, #16]
 800c21a:	9a08      	ldr	r2, [sp, #32]
 800c21c:	1a9e      	subs	r6, r3, r2
 800c21e:	2300      	movs	r3, #0
 800c220:	e72b      	b.n	800c07a <_dtoa_r+0x722>
 800c222:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c224:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c226:	1ae3      	subs	r3, r4, r3
 800c228:	441a      	add	r2, r3
 800c22a:	940a      	str	r4, [sp, #40]	@ 0x28
 800c22c:	9e04      	ldr	r6, [sp, #16]
 800c22e:	2400      	movs	r4, #0
 800c230:	9b08      	ldr	r3, [sp, #32]
 800c232:	920e      	str	r2, [sp, #56]	@ 0x38
 800c234:	e721      	b.n	800c07a <_dtoa_r+0x722>
 800c236:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c238:	9e04      	ldr	r6, [sp, #16]
 800c23a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c23c:	e728      	b.n	800c090 <_dtoa_r+0x738>
 800c23e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c242:	e751      	b.n	800c0e8 <_dtoa_r+0x790>
 800c244:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c246:	9903      	ldr	r1, [sp, #12]
 800c248:	e750      	b.n	800c0ec <_dtoa_r+0x794>
 800c24a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c24e:	e751      	b.n	800c0f4 <_dtoa_r+0x79c>
 800c250:	2300      	movs	r3, #0
 800c252:	e779      	b.n	800c148 <_dtoa_r+0x7f0>
 800c254:	9b06      	ldr	r3, [sp, #24]
 800c256:	e777      	b.n	800c148 <_dtoa_r+0x7f0>
 800c258:	2300      	movs	r3, #0
 800c25a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c25c:	e779      	b.n	800c152 <_dtoa_r+0x7fa>
 800c25e:	d093      	beq.n	800c188 <_dtoa_r+0x830>
 800c260:	9a04      	ldr	r2, [sp, #16]
 800c262:	331c      	adds	r3, #28
 800c264:	441a      	add	r2, r3
 800c266:	9204      	str	r2, [sp, #16]
 800c268:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c26a:	441e      	add	r6, r3
 800c26c:	441a      	add	r2, r3
 800c26e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c270:	e78a      	b.n	800c188 <_dtoa_r+0x830>
 800c272:	4603      	mov	r3, r0
 800c274:	e7f4      	b.n	800c260 <_dtoa_r+0x908>
 800c276:	9b08      	ldr	r3, [sp, #32]
 800c278:	46b8      	mov	r8, r7
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	dc20      	bgt.n	800c2c0 <_dtoa_r+0x968>
 800c27e:	469b      	mov	fp, r3
 800c280:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c282:	2b02      	cmp	r3, #2
 800c284:	dd1e      	ble.n	800c2c4 <_dtoa_r+0x96c>
 800c286:	f1bb 0f00 	cmp.w	fp, #0
 800c28a:	f47f adb1 	bne.w	800bdf0 <_dtoa_r+0x498>
 800c28e:	4621      	mov	r1, r4
 800c290:	465b      	mov	r3, fp
 800c292:	2205      	movs	r2, #5
 800c294:	4648      	mov	r0, r9
 800c296:	f000 ff95 	bl	800d1c4 <__multadd>
 800c29a:	4601      	mov	r1, r0
 800c29c:	4604      	mov	r4, r0
 800c29e:	9803      	ldr	r0, [sp, #12]
 800c2a0:	f001 f9ea 	bl	800d678 <__mcmp>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	f77f ada3 	ble.w	800bdf0 <_dtoa_r+0x498>
 800c2aa:	4656      	mov	r6, sl
 800c2ac:	2331      	movs	r3, #49	@ 0x31
 800c2ae:	f108 0801 	add.w	r8, r8, #1
 800c2b2:	f806 3b01 	strb.w	r3, [r6], #1
 800c2b6:	e59f      	b.n	800bdf8 <_dtoa_r+0x4a0>
 800c2b8:	46b8      	mov	r8, r7
 800c2ba:	9c08      	ldr	r4, [sp, #32]
 800c2bc:	4625      	mov	r5, r4
 800c2be:	e7f4      	b.n	800c2aa <_dtoa_r+0x952>
 800c2c0:	f8dd b020 	ldr.w	fp, [sp, #32]
 800c2c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	f000 8101 	beq.w	800c4ce <_dtoa_r+0xb76>
 800c2cc:	2e00      	cmp	r6, #0
 800c2ce:	dd05      	ble.n	800c2dc <_dtoa_r+0x984>
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	4632      	mov	r2, r6
 800c2d4:	4648      	mov	r0, r9
 800c2d6:	f001 f963 	bl	800d5a0 <__lshift>
 800c2da:	4605      	mov	r5, r0
 800c2dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d05c      	beq.n	800c39c <_dtoa_r+0xa44>
 800c2e2:	4648      	mov	r0, r9
 800c2e4:	6869      	ldr	r1, [r5, #4]
 800c2e6:	f000 ff0b 	bl	800d100 <_Balloc>
 800c2ea:	4606      	mov	r6, r0
 800c2ec:	b928      	cbnz	r0, 800c2fa <_dtoa_r+0x9a2>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c2f4:	4b80      	ldr	r3, [pc, #512]	@ (800c4f8 <_dtoa_r+0xba0>)
 800c2f6:	f7ff bb43 	b.w	800b980 <_dtoa_r+0x28>
 800c2fa:	692a      	ldr	r2, [r5, #16]
 800c2fc:	f105 010c 	add.w	r1, r5, #12
 800c300:	3202      	adds	r2, #2
 800c302:	0092      	lsls	r2, r2, #2
 800c304:	300c      	adds	r0, #12
 800c306:	f7ff fa87 	bl	800b818 <memcpy>
 800c30a:	2201      	movs	r2, #1
 800c30c:	4631      	mov	r1, r6
 800c30e:	4648      	mov	r0, r9
 800c310:	f001 f946 	bl	800d5a0 <__lshift>
 800c314:	462f      	mov	r7, r5
 800c316:	4605      	mov	r5, r0
 800c318:	f10a 0301 	add.w	r3, sl, #1
 800c31c:	9304      	str	r3, [sp, #16]
 800c31e:	eb0a 030b 	add.w	r3, sl, fp
 800c322:	930a      	str	r3, [sp, #40]	@ 0x28
 800c324:	9b06      	ldr	r3, [sp, #24]
 800c326:	f003 0301 	and.w	r3, r3, #1
 800c32a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c32c:	9b04      	ldr	r3, [sp, #16]
 800c32e:	4621      	mov	r1, r4
 800c330:	9803      	ldr	r0, [sp, #12]
 800c332:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800c336:	f7ff fa87 	bl	800b848 <quorem>
 800c33a:	4603      	mov	r3, r0
 800c33c:	4639      	mov	r1, r7
 800c33e:	3330      	adds	r3, #48	@ 0x30
 800c340:	9006      	str	r0, [sp, #24]
 800c342:	9803      	ldr	r0, [sp, #12]
 800c344:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c346:	f001 f997 	bl	800d678 <__mcmp>
 800c34a:	462a      	mov	r2, r5
 800c34c:	9008      	str	r0, [sp, #32]
 800c34e:	4621      	mov	r1, r4
 800c350:	4648      	mov	r0, r9
 800c352:	f001 f9ad 	bl	800d6b0 <__mdiff>
 800c356:	68c2      	ldr	r2, [r0, #12]
 800c358:	4606      	mov	r6, r0
 800c35a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c35c:	bb02      	cbnz	r2, 800c3a0 <_dtoa_r+0xa48>
 800c35e:	4601      	mov	r1, r0
 800c360:	9803      	ldr	r0, [sp, #12]
 800c362:	f001 f989 	bl	800d678 <__mcmp>
 800c366:	4602      	mov	r2, r0
 800c368:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c36a:	4631      	mov	r1, r6
 800c36c:	4648      	mov	r0, r9
 800c36e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800c372:	f000 ff05 	bl	800d180 <_Bfree>
 800c376:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c378:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c37a:	9e04      	ldr	r6, [sp, #16]
 800c37c:	ea42 0103 	orr.w	r1, r2, r3
 800c380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c382:	4319      	orrs	r1, r3
 800c384:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c386:	d10d      	bne.n	800c3a4 <_dtoa_r+0xa4c>
 800c388:	2b39      	cmp	r3, #57	@ 0x39
 800c38a:	d027      	beq.n	800c3dc <_dtoa_r+0xa84>
 800c38c:	9a08      	ldr	r2, [sp, #32]
 800c38e:	2a00      	cmp	r2, #0
 800c390:	dd01      	ble.n	800c396 <_dtoa_r+0xa3e>
 800c392:	9b06      	ldr	r3, [sp, #24]
 800c394:	3331      	adds	r3, #49	@ 0x31
 800c396:	f88b 3000 	strb.w	r3, [fp]
 800c39a:	e52e      	b.n	800bdfa <_dtoa_r+0x4a2>
 800c39c:	4628      	mov	r0, r5
 800c39e:	e7b9      	b.n	800c314 <_dtoa_r+0x9bc>
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	e7e2      	b.n	800c36a <_dtoa_r+0xa12>
 800c3a4:	9908      	ldr	r1, [sp, #32]
 800c3a6:	2900      	cmp	r1, #0
 800c3a8:	db04      	blt.n	800c3b4 <_dtoa_r+0xa5c>
 800c3aa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800c3ac:	4301      	orrs	r1, r0
 800c3ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3b0:	4301      	orrs	r1, r0
 800c3b2:	d120      	bne.n	800c3f6 <_dtoa_r+0xa9e>
 800c3b4:	2a00      	cmp	r2, #0
 800c3b6:	ddee      	ble.n	800c396 <_dtoa_r+0xa3e>
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	9903      	ldr	r1, [sp, #12]
 800c3bc:	4648      	mov	r0, r9
 800c3be:	9304      	str	r3, [sp, #16]
 800c3c0:	f001 f8ee 	bl	800d5a0 <__lshift>
 800c3c4:	4621      	mov	r1, r4
 800c3c6:	9003      	str	r0, [sp, #12]
 800c3c8:	f001 f956 	bl	800d678 <__mcmp>
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	9b04      	ldr	r3, [sp, #16]
 800c3d0:	dc02      	bgt.n	800c3d8 <_dtoa_r+0xa80>
 800c3d2:	d1e0      	bne.n	800c396 <_dtoa_r+0xa3e>
 800c3d4:	07da      	lsls	r2, r3, #31
 800c3d6:	d5de      	bpl.n	800c396 <_dtoa_r+0xa3e>
 800c3d8:	2b39      	cmp	r3, #57	@ 0x39
 800c3da:	d1da      	bne.n	800c392 <_dtoa_r+0xa3a>
 800c3dc:	2339      	movs	r3, #57	@ 0x39
 800c3de:	f88b 3000 	strb.w	r3, [fp]
 800c3e2:	4633      	mov	r3, r6
 800c3e4:	461e      	mov	r6, r3
 800c3e6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	2a39      	cmp	r2, #57	@ 0x39
 800c3ee:	d04e      	beq.n	800c48e <_dtoa_r+0xb36>
 800c3f0:	3201      	adds	r2, #1
 800c3f2:	701a      	strb	r2, [r3, #0]
 800c3f4:	e501      	b.n	800bdfa <_dtoa_r+0x4a2>
 800c3f6:	2a00      	cmp	r2, #0
 800c3f8:	dd03      	ble.n	800c402 <_dtoa_r+0xaaa>
 800c3fa:	2b39      	cmp	r3, #57	@ 0x39
 800c3fc:	d0ee      	beq.n	800c3dc <_dtoa_r+0xa84>
 800c3fe:	3301      	adds	r3, #1
 800c400:	e7c9      	b.n	800c396 <_dtoa_r+0xa3e>
 800c402:	9a04      	ldr	r2, [sp, #16]
 800c404:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c406:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c40a:	428a      	cmp	r2, r1
 800c40c:	d028      	beq.n	800c460 <_dtoa_r+0xb08>
 800c40e:	2300      	movs	r3, #0
 800c410:	220a      	movs	r2, #10
 800c412:	9903      	ldr	r1, [sp, #12]
 800c414:	4648      	mov	r0, r9
 800c416:	f000 fed5 	bl	800d1c4 <__multadd>
 800c41a:	42af      	cmp	r7, r5
 800c41c:	9003      	str	r0, [sp, #12]
 800c41e:	f04f 0300 	mov.w	r3, #0
 800c422:	f04f 020a 	mov.w	r2, #10
 800c426:	4639      	mov	r1, r7
 800c428:	4648      	mov	r0, r9
 800c42a:	d107      	bne.n	800c43c <_dtoa_r+0xae4>
 800c42c:	f000 feca 	bl	800d1c4 <__multadd>
 800c430:	4607      	mov	r7, r0
 800c432:	4605      	mov	r5, r0
 800c434:	9b04      	ldr	r3, [sp, #16]
 800c436:	3301      	adds	r3, #1
 800c438:	9304      	str	r3, [sp, #16]
 800c43a:	e777      	b.n	800c32c <_dtoa_r+0x9d4>
 800c43c:	f000 fec2 	bl	800d1c4 <__multadd>
 800c440:	4629      	mov	r1, r5
 800c442:	4607      	mov	r7, r0
 800c444:	2300      	movs	r3, #0
 800c446:	220a      	movs	r2, #10
 800c448:	4648      	mov	r0, r9
 800c44a:	f000 febb 	bl	800d1c4 <__multadd>
 800c44e:	4605      	mov	r5, r0
 800c450:	e7f0      	b.n	800c434 <_dtoa_r+0xadc>
 800c452:	f1bb 0f00 	cmp.w	fp, #0
 800c456:	bfcc      	ite	gt
 800c458:	465e      	movgt	r6, fp
 800c45a:	2601      	movle	r6, #1
 800c45c:	2700      	movs	r7, #0
 800c45e:	4456      	add	r6, sl
 800c460:	2201      	movs	r2, #1
 800c462:	9903      	ldr	r1, [sp, #12]
 800c464:	4648      	mov	r0, r9
 800c466:	9304      	str	r3, [sp, #16]
 800c468:	f001 f89a 	bl	800d5a0 <__lshift>
 800c46c:	4621      	mov	r1, r4
 800c46e:	9003      	str	r0, [sp, #12]
 800c470:	f001 f902 	bl	800d678 <__mcmp>
 800c474:	2800      	cmp	r0, #0
 800c476:	dcb4      	bgt.n	800c3e2 <_dtoa_r+0xa8a>
 800c478:	d102      	bne.n	800c480 <_dtoa_r+0xb28>
 800c47a:	9b04      	ldr	r3, [sp, #16]
 800c47c:	07db      	lsls	r3, r3, #31
 800c47e:	d4b0      	bmi.n	800c3e2 <_dtoa_r+0xa8a>
 800c480:	4633      	mov	r3, r6
 800c482:	461e      	mov	r6, r3
 800c484:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c488:	2a30      	cmp	r2, #48	@ 0x30
 800c48a:	d0fa      	beq.n	800c482 <_dtoa_r+0xb2a>
 800c48c:	e4b5      	b.n	800bdfa <_dtoa_r+0x4a2>
 800c48e:	459a      	cmp	sl, r3
 800c490:	d1a8      	bne.n	800c3e4 <_dtoa_r+0xa8c>
 800c492:	2331      	movs	r3, #49	@ 0x31
 800c494:	f108 0801 	add.w	r8, r8, #1
 800c498:	f88a 3000 	strb.w	r3, [sl]
 800c49c:	e4ad      	b.n	800bdfa <_dtoa_r+0x4a2>
 800c49e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c4a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c4fc <_dtoa_r+0xba4>
 800c4a4:	b11b      	cbz	r3, 800c4ae <_dtoa_r+0xb56>
 800c4a6:	f10a 0308 	add.w	r3, sl, #8
 800c4aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c4ac:	6013      	str	r3, [r2, #0]
 800c4ae:	4650      	mov	r0, sl
 800c4b0:	b017      	add	sp, #92	@ 0x5c
 800c4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	f77f ae2e 	ble.w	800c11a <_dtoa_r+0x7c2>
 800c4be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4c2:	2001      	movs	r0, #1
 800c4c4:	e64d      	b.n	800c162 <_dtoa_r+0x80a>
 800c4c6:	f1bb 0f00 	cmp.w	fp, #0
 800c4ca:	f77f aed9 	ble.w	800c280 <_dtoa_r+0x928>
 800c4ce:	4656      	mov	r6, sl
 800c4d0:	4621      	mov	r1, r4
 800c4d2:	9803      	ldr	r0, [sp, #12]
 800c4d4:	f7ff f9b8 	bl	800b848 <quorem>
 800c4d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c4dc:	f806 3b01 	strb.w	r3, [r6], #1
 800c4e0:	eba6 020a 	sub.w	r2, r6, sl
 800c4e4:	4593      	cmp	fp, r2
 800c4e6:	ddb4      	ble.n	800c452 <_dtoa_r+0xafa>
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	220a      	movs	r2, #10
 800c4ec:	4648      	mov	r0, r9
 800c4ee:	9903      	ldr	r1, [sp, #12]
 800c4f0:	f000 fe68 	bl	800d1c4 <__multadd>
 800c4f4:	9003      	str	r0, [sp, #12]
 800c4f6:	e7eb      	b.n	800c4d0 <_dtoa_r+0xb78>
 800c4f8:	0800ed21 	.word	0x0800ed21
 800c4fc:	0800eca5 	.word	0x0800eca5

0800c500 <rshift>:
 800c500:	6903      	ldr	r3, [r0, #16]
 800c502:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c506:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c50a:	f100 0414 	add.w	r4, r0, #20
 800c50e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c512:	dd46      	ble.n	800c5a2 <rshift+0xa2>
 800c514:	f011 011f 	ands.w	r1, r1, #31
 800c518:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c51c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c520:	d10c      	bne.n	800c53c <rshift+0x3c>
 800c522:	4629      	mov	r1, r5
 800c524:	f100 0710 	add.w	r7, r0, #16
 800c528:	42b1      	cmp	r1, r6
 800c52a:	d335      	bcc.n	800c598 <rshift+0x98>
 800c52c:	1a9b      	subs	r3, r3, r2
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	1eea      	subs	r2, r5, #3
 800c532:	4296      	cmp	r6, r2
 800c534:	bf38      	it	cc
 800c536:	2300      	movcc	r3, #0
 800c538:	4423      	add	r3, r4
 800c53a:	e015      	b.n	800c568 <rshift+0x68>
 800c53c:	46a1      	mov	r9, r4
 800c53e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c542:	f1c1 0820 	rsb	r8, r1, #32
 800c546:	40cf      	lsrs	r7, r1
 800c548:	f105 0e04 	add.w	lr, r5, #4
 800c54c:	4576      	cmp	r6, lr
 800c54e:	46f4      	mov	ip, lr
 800c550:	d816      	bhi.n	800c580 <rshift+0x80>
 800c552:	1a9a      	subs	r2, r3, r2
 800c554:	0092      	lsls	r2, r2, #2
 800c556:	3a04      	subs	r2, #4
 800c558:	3501      	adds	r5, #1
 800c55a:	42ae      	cmp	r6, r5
 800c55c:	bf38      	it	cc
 800c55e:	2200      	movcc	r2, #0
 800c560:	18a3      	adds	r3, r4, r2
 800c562:	50a7      	str	r7, [r4, r2]
 800c564:	b107      	cbz	r7, 800c568 <rshift+0x68>
 800c566:	3304      	adds	r3, #4
 800c568:	42a3      	cmp	r3, r4
 800c56a:	eba3 0204 	sub.w	r2, r3, r4
 800c56e:	bf08      	it	eq
 800c570:	2300      	moveq	r3, #0
 800c572:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c576:	6102      	str	r2, [r0, #16]
 800c578:	bf08      	it	eq
 800c57a:	6143      	streq	r3, [r0, #20]
 800c57c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c580:	f8dc c000 	ldr.w	ip, [ip]
 800c584:	fa0c fc08 	lsl.w	ip, ip, r8
 800c588:	ea4c 0707 	orr.w	r7, ip, r7
 800c58c:	f849 7b04 	str.w	r7, [r9], #4
 800c590:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c594:	40cf      	lsrs	r7, r1
 800c596:	e7d9      	b.n	800c54c <rshift+0x4c>
 800c598:	f851 cb04 	ldr.w	ip, [r1], #4
 800c59c:	f847 cf04 	str.w	ip, [r7, #4]!
 800c5a0:	e7c2      	b.n	800c528 <rshift+0x28>
 800c5a2:	4623      	mov	r3, r4
 800c5a4:	e7e0      	b.n	800c568 <rshift+0x68>

0800c5a6 <__hexdig_fun>:
 800c5a6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c5aa:	2b09      	cmp	r3, #9
 800c5ac:	d802      	bhi.n	800c5b4 <__hexdig_fun+0xe>
 800c5ae:	3820      	subs	r0, #32
 800c5b0:	b2c0      	uxtb	r0, r0
 800c5b2:	4770      	bx	lr
 800c5b4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c5b8:	2b05      	cmp	r3, #5
 800c5ba:	d801      	bhi.n	800c5c0 <__hexdig_fun+0x1a>
 800c5bc:	3847      	subs	r0, #71	@ 0x47
 800c5be:	e7f7      	b.n	800c5b0 <__hexdig_fun+0xa>
 800c5c0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c5c4:	2b05      	cmp	r3, #5
 800c5c6:	d801      	bhi.n	800c5cc <__hexdig_fun+0x26>
 800c5c8:	3827      	subs	r0, #39	@ 0x27
 800c5ca:	e7f1      	b.n	800c5b0 <__hexdig_fun+0xa>
 800c5cc:	2000      	movs	r0, #0
 800c5ce:	4770      	bx	lr

0800c5d0 <__gethex>:
 800c5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d4:	468a      	mov	sl, r1
 800c5d6:	4690      	mov	r8, r2
 800c5d8:	b085      	sub	sp, #20
 800c5da:	9302      	str	r3, [sp, #8]
 800c5dc:	680b      	ldr	r3, [r1, #0]
 800c5de:	9001      	str	r0, [sp, #4]
 800c5e0:	1c9c      	adds	r4, r3, #2
 800c5e2:	46a1      	mov	r9, r4
 800c5e4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c5e8:	2830      	cmp	r0, #48	@ 0x30
 800c5ea:	d0fa      	beq.n	800c5e2 <__gethex+0x12>
 800c5ec:	eba9 0303 	sub.w	r3, r9, r3
 800c5f0:	f1a3 0b02 	sub.w	fp, r3, #2
 800c5f4:	f7ff ffd7 	bl	800c5a6 <__hexdig_fun>
 800c5f8:	4605      	mov	r5, r0
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d168      	bne.n	800c6d0 <__gethex+0x100>
 800c5fe:	2201      	movs	r2, #1
 800c600:	4648      	mov	r0, r9
 800c602:	499f      	ldr	r1, [pc, #636]	@ (800c880 <__gethex+0x2b0>)
 800c604:	f7ff f8b6 	bl	800b774 <strncmp>
 800c608:	4607      	mov	r7, r0
 800c60a:	2800      	cmp	r0, #0
 800c60c:	d167      	bne.n	800c6de <__gethex+0x10e>
 800c60e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c612:	4626      	mov	r6, r4
 800c614:	f7ff ffc7 	bl	800c5a6 <__hexdig_fun>
 800c618:	2800      	cmp	r0, #0
 800c61a:	d062      	beq.n	800c6e2 <__gethex+0x112>
 800c61c:	4623      	mov	r3, r4
 800c61e:	7818      	ldrb	r0, [r3, #0]
 800c620:	4699      	mov	r9, r3
 800c622:	2830      	cmp	r0, #48	@ 0x30
 800c624:	f103 0301 	add.w	r3, r3, #1
 800c628:	d0f9      	beq.n	800c61e <__gethex+0x4e>
 800c62a:	f7ff ffbc 	bl	800c5a6 <__hexdig_fun>
 800c62e:	fab0 f580 	clz	r5, r0
 800c632:	f04f 0b01 	mov.w	fp, #1
 800c636:	096d      	lsrs	r5, r5, #5
 800c638:	464a      	mov	r2, r9
 800c63a:	4616      	mov	r6, r2
 800c63c:	7830      	ldrb	r0, [r6, #0]
 800c63e:	3201      	adds	r2, #1
 800c640:	f7ff ffb1 	bl	800c5a6 <__hexdig_fun>
 800c644:	2800      	cmp	r0, #0
 800c646:	d1f8      	bne.n	800c63a <__gethex+0x6a>
 800c648:	2201      	movs	r2, #1
 800c64a:	4630      	mov	r0, r6
 800c64c:	498c      	ldr	r1, [pc, #560]	@ (800c880 <__gethex+0x2b0>)
 800c64e:	f7ff f891 	bl	800b774 <strncmp>
 800c652:	2800      	cmp	r0, #0
 800c654:	d13f      	bne.n	800c6d6 <__gethex+0x106>
 800c656:	b944      	cbnz	r4, 800c66a <__gethex+0x9a>
 800c658:	1c74      	adds	r4, r6, #1
 800c65a:	4622      	mov	r2, r4
 800c65c:	4616      	mov	r6, r2
 800c65e:	7830      	ldrb	r0, [r6, #0]
 800c660:	3201      	adds	r2, #1
 800c662:	f7ff ffa0 	bl	800c5a6 <__hexdig_fun>
 800c666:	2800      	cmp	r0, #0
 800c668:	d1f8      	bne.n	800c65c <__gethex+0x8c>
 800c66a:	1ba4      	subs	r4, r4, r6
 800c66c:	00a7      	lsls	r7, r4, #2
 800c66e:	7833      	ldrb	r3, [r6, #0]
 800c670:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c674:	2b50      	cmp	r3, #80	@ 0x50
 800c676:	d13e      	bne.n	800c6f6 <__gethex+0x126>
 800c678:	7873      	ldrb	r3, [r6, #1]
 800c67a:	2b2b      	cmp	r3, #43	@ 0x2b
 800c67c:	d033      	beq.n	800c6e6 <__gethex+0x116>
 800c67e:	2b2d      	cmp	r3, #45	@ 0x2d
 800c680:	d034      	beq.n	800c6ec <__gethex+0x11c>
 800c682:	2400      	movs	r4, #0
 800c684:	1c71      	adds	r1, r6, #1
 800c686:	7808      	ldrb	r0, [r1, #0]
 800c688:	f7ff ff8d 	bl	800c5a6 <__hexdig_fun>
 800c68c:	1e43      	subs	r3, r0, #1
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	2b18      	cmp	r3, #24
 800c692:	d830      	bhi.n	800c6f6 <__gethex+0x126>
 800c694:	f1a0 0210 	sub.w	r2, r0, #16
 800c698:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c69c:	f7ff ff83 	bl	800c5a6 <__hexdig_fun>
 800c6a0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800c6a4:	fa5f fc8c 	uxtb.w	ip, ip
 800c6a8:	f1bc 0f18 	cmp.w	ip, #24
 800c6ac:	f04f 030a 	mov.w	r3, #10
 800c6b0:	d91e      	bls.n	800c6f0 <__gethex+0x120>
 800c6b2:	b104      	cbz	r4, 800c6b6 <__gethex+0xe6>
 800c6b4:	4252      	negs	r2, r2
 800c6b6:	4417      	add	r7, r2
 800c6b8:	f8ca 1000 	str.w	r1, [sl]
 800c6bc:	b1ed      	cbz	r5, 800c6fa <__gethex+0x12a>
 800c6be:	f1bb 0f00 	cmp.w	fp, #0
 800c6c2:	bf0c      	ite	eq
 800c6c4:	2506      	moveq	r5, #6
 800c6c6:	2500      	movne	r5, #0
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	b005      	add	sp, #20
 800c6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d0:	2500      	movs	r5, #0
 800c6d2:	462c      	mov	r4, r5
 800c6d4:	e7b0      	b.n	800c638 <__gethex+0x68>
 800c6d6:	2c00      	cmp	r4, #0
 800c6d8:	d1c7      	bne.n	800c66a <__gethex+0x9a>
 800c6da:	4627      	mov	r7, r4
 800c6dc:	e7c7      	b.n	800c66e <__gethex+0x9e>
 800c6de:	464e      	mov	r6, r9
 800c6e0:	462f      	mov	r7, r5
 800c6e2:	2501      	movs	r5, #1
 800c6e4:	e7c3      	b.n	800c66e <__gethex+0x9e>
 800c6e6:	2400      	movs	r4, #0
 800c6e8:	1cb1      	adds	r1, r6, #2
 800c6ea:	e7cc      	b.n	800c686 <__gethex+0xb6>
 800c6ec:	2401      	movs	r4, #1
 800c6ee:	e7fb      	b.n	800c6e8 <__gethex+0x118>
 800c6f0:	fb03 0002 	mla	r0, r3, r2, r0
 800c6f4:	e7ce      	b.n	800c694 <__gethex+0xc4>
 800c6f6:	4631      	mov	r1, r6
 800c6f8:	e7de      	b.n	800c6b8 <__gethex+0xe8>
 800c6fa:	4629      	mov	r1, r5
 800c6fc:	eba6 0309 	sub.w	r3, r6, r9
 800c700:	3b01      	subs	r3, #1
 800c702:	2b07      	cmp	r3, #7
 800c704:	dc0a      	bgt.n	800c71c <__gethex+0x14c>
 800c706:	9801      	ldr	r0, [sp, #4]
 800c708:	f000 fcfa 	bl	800d100 <_Balloc>
 800c70c:	4604      	mov	r4, r0
 800c70e:	b940      	cbnz	r0, 800c722 <__gethex+0x152>
 800c710:	4602      	mov	r2, r0
 800c712:	21e4      	movs	r1, #228	@ 0xe4
 800c714:	4b5b      	ldr	r3, [pc, #364]	@ (800c884 <__gethex+0x2b4>)
 800c716:	485c      	ldr	r0, [pc, #368]	@ (800c888 <__gethex+0x2b8>)
 800c718:	f001 fa80 	bl	800dc1c <__assert_func>
 800c71c:	3101      	adds	r1, #1
 800c71e:	105b      	asrs	r3, r3, #1
 800c720:	e7ef      	b.n	800c702 <__gethex+0x132>
 800c722:	2300      	movs	r3, #0
 800c724:	f100 0a14 	add.w	sl, r0, #20
 800c728:	4655      	mov	r5, sl
 800c72a:	469b      	mov	fp, r3
 800c72c:	45b1      	cmp	r9, r6
 800c72e:	d337      	bcc.n	800c7a0 <__gethex+0x1d0>
 800c730:	f845 bb04 	str.w	fp, [r5], #4
 800c734:	eba5 050a 	sub.w	r5, r5, sl
 800c738:	10ad      	asrs	r5, r5, #2
 800c73a:	6125      	str	r5, [r4, #16]
 800c73c:	4658      	mov	r0, fp
 800c73e:	f000 fdd1 	bl	800d2e4 <__hi0bits>
 800c742:	016d      	lsls	r5, r5, #5
 800c744:	f8d8 6000 	ldr.w	r6, [r8]
 800c748:	1a2d      	subs	r5, r5, r0
 800c74a:	42b5      	cmp	r5, r6
 800c74c:	dd54      	ble.n	800c7f8 <__gethex+0x228>
 800c74e:	1bad      	subs	r5, r5, r6
 800c750:	4629      	mov	r1, r5
 800c752:	4620      	mov	r0, r4
 800c754:	f001 f953 	bl	800d9fe <__any_on>
 800c758:	4681      	mov	r9, r0
 800c75a:	b178      	cbz	r0, 800c77c <__gethex+0x1ac>
 800c75c:	f04f 0901 	mov.w	r9, #1
 800c760:	1e6b      	subs	r3, r5, #1
 800c762:	1159      	asrs	r1, r3, #5
 800c764:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c768:	f003 021f 	and.w	r2, r3, #31
 800c76c:	fa09 f202 	lsl.w	r2, r9, r2
 800c770:	420a      	tst	r2, r1
 800c772:	d003      	beq.n	800c77c <__gethex+0x1ac>
 800c774:	454b      	cmp	r3, r9
 800c776:	dc36      	bgt.n	800c7e6 <__gethex+0x216>
 800c778:	f04f 0902 	mov.w	r9, #2
 800c77c:	4629      	mov	r1, r5
 800c77e:	4620      	mov	r0, r4
 800c780:	f7ff febe 	bl	800c500 <rshift>
 800c784:	442f      	add	r7, r5
 800c786:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c78a:	42bb      	cmp	r3, r7
 800c78c:	da42      	bge.n	800c814 <__gethex+0x244>
 800c78e:	4621      	mov	r1, r4
 800c790:	9801      	ldr	r0, [sp, #4]
 800c792:	f000 fcf5 	bl	800d180 <_Bfree>
 800c796:	2300      	movs	r3, #0
 800c798:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c79a:	25a3      	movs	r5, #163	@ 0xa3
 800c79c:	6013      	str	r3, [r2, #0]
 800c79e:	e793      	b.n	800c6c8 <__gethex+0xf8>
 800c7a0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c7a4:	2a2e      	cmp	r2, #46	@ 0x2e
 800c7a6:	d012      	beq.n	800c7ce <__gethex+0x1fe>
 800c7a8:	2b20      	cmp	r3, #32
 800c7aa:	d104      	bne.n	800c7b6 <__gethex+0x1e6>
 800c7ac:	f845 bb04 	str.w	fp, [r5], #4
 800c7b0:	f04f 0b00 	mov.w	fp, #0
 800c7b4:	465b      	mov	r3, fp
 800c7b6:	7830      	ldrb	r0, [r6, #0]
 800c7b8:	9303      	str	r3, [sp, #12]
 800c7ba:	f7ff fef4 	bl	800c5a6 <__hexdig_fun>
 800c7be:	9b03      	ldr	r3, [sp, #12]
 800c7c0:	f000 000f 	and.w	r0, r0, #15
 800c7c4:	4098      	lsls	r0, r3
 800c7c6:	ea4b 0b00 	orr.w	fp, fp, r0
 800c7ca:	3304      	adds	r3, #4
 800c7cc:	e7ae      	b.n	800c72c <__gethex+0x15c>
 800c7ce:	45b1      	cmp	r9, r6
 800c7d0:	d8ea      	bhi.n	800c7a8 <__gethex+0x1d8>
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	4630      	mov	r0, r6
 800c7d6:	492a      	ldr	r1, [pc, #168]	@ (800c880 <__gethex+0x2b0>)
 800c7d8:	9303      	str	r3, [sp, #12]
 800c7da:	f7fe ffcb 	bl	800b774 <strncmp>
 800c7de:	9b03      	ldr	r3, [sp, #12]
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d1e1      	bne.n	800c7a8 <__gethex+0x1d8>
 800c7e4:	e7a2      	b.n	800c72c <__gethex+0x15c>
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	1ea9      	subs	r1, r5, #2
 800c7ea:	f001 f908 	bl	800d9fe <__any_on>
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	d0c2      	beq.n	800c778 <__gethex+0x1a8>
 800c7f2:	f04f 0903 	mov.w	r9, #3
 800c7f6:	e7c1      	b.n	800c77c <__gethex+0x1ac>
 800c7f8:	da09      	bge.n	800c80e <__gethex+0x23e>
 800c7fa:	1b75      	subs	r5, r6, r5
 800c7fc:	4621      	mov	r1, r4
 800c7fe:	462a      	mov	r2, r5
 800c800:	9801      	ldr	r0, [sp, #4]
 800c802:	f000 fecd 	bl	800d5a0 <__lshift>
 800c806:	4604      	mov	r4, r0
 800c808:	1b7f      	subs	r7, r7, r5
 800c80a:	f100 0a14 	add.w	sl, r0, #20
 800c80e:	f04f 0900 	mov.w	r9, #0
 800c812:	e7b8      	b.n	800c786 <__gethex+0x1b6>
 800c814:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c818:	42bd      	cmp	r5, r7
 800c81a:	dd6f      	ble.n	800c8fc <__gethex+0x32c>
 800c81c:	1bed      	subs	r5, r5, r7
 800c81e:	42ae      	cmp	r6, r5
 800c820:	dc34      	bgt.n	800c88c <__gethex+0x2bc>
 800c822:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c826:	2b02      	cmp	r3, #2
 800c828:	d022      	beq.n	800c870 <__gethex+0x2a0>
 800c82a:	2b03      	cmp	r3, #3
 800c82c:	d024      	beq.n	800c878 <__gethex+0x2a8>
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d115      	bne.n	800c85e <__gethex+0x28e>
 800c832:	42ae      	cmp	r6, r5
 800c834:	d113      	bne.n	800c85e <__gethex+0x28e>
 800c836:	2e01      	cmp	r6, #1
 800c838:	d10b      	bne.n	800c852 <__gethex+0x282>
 800c83a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c83e:	9a02      	ldr	r2, [sp, #8]
 800c840:	2562      	movs	r5, #98	@ 0x62
 800c842:	6013      	str	r3, [r2, #0]
 800c844:	2301      	movs	r3, #1
 800c846:	6123      	str	r3, [r4, #16]
 800c848:	f8ca 3000 	str.w	r3, [sl]
 800c84c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c84e:	601c      	str	r4, [r3, #0]
 800c850:	e73a      	b.n	800c6c8 <__gethex+0xf8>
 800c852:	4620      	mov	r0, r4
 800c854:	1e71      	subs	r1, r6, #1
 800c856:	f001 f8d2 	bl	800d9fe <__any_on>
 800c85a:	2800      	cmp	r0, #0
 800c85c:	d1ed      	bne.n	800c83a <__gethex+0x26a>
 800c85e:	4621      	mov	r1, r4
 800c860:	9801      	ldr	r0, [sp, #4]
 800c862:	f000 fc8d 	bl	800d180 <_Bfree>
 800c866:	2300      	movs	r3, #0
 800c868:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c86a:	2550      	movs	r5, #80	@ 0x50
 800c86c:	6013      	str	r3, [r2, #0]
 800c86e:	e72b      	b.n	800c6c8 <__gethex+0xf8>
 800c870:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c872:	2b00      	cmp	r3, #0
 800c874:	d1f3      	bne.n	800c85e <__gethex+0x28e>
 800c876:	e7e0      	b.n	800c83a <__gethex+0x26a>
 800c878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1dd      	bne.n	800c83a <__gethex+0x26a>
 800c87e:	e7ee      	b.n	800c85e <__gethex+0x28e>
 800c880:	0800ec9b 	.word	0x0800ec9b
 800c884:	0800ed21 	.word	0x0800ed21
 800c888:	0800ed32 	.word	0x0800ed32
 800c88c:	1e6f      	subs	r7, r5, #1
 800c88e:	f1b9 0f00 	cmp.w	r9, #0
 800c892:	d130      	bne.n	800c8f6 <__gethex+0x326>
 800c894:	b127      	cbz	r7, 800c8a0 <__gethex+0x2d0>
 800c896:	4639      	mov	r1, r7
 800c898:	4620      	mov	r0, r4
 800c89a:	f001 f8b0 	bl	800d9fe <__any_on>
 800c89e:	4681      	mov	r9, r0
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	1b76      	subs	r6, r6, r5
 800c8a6:	2502      	movs	r5, #2
 800c8a8:	117a      	asrs	r2, r7, #5
 800c8aa:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c8ae:	f007 071f 	and.w	r7, r7, #31
 800c8b2:	40bb      	lsls	r3, r7
 800c8b4:	4213      	tst	r3, r2
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	bf18      	it	ne
 800c8ba:	f049 0902 	orrne.w	r9, r9, #2
 800c8be:	f7ff fe1f 	bl	800c500 <rshift>
 800c8c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c8c6:	f1b9 0f00 	cmp.w	r9, #0
 800c8ca:	d047      	beq.n	800c95c <__gethex+0x38c>
 800c8cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d015      	beq.n	800c900 <__gethex+0x330>
 800c8d4:	2b03      	cmp	r3, #3
 800c8d6:	d017      	beq.n	800c908 <__gethex+0x338>
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d109      	bne.n	800c8f0 <__gethex+0x320>
 800c8dc:	f019 0f02 	tst.w	r9, #2
 800c8e0:	d006      	beq.n	800c8f0 <__gethex+0x320>
 800c8e2:	f8da 3000 	ldr.w	r3, [sl]
 800c8e6:	ea49 0903 	orr.w	r9, r9, r3
 800c8ea:	f019 0f01 	tst.w	r9, #1
 800c8ee:	d10e      	bne.n	800c90e <__gethex+0x33e>
 800c8f0:	f045 0510 	orr.w	r5, r5, #16
 800c8f4:	e032      	b.n	800c95c <__gethex+0x38c>
 800c8f6:	f04f 0901 	mov.w	r9, #1
 800c8fa:	e7d1      	b.n	800c8a0 <__gethex+0x2d0>
 800c8fc:	2501      	movs	r5, #1
 800c8fe:	e7e2      	b.n	800c8c6 <__gethex+0x2f6>
 800c900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c902:	f1c3 0301 	rsb	r3, r3, #1
 800c906:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d0f0      	beq.n	800c8f0 <__gethex+0x320>
 800c90e:	f04f 0c00 	mov.w	ip, #0
 800c912:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c916:	f104 0314 	add.w	r3, r4, #20
 800c91a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c91e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c922:	4618      	mov	r0, r3
 800c924:	f853 2b04 	ldr.w	r2, [r3], #4
 800c928:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c92c:	d01b      	beq.n	800c966 <__gethex+0x396>
 800c92e:	3201      	adds	r2, #1
 800c930:	6002      	str	r2, [r0, #0]
 800c932:	2d02      	cmp	r5, #2
 800c934:	f104 0314 	add.w	r3, r4, #20
 800c938:	d13c      	bne.n	800c9b4 <__gethex+0x3e4>
 800c93a:	f8d8 2000 	ldr.w	r2, [r8]
 800c93e:	3a01      	subs	r2, #1
 800c940:	42b2      	cmp	r2, r6
 800c942:	d109      	bne.n	800c958 <__gethex+0x388>
 800c944:	2201      	movs	r2, #1
 800c946:	1171      	asrs	r1, r6, #5
 800c948:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c94c:	f006 061f 	and.w	r6, r6, #31
 800c950:	fa02 f606 	lsl.w	r6, r2, r6
 800c954:	421e      	tst	r6, r3
 800c956:	d13a      	bne.n	800c9ce <__gethex+0x3fe>
 800c958:	f045 0520 	orr.w	r5, r5, #32
 800c95c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c95e:	601c      	str	r4, [r3, #0]
 800c960:	9b02      	ldr	r3, [sp, #8]
 800c962:	601f      	str	r7, [r3, #0]
 800c964:	e6b0      	b.n	800c6c8 <__gethex+0xf8>
 800c966:	4299      	cmp	r1, r3
 800c968:	f843 cc04 	str.w	ip, [r3, #-4]
 800c96c:	d8d9      	bhi.n	800c922 <__gethex+0x352>
 800c96e:	68a3      	ldr	r3, [r4, #8]
 800c970:	459b      	cmp	fp, r3
 800c972:	db17      	blt.n	800c9a4 <__gethex+0x3d4>
 800c974:	6861      	ldr	r1, [r4, #4]
 800c976:	9801      	ldr	r0, [sp, #4]
 800c978:	3101      	adds	r1, #1
 800c97a:	f000 fbc1 	bl	800d100 <_Balloc>
 800c97e:	4681      	mov	r9, r0
 800c980:	b918      	cbnz	r0, 800c98a <__gethex+0x3ba>
 800c982:	4602      	mov	r2, r0
 800c984:	2184      	movs	r1, #132	@ 0x84
 800c986:	4b19      	ldr	r3, [pc, #100]	@ (800c9ec <__gethex+0x41c>)
 800c988:	e6c5      	b.n	800c716 <__gethex+0x146>
 800c98a:	6922      	ldr	r2, [r4, #16]
 800c98c:	f104 010c 	add.w	r1, r4, #12
 800c990:	3202      	adds	r2, #2
 800c992:	0092      	lsls	r2, r2, #2
 800c994:	300c      	adds	r0, #12
 800c996:	f7fe ff3f 	bl	800b818 <memcpy>
 800c99a:	4621      	mov	r1, r4
 800c99c:	9801      	ldr	r0, [sp, #4]
 800c99e:	f000 fbef 	bl	800d180 <_Bfree>
 800c9a2:	464c      	mov	r4, r9
 800c9a4:	6923      	ldr	r3, [r4, #16]
 800c9a6:	1c5a      	adds	r2, r3, #1
 800c9a8:	6122      	str	r2, [r4, #16]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c9b0:	615a      	str	r2, [r3, #20]
 800c9b2:	e7be      	b.n	800c932 <__gethex+0x362>
 800c9b4:	6922      	ldr	r2, [r4, #16]
 800c9b6:	455a      	cmp	r2, fp
 800c9b8:	dd0b      	ble.n	800c9d2 <__gethex+0x402>
 800c9ba:	2101      	movs	r1, #1
 800c9bc:	4620      	mov	r0, r4
 800c9be:	f7ff fd9f 	bl	800c500 <rshift>
 800c9c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c9c6:	3701      	adds	r7, #1
 800c9c8:	42bb      	cmp	r3, r7
 800c9ca:	f6ff aee0 	blt.w	800c78e <__gethex+0x1be>
 800c9ce:	2501      	movs	r5, #1
 800c9d0:	e7c2      	b.n	800c958 <__gethex+0x388>
 800c9d2:	f016 061f 	ands.w	r6, r6, #31
 800c9d6:	d0fa      	beq.n	800c9ce <__gethex+0x3fe>
 800c9d8:	4453      	add	r3, sl
 800c9da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c9de:	f000 fc81 	bl	800d2e4 <__hi0bits>
 800c9e2:	f1c6 0620 	rsb	r6, r6, #32
 800c9e6:	42b0      	cmp	r0, r6
 800c9e8:	dbe7      	blt.n	800c9ba <__gethex+0x3ea>
 800c9ea:	e7f0      	b.n	800c9ce <__gethex+0x3fe>
 800c9ec:	0800ed21 	.word	0x0800ed21

0800c9f0 <L_shift>:
 800c9f0:	f1c2 0208 	rsb	r2, r2, #8
 800c9f4:	0092      	lsls	r2, r2, #2
 800c9f6:	b570      	push	{r4, r5, r6, lr}
 800c9f8:	f1c2 0620 	rsb	r6, r2, #32
 800c9fc:	6843      	ldr	r3, [r0, #4]
 800c9fe:	6804      	ldr	r4, [r0, #0]
 800ca00:	fa03 f506 	lsl.w	r5, r3, r6
 800ca04:	432c      	orrs	r4, r5
 800ca06:	40d3      	lsrs	r3, r2
 800ca08:	6004      	str	r4, [r0, #0]
 800ca0a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ca0e:	4288      	cmp	r0, r1
 800ca10:	d3f4      	bcc.n	800c9fc <L_shift+0xc>
 800ca12:	bd70      	pop	{r4, r5, r6, pc}

0800ca14 <__match>:
 800ca14:	b530      	push	{r4, r5, lr}
 800ca16:	6803      	ldr	r3, [r0, #0]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca1e:	b914      	cbnz	r4, 800ca26 <__match+0x12>
 800ca20:	6003      	str	r3, [r0, #0]
 800ca22:	2001      	movs	r0, #1
 800ca24:	bd30      	pop	{r4, r5, pc}
 800ca26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca2a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ca2e:	2d19      	cmp	r5, #25
 800ca30:	bf98      	it	ls
 800ca32:	3220      	addls	r2, #32
 800ca34:	42a2      	cmp	r2, r4
 800ca36:	d0f0      	beq.n	800ca1a <__match+0x6>
 800ca38:	2000      	movs	r0, #0
 800ca3a:	e7f3      	b.n	800ca24 <__match+0x10>

0800ca3c <__hexnan>:
 800ca3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca40:	2500      	movs	r5, #0
 800ca42:	680b      	ldr	r3, [r1, #0]
 800ca44:	4682      	mov	sl, r0
 800ca46:	115e      	asrs	r6, r3, #5
 800ca48:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ca4c:	f013 031f 	ands.w	r3, r3, #31
 800ca50:	bf18      	it	ne
 800ca52:	3604      	addne	r6, #4
 800ca54:	1f37      	subs	r7, r6, #4
 800ca56:	4690      	mov	r8, r2
 800ca58:	46b9      	mov	r9, r7
 800ca5a:	463c      	mov	r4, r7
 800ca5c:	46ab      	mov	fp, r5
 800ca5e:	b087      	sub	sp, #28
 800ca60:	6801      	ldr	r1, [r0, #0]
 800ca62:	9301      	str	r3, [sp, #4]
 800ca64:	f846 5c04 	str.w	r5, [r6, #-4]
 800ca68:	9502      	str	r5, [sp, #8]
 800ca6a:	784a      	ldrb	r2, [r1, #1]
 800ca6c:	1c4b      	adds	r3, r1, #1
 800ca6e:	9303      	str	r3, [sp, #12]
 800ca70:	b342      	cbz	r2, 800cac4 <__hexnan+0x88>
 800ca72:	4610      	mov	r0, r2
 800ca74:	9105      	str	r1, [sp, #20]
 800ca76:	9204      	str	r2, [sp, #16]
 800ca78:	f7ff fd95 	bl	800c5a6 <__hexdig_fun>
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	d151      	bne.n	800cb24 <__hexnan+0xe8>
 800ca80:	9a04      	ldr	r2, [sp, #16]
 800ca82:	9905      	ldr	r1, [sp, #20]
 800ca84:	2a20      	cmp	r2, #32
 800ca86:	d818      	bhi.n	800caba <__hexnan+0x7e>
 800ca88:	9b02      	ldr	r3, [sp, #8]
 800ca8a:	459b      	cmp	fp, r3
 800ca8c:	dd13      	ble.n	800cab6 <__hexnan+0x7a>
 800ca8e:	454c      	cmp	r4, r9
 800ca90:	d206      	bcs.n	800caa0 <__hexnan+0x64>
 800ca92:	2d07      	cmp	r5, #7
 800ca94:	dc04      	bgt.n	800caa0 <__hexnan+0x64>
 800ca96:	462a      	mov	r2, r5
 800ca98:	4649      	mov	r1, r9
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f7ff ffa8 	bl	800c9f0 <L_shift>
 800caa0:	4544      	cmp	r4, r8
 800caa2:	d952      	bls.n	800cb4a <__hexnan+0x10e>
 800caa4:	2300      	movs	r3, #0
 800caa6:	f1a4 0904 	sub.w	r9, r4, #4
 800caaa:	f844 3c04 	str.w	r3, [r4, #-4]
 800caae:	461d      	mov	r5, r3
 800cab0:	464c      	mov	r4, r9
 800cab2:	f8cd b008 	str.w	fp, [sp, #8]
 800cab6:	9903      	ldr	r1, [sp, #12]
 800cab8:	e7d7      	b.n	800ca6a <__hexnan+0x2e>
 800caba:	2a29      	cmp	r2, #41	@ 0x29
 800cabc:	d157      	bne.n	800cb6e <__hexnan+0x132>
 800cabe:	3102      	adds	r1, #2
 800cac0:	f8ca 1000 	str.w	r1, [sl]
 800cac4:	f1bb 0f00 	cmp.w	fp, #0
 800cac8:	d051      	beq.n	800cb6e <__hexnan+0x132>
 800caca:	454c      	cmp	r4, r9
 800cacc:	d206      	bcs.n	800cadc <__hexnan+0xa0>
 800cace:	2d07      	cmp	r5, #7
 800cad0:	dc04      	bgt.n	800cadc <__hexnan+0xa0>
 800cad2:	462a      	mov	r2, r5
 800cad4:	4649      	mov	r1, r9
 800cad6:	4620      	mov	r0, r4
 800cad8:	f7ff ff8a 	bl	800c9f0 <L_shift>
 800cadc:	4544      	cmp	r4, r8
 800cade:	d936      	bls.n	800cb4e <__hexnan+0x112>
 800cae0:	4623      	mov	r3, r4
 800cae2:	f1a8 0204 	sub.w	r2, r8, #4
 800cae6:	f853 1b04 	ldr.w	r1, [r3], #4
 800caea:	429f      	cmp	r7, r3
 800caec:	f842 1f04 	str.w	r1, [r2, #4]!
 800caf0:	d2f9      	bcs.n	800cae6 <__hexnan+0xaa>
 800caf2:	1b3b      	subs	r3, r7, r4
 800caf4:	f023 0303 	bic.w	r3, r3, #3
 800caf8:	3304      	adds	r3, #4
 800cafa:	3401      	adds	r4, #1
 800cafc:	3e03      	subs	r6, #3
 800cafe:	42b4      	cmp	r4, r6
 800cb00:	bf88      	it	hi
 800cb02:	2304      	movhi	r3, #4
 800cb04:	2200      	movs	r2, #0
 800cb06:	4443      	add	r3, r8
 800cb08:	f843 2b04 	str.w	r2, [r3], #4
 800cb0c:	429f      	cmp	r7, r3
 800cb0e:	d2fb      	bcs.n	800cb08 <__hexnan+0xcc>
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	b91b      	cbnz	r3, 800cb1c <__hexnan+0xe0>
 800cb14:	4547      	cmp	r7, r8
 800cb16:	d128      	bne.n	800cb6a <__hexnan+0x12e>
 800cb18:	2301      	movs	r3, #1
 800cb1a:	603b      	str	r3, [r7, #0]
 800cb1c:	2005      	movs	r0, #5
 800cb1e:	b007      	add	sp, #28
 800cb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb24:	3501      	adds	r5, #1
 800cb26:	2d08      	cmp	r5, #8
 800cb28:	f10b 0b01 	add.w	fp, fp, #1
 800cb2c:	dd06      	ble.n	800cb3c <__hexnan+0x100>
 800cb2e:	4544      	cmp	r4, r8
 800cb30:	d9c1      	bls.n	800cab6 <__hexnan+0x7a>
 800cb32:	2300      	movs	r3, #0
 800cb34:	2501      	movs	r5, #1
 800cb36:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb3a:	3c04      	subs	r4, #4
 800cb3c:	6822      	ldr	r2, [r4, #0]
 800cb3e:	f000 000f 	and.w	r0, r0, #15
 800cb42:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cb46:	6020      	str	r0, [r4, #0]
 800cb48:	e7b5      	b.n	800cab6 <__hexnan+0x7a>
 800cb4a:	2508      	movs	r5, #8
 800cb4c:	e7b3      	b.n	800cab6 <__hexnan+0x7a>
 800cb4e:	9b01      	ldr	r3, [sp, #4]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d0dd      	beq.n	800cb10 <__hexnan+0xd4>
 800cb54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb58:	f1c3 0320 	rsb	r3, r3, #32
 800cb5c:	40da      	lsrs	r2, r3
 800cb5e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cb62:	4013      	ands	r3, r2
 800cb64:	f846 3c04 	str.w	r3, [r6, #-4]
 800cb68:	e7d2      	b.n	800cb10 <__hexnan+0xd4>
 800cb6a:	3f04      	subs	r7, #4
 800cb6c:	e7d0      	b.n	800cb10 <__hexnan+0xd4>
 800cb6e:	2004      	movs	r0, #4
 800cb70:	e7d5      	b.n	800cb1e <__hexnan+0xe2>

0800cb72 <__ssputs_r>:
 800cb72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb76:	461f      	mov	r7, r3
 800cb78:	688e      	ldr	r6, [r1, #8]
 800cb7a:	4682      	mov	sl, r0
 800cb7c:	42be      	cmp	r6, r7
 800cb7e:	460c      	mov	r4, r1
 800cb80:	4690      	mov	r8, r2
 800cb82:	680b      	ldr	r3, [r1, #0]
 800cb84:	d82d      	bhi.n	800cbe2 <__ssputs_r+0x70>
 800cb86:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb8a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cb8e:	d026      	beq.n	800cbde <__ssputs_r+0x6c>
 800cb90:	6965      	ldr	r5, [r4, #20]
 800cb92:	6909      	ldr	r1, [r1, #16]
 800cb94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb98:	eba3 0901 	sub.w	r9, r3, r1
 800cb9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cba0:	1c7b      	adds	r3, r7, #1
 800cba2:	444b      	add	r3, r9
 800cba4:	106d      	asrs	r5, r5, #1
 800cba6:	429d      	cmp	r5, r3
 800cba8:	bf38      	it	cc
 800cbaa:	461d      	movcc	r5, r3
 800cbac:	0553      	lsls	r3, r2, #21
 800cbae:	d527      	bpl.n	800cc00 <__ssputs_r+0x8e>
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	f000 f95f 	bl	800ce74 <_malloc_r>
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	b360      	cbz	r0, 800cc14 <__ssputs_r+0xa2>
 800cbba:	464a      	mov	r2, r9
 800cbbc:	6921      	ldr	r1, [r4, #16]
 800cbbe:	f7fe fe2b 	bl	800b818 <memcpy>
 800cbc2:	89a3      	ldrh	r3, [r4, #12]
 800cbc4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cbc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbcc:	81a3      	strh	r3, [r4, #12]
 800cbce:	6126      	str	r6, [r4, #16]
 800cbd0:	444e      	add	r6, r9
 800cbd2:	6026      	str	r6, [r4, #0]
 800cbd4:	463e      	mov	r6, r7
 800cbd6:	6165      	str	r5, [r4, #20]
 800cbd8:	eba5 0509 	sub.w	r5, r5, r9
 800cbdc:	60a5      	str	r5, [r4, #8]
 800cbde:	42be      	cmp	r6, r7
 800cbe0:	d900      	bls.n	800cbe4 <__ssputs_r+0x72>
 800cbe2:	463e      	mov	r6, r7
 800cbe4:	4632      	mov	r2, r6
 800cbe6:	4641      	mov	r1, r8
 800cbe8:	6820      	ldr	r0, [r4, #0]
 800cbea:	f000 ffa7 	bl	800db3c <memmove>
 800cbee:	2000      	movs	r0, #0
 800cbf0:	68a3      	ldr	r3, [r4, #8]
 800cbf2:	1b9b      	subs	r3, r3, r6
 800cbf4:	60a3      	str	r3, [r4, #8]
 800cbf6:	6823      	ldr	r3, [r4, #0]
 800cbf8:	4433      	add	r3, r6
 800cbfa:	6023      	str	r3, [r4, #0]
 800cbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc00:	462a      	mov	r2, r5
 800cc02:	f000 ff60 	bl	800dac6 <_realloc_r>
 800cc06:	4606      	mov	r6, r0
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d1e0      	bne.n	800cbce <__ssputs_r+0x5c>
 800cc0c:	4650      	mov	r0, sl
 800cc0e:	6921      	ldr	r1, [r4, #16]
 800cc10:	f001 f836 	bl	800dc80 <_free_r>
 800cc14:	230c      	movs	r3, #12
 800cc16:	f8ca 3000 	str.w	r3, [sl]
 800cc1a:	89a3      	ldrh	r3, [r4, #12]
 800cc1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc24:	81a3      	strh	r3, [r4, #12]
 800cc26:	e7e9      	b.n	800cbfc <__ssputs_r+0x8a>

0800cc28 <_svfiprintf_r>:
 800cc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc2c:	4698      	mov	r8, r3
 800cc2e:	898b      	ldrh	r3, [r1, #12]
 800cc30:	4607      	mov	r7, r0
 800cc32:	061b      	lsls	r3, r3, #24
 800cc34:	460d      	mov	r5, r1
 800cc36:	4614      	mov	r4, r2
 800cc38:	b09d      	sub	sp, #116	@ 0x74
 800cc3a:	d510      	bpl.n	800cc5e <_svfiprintf_r+0x36>
 800cc3c:	690b      	ldr	r3, [r1, #16]
 800cc3e:	b973      	cbnz	r3, 800cc5e <_svfiprintf_r+0x36>
 800cc40:	2140      	movs	r1, #64	@ 0x40
 800cc42:	f000 f917 	bl	800ce74 <_malloc_r>
 800cc46:	6028      	str	r0, [r5, #0]
 800cc48:	6128      	str	r0, [r5, #16]
 800cc4a:	b930      	cbnz	r0, 800cc5a <_svfiprintf_r+0x32>
 800cc4c:	230c      	movs	r3, #12
 800cc4e:	603b      	str	r3, [r7, #0]
 800cc50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc54:	b01d      	add	sp, #116	@ 0x74
 800cc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc5a:	2340      	movs	r3, #64	@ 0x40
 800cc5c:	616b      	str	r3, [r5, #20]
 800cc5e:	2300      	movs	r3, #0
 800cc60:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc62:	2320      	movs	r3, #32
 800cc64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc68:	2330      	movs	r3, #48	@ 0x30
 800cc6a:	f04f 0901 	mov.w	r9, #1
 800cc6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc72:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ce0c <_svfiprintf_r+0x1e4>
 800cc76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc7a:	4623      	mov	r3, r4
 800cc7c:	469a      	mov	sl, r3
 800cc7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc82:	b10a      	cbz	r2, 800cc88 <_svfiprintf_r+0x60>
 800cc84:	2a25      	cmp	r2, #37	@ 0x25
 800cc86:	d1f9      	bne.n	800cc7c <_svfiprintf_r+0x54>
 800cc88:	ebba 0b04 	subs.w	fp, sl, r4
 800cc8c:	d00b      	beq.n	800cca6 <_svfiprintf_r+0x7e>
 800cc8e:	465b      	mov	r3, fp
 800cc90:	4622      	mov	r2, r4
 800cc92:	4629      	mov	r1, r5
 800cc94:	4638      	mov	r0, r7
 800cc96:	f7ff ff6c 	bl	800cb72 <__ssputs_r>
 800cc9a:	3001      	adds	r0, #1
 800cc9c:	f000 80a7 	beq.w	800cdee <_svfiprintf_r+0x1c6>
 800cca0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cca2:	445a      	add	r2, fp
 800cca4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cca6:	f89a 3000 	ldrb.w	r3, [sl]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	f000 809f 	beq.w	800cdee <_svfiprintf_r+0x1c6>
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ccb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccba:	f10a 0a01 	add.w	sl, sl, #1
 800ccbe:	9304      	str	r3, [sp, #16]
 800ccc0:	9307      	str	r3, [sp, #28]
 800ccc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ccc6:	931a      	str	r3, [sp, #104]	@ 0x68
 800ccc8:	4654      	mov	r4, sl
 800ccca:	2205      	movs	r2, #5
 800cccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccd0:	484e      	ldr	r0, [pc, #312]	@ (800ce0c <_svfiprintf_r+0x1e4>)
 800ccd2:	f7fe fd93 	bl	800b7fc <memchr>
 800ccd6:	9a04      	ldr	r2, [sp, #16]
 800ccd8:	b9d8      	cbnz	r0, 800cd12 <_svfiprintf_r+0xea>
 800ccda:	06d0      	lsls	r0, r2, #27
 800ccdc:	bf44      	itt	mi
 800ccde:	2320      	movmi	r3, #32
 800cce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cce4:	0711      	lsls	r1, r2, #28
 800cce6:	bf44      	itt	mi
 800cce8:	232b      	movmi	r3, #43	@ 0x2b
 800ccea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccee:	f89a 3000 	ldrb.w	r3, [sl]
 800ccf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccf4:	d015      	beq.n	800cd22 <_svfiprintf_r+0xfa>
 800ccf6:	4654      	mov	r4, sl
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	f04f 0c0a 	mov.w	ip, #10
 800ccfe:	9a07      	ldr	r2, [sp, #28]
 800cd00:	4621      	mov	r1, r4
 800cd02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd06:	3b30      	subs	r3, #48	@ 0x30
 800cd08:	2b09      	cmp	r3, #9
 800cd0a:	d94b      	bls.n	800cda4 <_svfiprintf_r+0x17c>
 800cd0c:	b1b0      	cbz	r0, 800cd3c <_svfiprintf_r+0x114>
 800cd0e:	9207      	str	r2, [sp, #28]
 800cd10:	e014      	b.n	800cd3c <_svfiprintf_r+0x114>
 800cd12:	eba0 0308 	sub.w	r3, r0, r8
 800cd16:	fa09 f303 	lsl.w	r3, r9, r3
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	46a2      	mov	sl, r4
 800cd1e:	9304      	str	r3, [sp, #16]
 800cd20:	e7d2      	b.n	800ccc8 <_svfiprintf_r+0xa0>
 800cd22:	9b03      	ldr	r3, [sp, #12]
 800cd24:	1d19      	adds	r1, r3, #4
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	9103      	str	r1, [sp, #12]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	bfbb      	ittet	lt
 800cd2e:	425b      	neglt	r3, r3
 800cd30:	f042 0202 	orrlt.w	r2, r2, #2
 800cd34:	9307      	strge	r3, [sp, #28]
 800cd36:	9307      	strlt	r3, [sp, #28]
 800cd38:	bfb8      	it	lt
 800cd3a:	9204      	strlt	r2, [sp, #16]
 800cd3c:	7823      	ldrb	r3, [r4, #0]
 800cd3e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd40:	d10a      	bne.n	800cd58 <_svfiprintf_r+0x130>
 800cd42:	7863      	ldrb	r3, [r4, #1]
 800cd44:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd46:	d132      	bne.n	800cdae <_svfiprintf_r+0x186>
 800cd48:	9b03      	ldr	r3, [sp, #12]
 800cd4a:	3402      	adds	r4, #2
 800cd4c:	1d1a      	adds	r2, r3, #4
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	9203      	str	r2, [sp, #12]
 800cd52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd56:	9305      	str	r3, [sp, #20]
 800cd58:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ce10 <_svfiprintf_r+0x1e8>
 800cd5c:	2203      	movs	r2, #3
 800cd5e:	4650      	mov	r0, sl
 800cd60:	7821      	ldrb	r1, [r4, #0]
 800cd62:	f7fe fd4b 	bl	800b7fc <memchr>
 800cd66:	b138      	cbz	r0, 800cd78 <_svfiprintf_r+0x150>
 800cd68:	2240      	movs	r2, #64	@ 0x40
 800cd6a:	9b04      	ldr	r3, [sp, #16]
 800cd6c:	eba0 000a 	sub.w	r0, r0, sl
 800cd70:	4082      	lsls	r2, r0
 800cd72:	4313      	orrs	r3, r2
 800cd74:	3401      	adds	r4, #1
 800cd76:	9304      	str	r3, [sp, #16]
 800cd78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd7c:	2206      	movs	r2, #6
 800cd7e:	4825      	ldr	r0, [pc, #148]	@ (800ce14 <_svfiprintf_r+0x1ec>)
 800cd80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd84:	f7fe fd3a 	bl	800b7fc <memchr>
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d036      	beq.n	800cdfa <_svfiprintf_r+0x1d2>
 800cd8c:	4b22      	ldr	r3, [pc, #136]	@ (800ce18 <_svfiprintf_r+0x1f0>)
 800cd8e:	bb1b      	cbnz	r3, 800cdd8 <_svfiprintf_r+0x1b0>
 800cd90:	9b03      	ldr	r3, [sp, #12]
 800cd92:	3307      	adds	r3, #7
 800cd94:	f023 0307 	bic.w	r3, r3, #7
 800cd98:	3308      	adds	r3, #8
 800cd9a:	9303      	str	r3, [sp, #12]
 800cd9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd9e:	4433      	add	r3, r6
 800cda0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cda2:	e76a      	b.n	800cc7a <_svfiprintf_r+0x52>
 800cda4:	460c      	mov	r4, r1
 800cda6:	2001      	movs	r0, #1
 800cda8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdac:	e7a8      	b.n	800cd00 <_svfiprintf_r+0xd8>
 800cdae:	2300      	movs	r3, #0
 800cdb0:	f04f 0c0a 	mov.w	ip, #10
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	3401      	adds	r4, #1
 800cdb8:	9305      	str	r3, [sp, #20]
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdc0:	3a30      	subs	r2, #48	@ 0x30
 800cdc2:	2a09      	cmp	r2, #9
 800cdc4:	d903      	bls.n	800cdce <_svfiprintf_r+0x1a6>
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d0c6      	beq.n	800cd58 <_svfiprintf_r+0x130>
 800cdca:	9105      	str	r1, [sp, #20]
 800cdcc:	e7c4      	b.n	800cd58 <_svfiprintf_r+0x130>
 800cdce:	4604      	mov	r4, r0
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdd6:	e7f0      	b.n	800cdba <_svfiprintf_r+0x192>
 800cdd8:	ab03      	add	r3, sp, #12
 800cdda:	9300      	str	r3, [sp, #0]
 800cddc:	462a      	mov	r2, r5
 800cdde:	4638      	mov	r0, r7
 800cde0:	4b0e      	ldr	r3, [pc, #56]	@ (800ce1c <_svfiprintf_r+0x1f4>)
 800cde2:	a904      	add	r1, sp, #16
 800cde4:	f7fc ff56 	bl	8009c94 <_printf_float>
 800cde8:	1c42      	adds	r2, r0, #1
 800cdea:	4606      	mov	r6, r0
 800cdec:	d1d6      	bne.n	800cd9c <_svfiprintf_r+0x174>
 800cdee:	89ab      	ldrh	r3, [r5, #12]
 800cdf0:	065b      	lsls	r3, r3, #25
 800cdf2:	f53f af2d 	bmi.w	800cc50 <_svfiprintf_r+0x28>
 800cdf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cdf8:	e72c      	b.n	800cc54 <_svfiprintf_r+0x2c>
 800cdfa:	ab03      	add	r3, sp, #12
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	462a      	mov	r2, r5
 800ce00:	4638      	mov	r0, r7
 800ce02:	4b06      	ldr	r3, [pc, #24]	@ (800ce1c <_svfiprintf_r+0x1f4>)
 800ce04:	a904      	add	r1, sp, #16
 800ce06:	f7fd f9e3 	bl	800a1d0 <_printf_i>
 800ce0a:	e7ed      	b.n	800cde8 <_svfiprintf_r+0x1c0>
 800ce0c:	0800ed92 	.word	0x0800ed92
 800ce10:	0800ed98 	.word	0x0800ed98
 800ce14:	0800ed9c 	.word	0x0800ed9c
 800ce18:	08009c95 	.word	0x08009c95
 800ce1c:	0800cb73 	.word	0x0800cb73

0800ce20 <malloc>:
 800ce20:	4b02      	ldr	r3, [pc, #8]	@ (800ce2c <malloc+0xc>)
 800ce22:	4601      	mov	r1, r0
 800ce24:	6818      	ldr	r0, [r3, #0]
 800ce26:	f000 b825 	b.w	800ce74 <_malloc_r>
 800ce2a:	bf00      	nop
 800ce2c:	20000184 	.word	0x20000184

0800ce30 <sbrk_aligned>:
 800ce30:	b570      	push	{r4, r5, r6, lr}
 800ce32:	4e0f      	ldr	r6, [pc, #60]	@ (800ce70 <sbrk_aligned+0x40>)
 800ce34:	460c      	mov	r4, r1
 800ce36:	6831      	ldr	r1, [r6, #0]
 800ce38:	4605      	mov	r5, r0
 800ce3a:	b911      	cbnz	r1, 800ce42 <sbrk_aligned+0x12>
 800ce3c:	f000 febc 	bl	800dbb8 <_sbrk_r>
 800ce40:	6030      	str	r0, [r6, #0]
 800ce42:	4621      	mov	r1, r4
 800ce44:	4628      	mov	r0, r5
 800ce46:	f000 feb7 	bl	800dbb8 <_sbrk_r>
 800ce4a:	1c43      	adds	r3, r0, #1
 800ce4c:	d103      	bne.n	800ce56 <sbrk_aligned+0x26>
 800ce4e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ce52:	4620      	mov	r0, r4
 800ce54:	bd70      	pop	{r4, r5, r6, pc}
 800ce56:	1cc4      	adds	r4, r0, #3
 800ce58:	f024 0403 	bic.w	r4, r4, #3
 800ce5c:	42a0      	cmp	r0, r4
 800ce5e:	d0f8      	beq.n	800ce52 <sbrk_aligned+0x22>
 800ce60:	1a21      	subs	r1, r4, r0
 800ce62:	4628      	mov	r0, r5
 800ce64:	f000 fea8 	bl	800dbb8 <_sbrk_r>
 800ce68:	3001      	adds	r0, #1
 800ce6a:	d1f2      	bne.n	800ce52 <sbrk_aligned+0x22>
 800ce6c:	e7ef      	b.n	800ce4e <sbrk_aligned+0x1e>
 800ce6e:	bf00      	nop
 800ce70:	20000b88 	.word	0x20000b88

0800ce74 <_malloc_r>:
 800ce74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce78:	1ccd      	adds	r5, r1, #3
 800ce7a:	f025 0503 	bic.w	r5, r5, #3
 800ce7e:	3508      	adds	r5, #8
 800ce80:	2d0c      	cmp	r5, #12
 800ce82:	bf38      	it	cc
 800ce84:	250c      	movcc	r5, #12
 800ce86:	2d00      	cmp	r5, #0
 800ce88:	4606      	mov	r6, r0
 800ce8a:	db01      	blt.n	800ce90 <_malloc_r+0x1c>
 800ce8c:	42a9      	cmp	r1, r5
 800ce8e:	d904      	bls.n	800ce9a <_malloc_r+0x26>
 800ce90:	230c      	movs	r3, #12
 800ce92:	6033      	str	r3, [r6, #0]
 800ce94:	2000      	movs	r0, #0
 800ce96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf70 <_malloc_r+0xfc>
 800ce9e:	f000 f923 	bl	800d0e8 <__malloc_lock>
 800cea2:	f8d8 3000 	ldr.w	r3, [r8]
 800cea6:	461c      	mov	r4, r3
 800cea8:	bb44      	cbnz	r4, 800cefc <_malloc_r+0x88>
 800ceaa:	4629      	mov	r1, r5
 800ceac:	4630      	mov	r0, r6
 800ceae:	f7ff ffbf 	bl	800ce30 <sbrk_aligned>
 800ceb2:	1c43      	adds	r3, r0, #1
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	d158      	bne.n	800cf6a <_malloc_r+0xf6>
 800ceb8:	f8d8 4000 	ldr.w	r4, [r8]
 800cebc:	4627      	mov	r7, r4
 800cebe:	2f00      	cmp	r7, #0
 800cec0:	d143      	bne.n	800cf4a <_malloc_r+0xd6>
 800cec2:	2c00      	cmp	r4, #0
 800cec4:	d04b      	beq.n	800cf5e <_malloc_r+0xea>
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	4639      	mov	r1, r7
 800ceca:	4630      	mov	r0, r6
 800cecc:	eb04 0903 	add.w	r9, r4, r3
 800ced0:	f000 fe72 	bl	800dbb8 <_sbrk_r>
 800ced4:	4581      	cmp	r9, r0
 800ced6:	d142      	bne.n	800cf5e <_malloc_r+0xea>
 800ced8:	6821      	ldr	r1, [r4, #0]
 800ceda:	4630      	mov	r0, r6
 800cedc:	1a6d      	subs	r5, r5, r1
 800cede:	4629      	mov	r1, r5
 800cee0:	f7ff ffa6 	bl	800ce30 <sbrk_aligned>
 800cee4:	3001      	adds	r0, #1
 800cee6:	d03a      	beq.n	800cf5e <_malloc_r+0xea>
 800cee8:	6823      	ldr	r3, [r4, #0]
 800ceea:	442b      	add	r3, r5
 800ceec:	6023      	str	r3, [r4, #0]
 800ceee:	f8d8 3000 	ldr.w	r3, [r8]
 800cef2:	685a      	ldr	r2, [r3, #4]
 800cef4:	bb62      	cbnz	r2, 800cf50 <_malloc_r+0xdc>
 800cef6:	f8c8 7000 	str.w	r7, [r8]
 800cefa:	e00f      	b.n	800cf1c <_malloc_r+0xa8>
 800cefc:	6822      	ldr	r2, [r4, #0]
 800cefe:	1b52      	subs	r2, r2, r5
 800cf00:	d420      	bmi.n	800cf44 <_malloc_r+0xd0>
 800cf02:	2a0b      	cmp	r2, #11
 800cf04:	d917      	bls.n	800cf36 <_malloc_r+0xc2>
 800cf06:	1961      	adds	r1, r4, r5
 800cf08:	42a3      	cmp	r3, r4
 800cf0a:	6025      	str	r5, [r4, #0]
 800cf0c:	bf18      	it	ne
 800cf0e:	6059      	strne	r1, [r3, #4]
 800cf10:	6863      	ldr	r3, [r4, #4]
 800cf12:	bf08      	it	eq
 800cf14:	f8c8 1000 	streq.w	r1, [r8]
 800cf18:	5162      	str	r2, [r4, r5]
 800cf1a:	604b      	str	r3, [r1, #4]
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	f000 f8e9 	bl	800d0f4 <__malloc_unlock>
 800cf22:	f104 000b 	add.w	r0, r4, #11
 800cf26:	1d23      	adds	r3, r4, #4
 800cf28:	f020 0007 	bic.w	r0, r0, #7
 800cf2c:	1ac2      	subs	r2, r0, r3
 800cf2e:	bf1c      	itt	ne
 800cf30:	1a1b      	subne	r3, r3, r0
 800cf32:	50a3      	strne	r3, [r4, r2]
 800cf34:	e7af      	b.n	800ce96 <_malloc_r+0x22>
 800cf36:	6862      	ldr	r2, [r4, #4]
 800cf38:	42a3      	cmp	r3, r4
 800cf3a:	bf0c      	ite	eq
 800cf3c:	f8c8 2000 	streq.w	r2, [r8]
 800cf40:	605a      	strne	r2, [r3, #4]
 800cf42:	e7eb      	b.n	800cf1c <_malloc_r+0xa8>
 800cf44:	4623      	mov	r3, r4
 800cf46:	6864      	ldr	r4, [r4, #4]
 800cf48:	e7ae      	b.n	800cea8 <_malloc_r+0x34>
 800cf4a:	463c      	mov	r4, r7
 800cf4c:	687f      	ldr	r7, [r7, #4]
 800cf4e:	e7b6      	b.n	800cebe <_malloc_r+0x4a>
 800cf50:	461a      	mov	r2, r3
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	42a3      	cmp	r3, r4
 800cf56:	d1fb      	bne.n	800cf50 <_malloc_r+0xdc>
 800cf58:	2300      	movs	r3, #0
 800cf5a:	6053      	str	r3, [r2, #4]
 800cf5c:	e7de      	b.n	800cf1c <_malloc_r+0xa8>
 800cf5e:	230c      	movs	r3, #12
 800cf60:	4630      	mov	r0, r6
 800cf62:	6033      	str	r3, [r6, #0]
 800cf64:	f000 f8c6 	bl	800d0f4 <__malloc_unlock>
 800cf68:	e794      	b.n	800ce94 <_malloc_r+0x20>
 800cf6a:	6005      	str	r5, [r0, #0]
 800cf6c:	e7d6      	b.n	800cf1c <_malloc_r+0xa8>
 800cf6e:	bf00      	nop
 800cf70:	20000b8c 	.word	0x20000b8c

0800cf74 <__ascii_mbtowc>:
 800cf74:	b082      	sub	sp, #8
 800cf76:	b901      	cbnz	r1, 800cf7a <__ascii_mbtowc+0x6>
 800cf78:	a901      	add	r1, sp, #4
 800cf7a:	b142      	cbz	r2, 800cf8e <__ascii_mbtowc+0x1a>
 800cf7c:	b14b      	cbz	r3, 800cf92 <__ascii_mbtowc+0x1e>
 800cf7e:	7813      	ldrb	r3, [r2, #0]
 800cf80:	600b      	str	r3, [r1, #0]
 800cf82:	7812      	ldrb	r2, [r2, #0]
 800cf84:	1e10      	subs	r0, r2, #0
 800cf86:	bf18      	it	ne
 800cf88:	2001      	movne	r0, #1
 800cf8a:	b002      	add	sp, #8
 800cf8c:	4770      	bx	lr
 800cf8e:	4610      	mov	r0, r2
 800cf90:	e7fb      	b.n	800cf8a <__ascii_mbtowc+0x16>
 800cf92:	f06f 0001 	mvn.w	r0, #1
 800cf96:	e7f8      	b.n	800cf8a <__ascii_mbtowc+0x16>

0800cf98 <__sflush_r>:
 800cf98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9e:	0716      	lsls	r6, r2, #28
 800cfa0:	4605      	mov	r5, r0
 800cfa2:	460c      	mov	r4, r1
 800cfa4:	d454      	bmi.n	800d050 <__sflush_r+0xb8>
 800cfa6:	684b      	ldr	r3, [r1, #4]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	dc02      	bgt.n	800cfb2 <__sflush_r+0x1a>
 800cfac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	dd48      	ble.n	800d044 <__sflush_r+0xac>
 800cfb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfb4:	2e00      	cmp	r6, #0
 800cfb6:	d045      	beq.n	800d044 <__sflush_r+0xac>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cfbe:	682f      	ldr	r7, [r5, #0]
 800cfc0:	6a21      	ldr	r1, [r4, #32]
 800cfc2:	602b      	str	r3, [r5, #0]
 800cfc4:	d030      	beq.n	800d028 <__sflush_r+0x90>
 800cfc6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cfc8:	89a3      	ldrh	r3, [r4, #12]
 800cfca:	0759      	lsls	r1, r3, #29
 800cfcc:	d505      	bpl.n	800cfda <__sflush_r+0x42>
 800cfce:	6863      	ldr	r3, [r4, #4]
 800cfd0:	1ad2      	subs	r2, r2, r3
 800cfd2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cfd4:	b10b      	cbz	r3, 800cfda <__sflush_r+0x42>
 800cfd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cfd8:	1ad2      	subs	r2, r2, r3
 800cfda:	2300      	movs	r3, #0
 800cfdc:	4628      	mov	r0, r5
 800cfde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfe0:	6a21      	ldr	r1, [r4, #32]
 800cfe2:	47b0      	blx	r6
 800cfe4:	1c43      	adds	r3, r0, #1
 800cfe6:	89a3      	ldrh	r3, [r4, #12]
 800cfe8:	d106      	bne.n	800cff8 <__sflush_r+0x60>
 800cfea:	6829      	ldr	r1, [r5, #0]
 800cfec:	291d      	cmp	r1, #29
 800cfee:	d82b      	bhi.n	800d048 <__sflush_r+0xb0>
 800cff0:	4a28      	ldr	r2, [pc, #160]	@ (800d094 <__sflush_r+0xfc>)
 800cff2:	40ca      	lsrs	r2, r1
 800cff4:	07d6      	lsls	r6, r2, #31
 800cff6:	d527      	bpl.n	800d048 <__sflush_r+0xb0>
 800cff8:	2200      	movs	r2, #0
 800cffa:	6062      	str	r2, [r4, #4]
 800cffc:	6922      	ldr	r2, [r4, #16]
 800cffe:	04d9      	lsls	r1, r3, #19
 800d000:	6022      	str	r2, [r4, #0]
 800d002:	d504      	bpl.n	800d00e <__sflush_r+0x76>
 800d004:	1c42      	adds	r2, r0, #1
 800d006:	d101      	bne.n	800d00c <__sflush_r+0x74>
 800d008:	682b      	ldr	r3, [r5, #0]
 800d00a:	b903      	cbnz	r3, 800d00e <__sflush_r+0x76>
 800d00c:	6560      	str	r0, [r4, #84]	@ 0x54
 800d00e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d010:	602f      	str	r7, [r5, #0]
 800d012:	b1b9      	cbz	r1, 800d044 <__sflush_r+0xac>
 800d014:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d018:	4299      	cmp	r1, r3
 800d01a:	d002      	beq.n	800d022 <__sflush_r+0x8a>
 800d01c:	4628      	mov	r0, r5
 800d01e:	f000 fe2f 	bl	800dc80 <_free_r>
 800d022:	2300      	movs	r3, #0
 800d024:	6363      	str	r3, [r4, #52]	@ 0x34
 800d026:	e00d      	b.n	800d044 <__sflush_r+0xac>
 800d028:	2301      	movs	r3, #1
 800d02a:	4628      	mov	r0, r5
 800d02c:	47b0      	blx	r6
 800d02e:	4602      	mov	r2, r0
 800d030:	1c50      	adds	r0, r2, #1
 800d032:	d1c9      	bne.n	800cfc8 <__sflush_r+0x30>
 800d034:	682b      	ldr	r3, [r5, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d0c6      	beq.n	800cfc8 <__sflush_r+0x30>
 800d03a:	2b1d      	cmp	r3, #29
 800d03c:	d001      	beq.n	800d042 <__sflush_r+0xaa>
 800d03e:	2b16      	cmp	r3, #22
 800d040:	d11d      	bne.n	800d07e <__sflush_r+0xe6>
 800d042:	602f      	str	r7, [r5, #0]
 800d044:	2000      	movs	r0, #0
 800d046:	e021      	b.n	800d08c <__sflush_r+0xf4>
 800d048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d04c:	b21b      	sxth	r3, r3
 800d04e:	e01a      	b.n	800d086 <__sflush_r+0xee>
 800d050:	690f      	ldr	r7, [r1, #16]
 800d052:	2f00      	cmp	r7, #0
 800d054:	d0f6      	beq.n	800d044 <__sflush_r+0xac>
 800d056:	0793      	lsls	r3, r2, #30
 800d058:	bf18      	it	ne
 800d05a:	2300      	movne	r3, #0
 800d05c:	680e      	ldr	r6, [r1, #0]
 800d05e:	bf08      	it	eq
 800d060:	694b      	ldreq	r3, [r1, #20]
 800d062:	1bf6      	subs	r6, r6, r7
 800d064:	600f      	str	r7, [r1, #0]
 800d066:	608b      	str	r3, [r1, #8]
 800d068:	2e00      	cmp	r6, #0
 800d06a:	ddeb      	ble.n	800d044 <__sflush_r+0xac>
 800d06c:	4633      	mov	r3, r6
 800d06e:	463a      	mov	r2, r7
 800d070:	4628      	mov	r0, r5
 800d072:	6a21      	ldr	r1, [r4, #32]
 800d074:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d078:	47e0      	blx	ip
 800d07a:	2800      	cmp	r0, #0
 800d07c:	dc07      	bgt.n	800d08e <__sflush_r+0xf6>
 800d07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d086:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d08a:	81a3      	strh	r3, [r4, #12]
 800d08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d08e:	4407      	add	r7, r0
 800d090:	1a36      	subs	r6, r6, r0
 800d092:	e7e9      	b.n	800d068 <__sflush_r+0xd0>
 800d094:	20400001 	.word	0x20400001

0800d098 <_fflush_r>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	690b      	ldr	r3, [r1, #16]
 800d09c:	4605      	mov	r5, r0
 800d09e:	460c      	mov	r4, r1
 800d0a0:	b913      	cbnz	r3, 800d0a8 <_fflush_r+0x10>
 800d0a2:	2500      	movs	r5, #0
 800d0a4:	4628      	mov	r0, r5
 800d0a6:	bd38      	pop	{r3, r4, r5, pc}
 800d0a8:	b118      	cbz	r0, 800d0b2 <_fflush_r+0x1a>
 800d0aa:	6a03      	ldr	r3, [r0, #32]
 800d0ac:	b90b      	cbnz	r3, 800d0b2 <_fflush_r+0x1a>
 800d0ae:	f7fd fc9b 	bl	800a9e8 <__sinit>
 800d0b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d0f3      	beq.n	800d0a2 <_fflush_r+0xa>
 800d0ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d0bc:	07d0      	lsls	r0, r2, #31
 800d0be:	d404      	bmi.n	800d0ca <_fflush_r+0x32>
 800d0c0:	0599      	lsls	r1, r3, #22
 800d0c2:	d402      	bmi.n	800d0ca <_fflush_r+0x32>
 800d0c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0c6:	f7fe fb92 	bl	800b7ee <__retarget_lock_acquire_recursive>
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	4621      	mov	r1, r4
 800d0ce:	f7ff ff63 	bl	800cf98 <__sflush_r>
 800d0d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	07da      	lsls	r2, r3, #31
 800d0d8:	d4e4      	bmi.n	800d0a4 <_fflush_r+0xc>
 800d0da:	89a3      	ldrh	r3, [r4, #12]
 800d0dc:	059b      	lsls	r3, r3, #22
 800d0de:	d4e1      	bmi.n	800d0a4 <_fflush_r+0xc>
 800d0e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0e2:	f7fe fb85 	bl	800b7f0 <__retarget_lock_release_recursive>
 800d0e6:	e7dd      	b.n	800d0a4 <_fflush_r+0xc>

0800d0e8 <__malloc_lock>:
 800d0e8:	4801      	ldr	r0, [pc, #4]	@ (800d0f0 <__malloc_lock+0x8>)
 800d0ea:	f7fe bb80 	b.w	800b7ee <__retarget_lock_acquire_recursive>
 800d0ee:	bf00      	nop
 800d0f0:	20000b84 	.word	0x20000b84

0800d0f4 <__malloc_unlock>:
 800d0f4:	4801      	ldr	r0, [pc, #4]	@ (800d0fc <__malloc_unlock+0x8>)
 800d0f6:	f7fe bb7b 	b.w	800b7f0 <__retarget_lock_release_recursive>
 800d0fa:	bf00      	nop
 800d0fc:	20000b84 	.word	0x20000b84

0800d100 <_Balloc>:
 800d100:	b570      	push	{r4, r5, r6, lr}
 800d102:	69c6      	ldr	r6, [r0, #28]
 800d104:	4604      	mov	r4, r0
 800d106:	460d      	mov	r5, r1
 800d108:	b976      	cbnz	r6, 800d128 <_Balloc+0x28>
 800d10a:	2010      	movs	r0, #16
 800d10c:	f7ff fe88 	bl	800ce20 <malloc>
 800d110:	4602      	mov	r2, r0
 800d112:	61e0      	str	r0, [r4, #28]
 800d114:	b920      	cbnz	r0, 800d120 <_Balloc+0x20>
 800d116:	216b      	movs	r1, #107	@ 0x6b
 800d118:	4b17      	ldr	r3, [pc, #92]	@ (800d178 <_Balloc+0x78>)
 800d11a:	4818      	ldr	r0, [pc, #96]	@ (800d17c <_Balloc+0x7c>)
 800d11c:	f000 fd7e 	bl	800dc1c <__assert_func>
 800d120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d124:	6006      	str	r6, [r0, #0]
 800d126:	60c6      	str	r6, [r0, #12]
 800d128:	69e6      	ldr	r6, [r4, #28]
 800d12a:	68f3      	ldr	r3, [r6, #12]
 800d12c:	b183      	cbz	r3, 800d150 <_Balloc+0x50>
 800d12e:	69e3      	ldr	r3, [r4, #28]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d136:	b9b8      	cbnz	r0, 800d168 <_Balloc+0x68>
 800d138:	2101      	movs	r1, #1
 800d13a:	fa01 f605 	lsl.w	r6, r1, r5
 800d13e:	1d72      	adds	r2, r6, #5
 800d140:	4620      	mov	r0, r4
 800d142:	0092      	lsls	r2, r2, #2
 800d144:	f000 fd88 	bl	800dc58 <_calloc_r>
 800d148:	b160      	cbz	r0, 800d164 <_Balloc+0x64>
 800d14a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d14e:	e00e      	b.n	800d16e <_Balloc+0x6e>
 800d150:	2221      	movs	r2, #33	@ 0x21
 800d152:	2104      	movs	r1, #4
 800d154:	4620      	mov	r0, r4
 800d156:	f000 fd7f 	bl	800dc58 <_calloc_r>
 800d15a:	69e3      	ldr	r3, [r4, #28]
 800d15c:	60f0      	str	r0, [r6, #12]
 800d15e:	68db      	ldr	r3, [r3, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d1e4      	bne.n	800d12e <_Balloc+0x2e>
 800d164:	2000      	movs	r0, #0
 800d166:	bd70      	pop	{r4, r5, r6, pc}
 800d168:	6802      	ldr	r2, [r0, #0]
 800d16a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d16e:	2300      	movs	r3, #0
 800d170:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d174:	e7f7      	b.n	800d166 <_Balloc+0x66>
 800d176:	bf00      	nop
 800d178:	0800ecb2 	.word	0x0800ecb2
 800d17c:	0800eda3 	.word	0x0800eda3

0800d180 <_Bfree>:
 800d180:	b570      	push	{r4, r5, r6, lr}
 800d182:	69c6      	ldr	r6, [r0, #28]
 800d184:	4605      	mov	r5, r0
 800d186:	460c      	mov	r4, r1
 800d188:	b976      	cbnz	r6, 800d1a8 <_Bfree+0x28>
 800d18a:	2010      	movs	r0, #16
 800d18c:	f7ff fe48 	bl	800ce20 <malloc>
 800d190:	4602      	mov	r2, r0
 800d192:	61e8      	str	r0, [r5, #28]
 800d194:	b920      	cbnz	r0, 800d1a0 <_Bfree+0x20>
 800d196:	218f      	movs	r1, #143	@ 0x8f
 800d198:	4b08      	ldr	r3, [pc, #32]	@ (800d1bc <_Bfree+0x3c>)
 800d19a:	4809      	ldr	r0, [pc, #36]	@ (800d1c0 <_Bfree+0x40>)
 800d19c:	f000 fd3e 	bl	800dc1c <__assert_func>
 800d1a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1a4:	6006      	str	r6, [r0, #0]
 800d1a6:	60c6      	str	r6, [r0, #12]
 800d1a8:	b13c      	cbz	r4, 800d1ba <_Bfree+0x3a>
 800d1aa:	69eb      	ldr	r3, [r5, #28]
 800d1ac:	6862      	ldr	r2, [r4, #4]
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1b4:	6021      	str	r1, [r4, #0]
 800d1b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1ba:	bd70      	pop	{r4, r5, r6, pc}
 800d1bc:	0800ecb2 	.word	0x0800ecb2
 800d1c0:	0800eda3 	.word	0x0800eda3

0800d1c4 <__multadd>:
 800d1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1c8:	4607      	mov	r7, r0
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	461e      	mov	r6, r3
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	690d      	ldr	r5, [r1, #16]
 800d1d2:	f101 0c14 	add.w	ip, r1, #20
 800d1d6:	f8dc 3000 	ldr.w	r3, [ip]
 800d1da:	3001      	adds	r0, #1
 800d1dc:	b299      	uxth	r1, r3
 800d1de:	fb02 6101 	mla	r1, r2, r1, r6
 800d1e2:	0c1e      	lsrs	r6, r3, #16
 800d1e4:	0c0b      	lsrs	r3, r1, #16
 800d1e6:	fb02 3306 	mla	r3, r2, r6, r3
 800d1ea:	b289      	uxth	r1, r1
 800d1ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d1f0:	4285      	cmp	r5, r0
 800d1f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d1f6:	f84c 1b04 	str.w	r1, [ip], #4
 800d1fa:	dcec      	bgt.n	800d1d6 <__multadd+0x12>
 800d1fc:	b30e      	cbz	r6, 800d242 <__multadd+0x7e>
 800d1fe:	68a3      	ldr	r3, [r4, #8]
 800d200:	42ab      	cmp	r3, r5
 800d202:	dc19      	bgt.n	800d238 <__multadd+0x74>
 800d204:	6861      	ldr	r1, [r4, #4]
 800d206:	4638      	mov	r0, r7
 800d208:	3101      	adds	r1, #1
 800d20a:	f7ff ff79 	bl	800d100 <_Balloc>
 800d20e:	4680      	mov	r8, r0
 800d210:	b928      	cbnz	r0, 800d21e <__multadd+0x5a>
 800d212:	4602      	mov	r2, r0
 800d214:	21ba      	movs	r1, #186	@ 0xba
 800d216:	4b0c      	ldr	r3, [pc, #48]	@ (800d248 <__multadd+0x84>)
 800d218:	480c      	ldr	r0, [pc, #48]	@ (800d24c <__multadd+0x88>)
 800d21a:	f000 fcff 	bl	800dc1c <__assert_func>
 800d21e:	6922      	ldr	r2, [r4, #16]
 800d220:	f104 010c 	add.w	r1, r4, #12
 800d224:	3202      	adds	r2, #2
 800d226:	0092      	lsls	r2, r2, #2
 800d228:	300c      	adds	r0, #12
 800d22a:	f7fe faf5 	bl	800b818 <memcpy>
 800d22e:	4621      	mov	r1, r4
 800d230:	4638      	mov	r0, r7
 800d232:	f7ff ffa5 	bl	800d180 <_Bfree>
 800d236:	4644      	mov	r4, r8
 800d238:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d23c:	3501      	adds	r5, #1
 800d23e:	615e      	str	r6, [r3, #20]
 800d240:	6125      	str	r5, [r4, #16]
 800d242:	4620      	mov	r0, r4
 800d244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d248:	0800ed21 	.word	0x0800ed21
 800d24c:	0800eda3 	.word	0x0800eda3

0800d250 <__s2b>:
 800d250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d254:	4615      	mov	r5, r2
 800d256:	2209      	movs	r2, #9
 800d258:	461f      	mov	r7, r3
 800d25a:	3308      	adds	r3, #8
 800d25c:	460c      	mov	r4, r1
 800d25e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d262:	4606      	mov	r6, r0
 800d264:	2201      	movs	r2, #1
 800d266:	2100      	movs	r1, #0
 800d268:	429a      	cmp	r2, r3
 800d26a:	db09      	blt.n	800d280 <__s2b+0x30>
 800d26c:	4630      	mov	r0, r6
 800d26e:	f7ff ff47 	bl	800d100 <_Balloc>
 800d272:	b940      	cbnz	r0, 800d286 <__s2b+0x36>
 800d274:	4602      	mov	r2, r0
 800d276:	21d3      	movs	r1, #211	@ 0xd3
 800d278:	4b18      	ldr	r3, [pc, #96]	@ (800d2dc <__s2b+0x8c>)
 800d27a:	4819      	ldr	r0, [pc, #100]	@ (800d2e0 <__s2b+0x90>)
 800d27c:	f000 fcce 	bl	800dc1c <__assert_func>
 800d280:	0052      	lsls	r2, r2, #1
 800d282:	3101      	adds	r1, #1
 800d284:	e7f0      	b.n	800d268 <__s2b+0x18>
 800d286:	9b08      	ldr	r3, [sp, #32]
 800d288:	2d09      	cmp	r5, #9
 800d28a:	6143      	str	r3, [r0, #20]
 800d28c:	f04f 0301 	mov.w	r3, #1
 800d290:	6103      	str	r3, [r0, #16]
 800d292:	dd16      	ble.n	800d2c2 <__s2b+0x72>
 800d294:	f104 0909 	add.w	r9, r4, #9
 800d298:	46c8      	mov	r8, r9
 800d29a:	442c      	add	r4, r5
 800d29c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d2a0:	4601      	mov	r1, r0
 800d2a2:	220a      	movs	r2, #10
 800d2a4:	4630      	mov	r0, r6
 800d2a6:	3b30      	subs	r3, #48	@ 0x30
 800d2a8:	f7ff ff8c 	bl	800d1c4 <__multadd>
 800d2ac:	45a0      	cmp	r8, r4
 800d2ae:	d1f5      	bne.n	800d29c <__s2b+0x4c>
 800d2b0:	f1a5 0408 	sub.w	r4, r5, #8
 800d2b4:	444c      	add	r4, r9
 800d2b6:	1b2d      	subs	r5, r5, r4
 800d2b8:	1963      	adds	r3, r4, r5
 800d2ba:	42bb      	cmp	r3, r7
 800d2bc:	db04      	blt.n	800d2c8 <__s2b+0x78>
 800d2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2c2:	2509      	movs	r5, #9
 800d2c4:	340a      	adds	r4, #10
 800d2c6:	e7f6      	b.n	800d2b6 <__s2b+0x66>
 800d2c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d2cc:	4601      	mov	r1, r0
 800d2ce:	220a      	movs	r2, #10
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	3b30      	subs	r3, #48	@ 0x30
 800d2d4:	f7ff ff76 	bl	800d1c4 <__multadd>
 800d2d8:	e7ee      	b.n	800d2b8 <__s2b+0x68>
 800d2da:	bf00      	nop
 800d2dc:	0800ed21 	.word	0x0800ed21
 800d2e0:	0800eda3 	.word	0x0800eda3

0800d2e4 <__hi0bits>:
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d2ea:	bf3a      	itte	cc
 800d2ec:	0403      	lslcc	r3, r0, #16
 800d2ee:	2010      	movcc	r0, #16
 800d2f0:	2000      	movcs	r0, #0
 800d2f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2f6:	bf3c      	itt	cc
 800d2f8:	021b      	lslcc	r3, r3, #8
 800d2fa:	3008      	addcc	r0, #8
 800d2fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d300:	bf3c      	itt	cc
 800d302:	011b      	lslcc	r3, r3, #4
 800d304:	3004      	addcc	r0, #4
 800d306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d30a:	bf3c      	itt	cc
 800d30c:	009b      	lslcc	r3, r3, #2
 800d30e:	3002      	addcc	r0, #2
 800d310:	2b00      	cmp	r3, #0
 800d312:	db05      	blt.n	800d320 <__hi0bits+0x3c>
 800d314:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d318:	f100 0001 	add.w	r0, r0, #1
 800d31c:	bf08      	it	eq
 800d31e:	2020      	moveq	r0, #32
 800d320:	4770      	bx	lr

0800d322 <__lo0bits>:
 800d322:	6803      	ldr	r3, [r0, #0]
 800d324:	4602      	mov	r2, r0
 800d326:	f013 0007 	ands.w	r0, r3, #7
 800d32a:	d00b      	beq.n	800d344 <__lo0bits+0x22>
 800d32c:	07d9      	lsls	r1, r3, #31
 800d32e:	d421      	bmi.n	800d374 <__lo0bits+0x52>
 800d330:	0798      	lsls	r0, r3, #30
 800d332:	bf49      	itett	mi
 800d334:	085b      	lsrmi	r3, r3, #1
 800d336:	089b      	lsrpl	r3, r3, #2
 800d338:	2001      	movmi	r0, #1
 800d33a:	6013      	strmi	r3, [r2, #0]
 800d33c:	bf5c      	itt	pl
 800d33e:	2002      	movpl	r0, #2
 800d340:	6013      	strpl	r3, [r2, #0]
 800d342:	4770      	bx	lr
 800d344:	b299      	uxth	r1, r3
 800d346:	b909      	cbnz	r1, 800d34c <__lo0bits+0x2a>
 800d348:	2010      	movs	r0, #16
 800d34a:	0c1b      	lsrs	r3, r3, #16
 800d34c:	b2d9      	uxtb	r1, r3
 800d34e:	b909      	cbnz	r1, 800d354 <__lo0bits+0x32>
 800d350:	3008      	adds	r0, #8
 800d352:	0a1b      	lsrs	r3, r3, #8
 800d354:	0719      	lsls	r1, r3, #28
 800d356:	bf04      	itt	eq
 800d358:	091b      	lsreq	r3, r3, #4
 800d35a:	3004      	addeq	r0, #4
 800d35c:	0799      	lsls	r1, r3, #30
 800d35e:	bf04      	itt	eq
 800d360:	089b      	lsreq	r3, r3, #2
 800d362:	3002      	addeq	r0, #2
 800d364:	07d9      	lsls	r1, r3, #31
 800d366:	d403      	bmi.n	800d370 <__lo0bits+0x4e>
 800d368:	085b      	lsrs	r3, r3, #1
 800d36a:	f100 0001 	add.w	r0, r0, #1
 800d36e:	d003      	beq.n	800d378 <__lo0bits+0x56>
 800d370:	6013      	str	r3, [r2, #0]
 800d372:	4770      	bx	lr
 800d374:	2000      	movs	r0, #0
 800d376:	4770      	bx	lr
 800d378:	2020      	movs	r0, #32
 800d37a:	4770      	bx	lr

0800d37c <__i2b>:
 800d37c:	b510      	push	{r4, lr}
 800d37e:	460c      	mov	r4, r1
 800d380:	2101      	movs	r1, #1
 800d382:	f7ff febd 	bl	800d100 <_Balloc>
 800d386:	4602      	mov	r2, r0
 800d388:	b928      	cbnz	r0, 800d396 <__i2b+0x1a>
 800d38a:	f240 1145 	movw	r1, #325	@ 0x145
 800d38e:	4b04      	ldr	r3, [pc, #16]	@ (800d3a0 <__i2b+0x24>)
 800d390:	4804      	ldr	r0, [pc, #16]	@ (800d3a4 <__i2b+0x28>)
 800d392:	f000 fc43 	bl	800dc1c <__assert_func>
 800d396:	2301      	movs	r3, #1
 800d398:	6144      	str	r4, [r0, #20]
 800d39a:	6103      	str	r3, [r0, #16]
 800d39c:	bd10      	pop	{r4, pc}
 800d39e:	bf00      	nop
 800d3a0:	0800ed21 	.word	0x0800ed21
 800d3a4:	0800eda3 	.word	0x0800eda3

0800d3a8 <__multiply>:
 800d3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ac:	4617      	mov	r7, r2
 800d3ae:	690a      	ldr	r2, [r1, #16]
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	4689      	mov	r9, r1
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	bfa2      	ittt	ge
 800d3b8:	463b      	movge	r3, r7
 800d3ba:	460f      	movge	r7, r1
 800d3bc:	4699      	movge	r9, r3
 800d3be:	693d      	ldr	r5, [r7, #16]
 800d3c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	6879      	ldr	r1, [r7, #4]
 800d3c8:	eb05 060a 	add.w	r6, r5, sl
 800d3cc:	42b3      	cmp	r3, r6
 800d3ce:	b085      	sub	sp, #20
 800d3d0:	bfb8      	it	lt
 800d3d2:	3101      	addlt	r1, #1
 800d3d4:	f7ff fe94 	bl	800d100 <_Balloc>
 800d3d8:	b930      	cbnz	r0, 800d3e8 <__multiply+0x40>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d3e0:	4b40      	ldr	r3, [pc, #256]	@ (800d4e4 <__multiply+0x13c>)
 800d3e2:	4841      	ldr	r0, [pc, #260]	@ (800d4e8 <__multiply+0x140>)
 800d3e4:	f000 fc1a 	bl	800dc1c <__assert_func>
 800d3e8:	f100 0414 	add.w	r4, r0, #20
 800d3ec:	4623      	mov	r3, r4
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d3f4:	4573      	cmp	r3, lr
 800d3f6:	d320      	bcc.n	800d43a <__multiply+0x92>
 800d3f8:	f107 0814 	add.w	r8, r7, #20
 800d3fc:	f109 0114 	add.w	r1, r9, #20
 800d400:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d404:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d408:	9302      	str	r3, [sp, #8]
 800d40a:	1beb      	subs	r3, r5, r7
 800d40c:	3b15      	subs	r3, #21
 800d40e:	f023 0303 	bic.w	r3, r3, #3
 800d412:	3304      	adds	r3, #4
 800d414:	3715      	adds	r7, #21
 800d416:	42bd      	cmp	r5, r7
 800d418:	bf38      	it	cc
 800d41a:	2304      	movcc	r3, #4
 800d41c:	9301      	str	r3, [sp, #4]
 800d41e:	9b02      	ldr	r3, [sp, #8]
 800d420:	9103      	str	r1, [sp, #12]
 800d422:	428b      	cmp	r3, r1
 800d424:	d80c      	bhi.n	800d440 <__multiply+0x98>
 800d426:	2e00      	cmp	r6, #0
 800d428:	dd03      	ble.n	800d432 <__multiply+0x8a>
 800d42a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d055      	beq.n	800d4de <__multiply+0x136>
 800d432:	6106      	str	r6, [r0, #16]
 800d434:	b005      	add	sp, #20
 800d436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d43a:	f843 2b04 	str.w	r2, [r3], #4
 800d43e:	e7d9      	b.n	800d3f4 <__multiply+0x4c>
 800d440:	f8b1 a000 	ldrh.w	sl, [r1]
 800d444:	f1ba 0f00 	cmp.w	sl, #0
 800d448:	d01f      	beq.n	800d48a <__multiply+0xe2>
 800d44a:	46c4      	mov	ip, r8
 800d44c:	46a1      	mov	r9, r4
 800d44e:	2700      	movs	r7, #0
 800d450:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d454:	f8d9 3000 	ldr.w	r3, [r9]
 800d458:	fa1f fb82 	uxth.w	fp, r2
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	fb0a 330b 	mla	r3, sl, fp, r3
 800d462:	443b      	add	r3, r7
 800d464:	f8d9 7000 	ldr.w	r7, [r9]
 800d468:	0c12      	lsrs	r2, r2, #16
 800d46a:	0c3f      	lsrs	r7, r7, #16
 800d46c:	fb0a 7202 	mla	r2, sl, r2, r7
 800d470:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d474:	b29b      	uxth	r3, r3
 800d476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d47a:	4565      	cmp	r5, ip
 800d47c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d480:	f849 3b04 	str.w	r3, [r9], #4
 800d484:	d8e4      	bhi.n	800d450 <__multiply+0xa8>
 800d486:	9b01      	ldr	r3, [sp, #4]
 800d488:	50e7      	str	r7, [r4, r3]
 800d48a:	9b03      	ldr	r3, [sp, #12]
 800d48c:	3104      	adds	r1, #4
 800d48e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d492:	f1b9 0f00 	cmp.w	r9, #0
 800d496:	d020      	beq.n	800d4da <__multiply+0x132>
 800d498:	4647      	mov	r7, r8
 800d49a:	46a4      	mov	ip, r4
 800d49c:	f04f 0a00 	mov.w	sl, #0
 800d4a0:	6823      	ldr	r3, [r4, #0]
 800d4a2:	f8b7 b000 	ldrh.w	fp, [r7]
 800d4a6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	fb09 220b 	mla	r2, r9, fp, r2
 800d4b0:	4452      	add	r2, sl
 800d4b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4b6:	f84c 3b04 	str.w	r3, [ip], #4
 800d4ba:	f857 3b04 	ldr.w	r3, [r7], #4
 800d4be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4c2:	f8bc 3000 	ldrh.w	r3, [ip]
 800d4c6:	42bd      	cmp	r5, r7
 800d4c8:	fb09 330a 	mla	r3, r9, sl, r3
 800d4cc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d4d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4d4:	d8e5      	bhi.n	800d4a2 <__multiply+0xfa>
 800d4d6:	9a01      	ldr	r2, [sp, #4]
 800d4d8:	50a3      	str	r3, [r4, r2]
 800d4da:	3404      	adds	r4, #4
 800d4dc:	e79f      	b.n	800d41e <__multiply+0x76>
 800d4de:	3e01      	subs	r6, #1
 800d4e0:	e7a1      	b.n	800d426 <__multiply+0x7e>
 800d4e2:	bf00      	nop
 800d4e4:	0800ed21 	.word	0x0800ed21
 800d4e8:	0800eda3 	.word	0x0800eda3

0800d4ec <__pow5mult>:
 800d4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4f0:	4615      	mov	r5, r2
 800d4f2:	f012 0203 	ands.w	r2, r2, #3
 800d4f6:	4607      	mov	r7, r0
 800d4f8:	460e      	mov	r6, r1
 800d4fa:	d007      	beq.n	800d50c <__pow5mult+0x20>
 800d4fc:	4c25      	ldr	r4, [pc, #148]	@ (800d594 <__pow5mult+0xa8>)
 800d4fe:	3a01      	subs	r2, #1
 800d500:	2300      	movs	r3, #0
 800d502:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d506:	f7ff fe5d 	bl	800d1c4 <__multadd>
 800d50a:	4606      	mov	r6, r0
 800d50c:	10ad      	asrs	r5, r5, #2
 800d50e:	d03d      	beq.n	800d58c <__pow5mult+0xa0>
 800d510:	69fc      	ldr	r4, [r7, #28]
 800d512:	b97c      	cbnz	r4, 800d534 <__pow5mult+0x48>
 800d514:	2010      	movs	r0, #16
 800d516:	f7ff fc83 	bl	800ce20 <malloc>
 800d51a:	4602      	mov	r2, r0
 800d51c:	61f8      	str	r0, [r7, #28]
 800d51e:	b928      	cbnz	r0, 800d52c <__pow5mult+0x40>
 800d520:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d524:	4b1c      	ldr	r3, [pc, #112]	@ (800d598 <__pow5mult+0xac>)
 800d526:	481d      	ldr	r0, [pc, #116]	@ (800d59c <__pow5mult+0xb0>)
 800d528:	f000 fb78 	bl	800dc1c <__assert_func>
 800d52c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d530:	6004      	str	r4, [r0, #0]
 800d532:	60c4      	str	r4, [r0, #12]
 800d534:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d538:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d53c:	b94c      	cbnz	r4, 800d552 <__pow5mult+0x66>
 800d53e:	f240 2171 	movw	r1, #625	@ 0x271
 800d542:	4638      	mov	r0, r7
 800d544:	f7ff ff1a 	bl	800d37c <__i2b>
 800d548:	2300      	movs	r3, #0
 800d54a:	4604      	mov	r4, r0
 800d54c:	f8c8 0008 	str.w	r0, [r8, #8]
 800d550:	6003      	str	r3, [r0, #0]
 800d552:	f04f 0900 	mov.w	r9, #0
 800d556:	07eb      	lsls	r3, r5, #31
 800d558:	d50a      	bpl.n	800d570 <__pow5mult+0x84>
 800d55a:	4631      	mov	r1, r6
 800d55c:	4622      	mov	r2, r4
 800d55e:	4638      	mov	r0, r7
 800d560:	f7ff ff22 	bl	800d3a8 <__multiply>
 800d564:	4680      	mov	r8, r0
 800d566:	4631      	mov	r1, r6
 800d568:	4638      	mov	r0, r7
 800d56a:	f7ff fe09 	bl	800d180 <_Bfree>
 800d56e:	4646      	mov	r6, r8
 800d570:	106d      	asrs	r5, r5, #1
 800d572:	d00b      	beq.n	800d58c <__pow5mult+0xa0>
 800d574:	6820      	ldr	r0, [r4, #0]
 800d576:	b938      	cbnz	r0, 800d588 <__pow5mult+0x9c>
 800d578:	4622      	mov	r2, r4
 800d57a:	4621      	mov	r1, r4
 800d57c:	4638      	mov	r0, r7
 800d57e:	f7ff ff13 	bl	800d3a8 <__multiply>
 800d582:	6020      	str	r0, [r4, #0]
 800d584:	f8c0 9000 	str.w	r9, [r0]
 800d588:	4604      	mov	r4, r0
 800d58a:	e7e4      	b.n	800d556 <__pow5mult+0x6a>
 800d58c:	4630      	mov	r0, r6
 800d58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d592:	bf00      	nop
 800d594:	0800ef8c 	.word	0x0800ef8c
 800d598:	0800ecb2 	.word	0x0800ecb2
 800d59c:	0800eda3 	.word	0x0800eda3

0800d5a0 <__lshift>:
 800d5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a4:	460c      	mov	r4, r1
 800d5a6:	4607      	mov	r7, r0
 800d5a8:	4691      	mov	r9, r2
 800d5aa:	6923      	ldr	r3, [r4, #16]
 800d5ac:	6849      	ldr	r1, [r1, #4]
 800d5ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d5b2:	68a3      	ldr	r3, [r4, #8]
 800d5b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5b8:	f108 0601 	add.w	r6, r8, #1
 800d5bc:	42b3      	cmp	r3, r6
 800d5be:	db0b      	blt.n	800d5d8 <__lshift+0x38>
 800d5c0:	4638      	mov	r0, r7
 800d5c2:	f7ff fd9d 	bl	800d100 <_Balloc>
 800d5c6:	4605      	mov	r5, r0
 800d5c8:	b948      	cbnz	r0, 800d5de <__lshift+0x3e>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d5d0:	4b27      	ldr	r3, [pc, #156]	@ (800d670 <__lshift+0xd0>)
 800d5d2:	4828      	ldr	r0, [pc, #160]	@ (800d674 <__lshift+0xd4>)
 800d5d4:	f000 fb22 	bl	800dc1c <__assert_func>
 800d5d8:	3101      	adds	r1, #1
 800d5da:	005b      	lsls	r3, r3, #1
 800d5dc:	e7ee      	b.n	800d5bc <__lshift+0x1c>
 800d5de:	2300      	movs	r3, #0
 800d5e0:	f100 0114 	add.w	r1, r0, #20
 800d5e4:	f100 0210 	add.w	r2, r0, #16
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	4553      	cmp	r3, sl
 800d5ec:	db33      	blt.n	800d656 <__lshift+0xb6>
 800d5ee:	6920      	ldr	r0, [r4, #16]
 800d5f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5f4:	f104 0314 	add.w	r3, r4, #20
 800d5f8:	f019 091f 	ands.w	r9, r9, #31
 800d5fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d600:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d604:	d02b      	beq.n	800d65e <__lshift+0xbe>
 800d606:	468a      	mov	sl, r1
 800d608:	2200      	movs	r2, #0
 800d60a:	f1c9 0e20 	rsb	lr, r9, #32
 800d60e:	6818      	ldr	r0, [r3, #0]
 800d610:	fa00 f009 	lsl.w	r0, r0, r9
 800d614:	4310      	orrs	r0, r2
 800d616:	f84a 0b04 	str.w	r0, [sl], #4
 800d61a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d61e:	459c      	cmp	ip, r3
 800d620:	fa22 f20e 	lsr.w	r2, r2, lr
 800d624:	d8f3      	bhi.n	800d60e <__lshift+0x6e>
 800d626:	ebac 0304 	sub.w	r3, ip, r4
 800d62a:	3b15      	subs	r3, #21
 800d62c:	f023 0303 	bic.w	r3, r3, #3
 800d630:	3304      	adds	r3, #4
 800d632:	f104 0015 	add.w	r0, r4, #21
 800d636:	4560      	cmp	r0, ip
 800d638:	bf88      	it	hi
 800d63a:	2304      	movhi	r3, #4
 800d63c:	50ca      	str	r2, [r1, r3]
 800d63e:	b10a      	cbz	r2, 800d644 <__lshift+0xa4>
 800d640:	f108 0602 	add.w	r6, r8, #2
 800d644:	3e01      	subs	r6, #1
 800d646:	4638      	mov	r0, r7
 800d648:	4621      	mov	r1, r4
 800d64a:	612e      	str	r6, [r5, #16]
 800d64c:	f7ff fd98 	bl	800d180 <_Bfree>
 800d650:	4628      	mov	r0, r5
 800d652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d656:	f842 0f04 	str.w	r0, [r2, #4]!
 800d65a:	3301      	adds	r3, #1
 800d65c:	e7c5      	b.n	800d5ea <__lshift+0x4a>
 800d65e:	3904      	subs	r1, #4
 800d660:	f853 2b04 	ldr.w	r2, [r3], #4
 800d664:	459c      	cmp	ip, r3
 800d666:	f841 2f04 	str.w	r2, [r1, #4]!
 800d66a:	d8f9      	bhi.n	800d660 <__lshift+0xc0>
 800d66c:	e7ea      	b.n	800d644 <__lshift+0xa4>
 800d66e:	bf00      	nop
 800d670:	0800ed21 	.word	0x0800ed21
 800d674:	0800eda3 	.word	0x0800eda3

0800d678 <__mcmp>:
 800d678:	4603      	mov	r3, r0
 800d67a:	690a      	ldr	r2, [r1, #16]
 800d67c:	6900      	ldr	r0, [r0, #16]
 800d67e:	b530      	push	{r4, r5, lr}
 800d680:	1a80      	subs	r0, r0, r2
 800d682:	d10e      	bne.n	800d6a2 <__mcmp+0x2a>
 800d684:	3314      	adds	r3, #20
 800d686:	3114      	adds	r1, #20
 800d688:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d68c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d690:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d694:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d698:	4295      	cmp	r5, r2
 800d69a:	d003      	beq.n	800d6a4 <__mcmp+0x2c>
 800d69c:	d205      	bcs.n	800d6aa <__mcmp+0x32>
 800d69e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6a2:	bd30      	pop	{r4, r5, pc}
 800d6a4:	42a3      	cmp	r3, r4
 800d6a6:	d3f3      	bcc.n	800d690 <__mcmp+0x18>
 800d6a8:	e7fb      	b.n	800d6a2 <__mcmp+0x2a>
 800d6aa:	2001      	movs	r0, #1
 800d6ac:	e7f9      	b.n	800d6a2 <__mcmp+0x2a>
	...

0800d6b0 <__mdiff>:
 800d6b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b4:	4689      	mov	r9, r1
 800d6b6:	4606      	mov	r6, r0
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	4648      	mov	r0, r9
 800d6bc:	4614      	mov	r4, r2
 800d6be:	f7ff ffdb 	bl	800d678 <__mcmp>
 800d6c2:	1e05      	subs	r5, r0, #0
 800d6c4:	d112      	bne.n	800d6ec <__mdiff+0x3c>
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	4630      	mov	r0, r6
 800d6ca:	f7ff fd19 	bl	800d100 <_Balloc>
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	b928      	cbnz	r0, 800d6de <__mdiff+0x2e>
 800d6d2:	f240 2137 	movw	r1, #567	@ 0x237
 800d6d6:	4b3e      	ldr	r3, [pc, #248]	@ (800d7d0 <__mdiff+0x120>)
 800d6d8:	483e      	ldr	r0, [pc, #248]	@ (800d7d4 <__mdiff+0x124>)
 800d6da:	f000 fa9f 	bl	800dc1c <__assert_func>
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d6e4:	4610      	mov	r0, r2
 800d6e6:	b003      	add	sp, #12
 800d6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ec:	bfbc      	itt	lt
 800d6ee:	464b      	movlt	r3, r9
 800d6f0:	46a1      	movlt	r9, r4
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d6f8:	bfba      	itte	lt
 800d6fa:	461c      	movlt	r4, r3
 800d6fc:	2501      	movlt	r5, #1
 800d6fe:	2500      	movge	r5, #0
 800d700:	f7ff fcfe 	bl	800d100 <_Balloc>
 800d704:	4602      	mov	r2, r0
 800d706:	b918      	cbnz	r0, 800d710 <__mdiff+0x60>
 800d708:	f240 2145 	movw	r1, #581	@ 0x245
 800d70c:	4b30      	ldr	r3, [pc, #192]	@ (800d7d0 <__mdiff+0x120>)
 800d70e:	e7e3      	b.n	800d6d8 <__mdiff+0x28>
 800d710:	f100 0b14 	add.w	fp, r0, #20
 800d714:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d718:	f109 0310 	add.w	r3, r9, #16
 800d71c:	60c5      	str	r5, [r0, #12]
 800d71e:	f04f 0c00 	mov.w	ip, #0
 800d722:	f109 0514 	add.w	r5, r9, #20
 800d726:	46d9      	mov	r9, fp
 800d728:	6926      	ldr	r6, [r4, #16]
 800d72a:	f104 0e14 	add.w	lr, r4, #20
 800d72e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d732:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d736:	9301      	str	r3, [sp, #4]
 800d738:	9b01      	ldr	r3, [sp, #4]
 800d73a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d73e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d742:	b281      	uxth	r1, r0
 800d744:	9301      	str	r3, [sp, #4]
 800d746:	fa1f f38a 	uxth.w	r3, sl
 800d74a:	1a5b      	subs	r3, r3, r1
 800d74c:	0c00      	lsrs	r0, r0, #16
 800d74e:	4463      	add	r3, ip
 800d750:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d754:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d758:	b29b      	uxth	r3, r3
 800d75a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d75e:	4576      	cmp	r6, lr
 800d760:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d764:	f849 3b04 	str.w	r3, [r9], #4
 800d768:	d8e6      	bhi.n	800d738 <__mdiff+0x88>
 800d76a:	1b33      	subs	r3, r6, r4
 800d76c:	3b15      	subs	r3, #21
 800d76e:	f023 0303 	bic.w	r3, r3, #3
 800d772:	3415      	adds	r4, #21
 800d774:	3304      	adds	r3, #4
 800d776:	42a6      	cmp	r6, r4
 800d778:	bf38      	it	cc
 800d77a:	2304      	movcc	r3, #4
 800d77c:	441d      	add	r5, r3
 800d77e:	445b      	add	r3, fp
 800d780:	461e      	mov	r6, r3
 800d782:	462c      	mov	r4, r5
 800d784:	4544      	cmp	r4, r8
 800d786:	d30e      	bcc.n	800d7a6 <__mdiff+0xf6>
 800d788:	f108 0103 	add.w	r1, r8, #3
 800d78c:	1b49      	subs	r1, r1, r5
 800d78e:	f021 0103 	bic.w	r1, r1, #3
 800d792:	3d03      	subs	r5, #3
 800d794:	45a8      	cmp	r8, r5
 800d796:	bf38      	it	cc
 800d798:	2100      	movcc	r1, #0
 800d79a:	440b      	add	r3, r1
 800d79c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d7a0:	b199      	cbz	r1, 800d7ca <__mdiff+0x11a>
 800d7a2:	6117      	str	r7, [r2, #16]
 800d7a4:	e79e      	b.n	800d6e4 <__mdiff+0x34>
 800d7a6:	46e6      	mov	lr, ip
 800d7a8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d7ac:	fa1f fc81 	uxth.w	ip, r1
 800d7b0:	44f4      	add	ip, lr
 800d7b2:	0c08      	lsrs	r0, r1, #16
 800d7b4:	4471      	add	r1, lr
 800d7b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d7ba:	b289      	uxth	r1, r1
 800d7bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d7c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d7c4:	f846 1b04 	str.w	r1, [r6], #4
 800d7c8:	e7dc      	b.n	800d784 <__mdiff+0xd4>
 800d7ca:	3f01      	subs	r7, #1
 800d7cc:	e7e6      	b.n	800d79c <__mdiff+0xec>
 800d7ce:	bf00      	nop
 800d7d0:	0800ed21 	.word	0x0800ed21
 800d7d4:	0800eda3 	.word	0x0800eda3

0800d7d8 <__ulp>:
 800d7d8:	4b0e      	ldr	r3, [pc, #56]	@ (800d814 <__ulp+0x3c>)
 800d7da:	400b      	ands	r3, r1
 800d7dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	dc08      	bgt.n	800d7f6 <__ulp+0x1e>
 800d7e4:	425b      	negs	r3, r3
 800d7e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d7ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d7ee:	da04      	bge.n	800d7fa <__ulp+0x22>
 800d7f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d7f4:	4113      	asrs	r3, r2
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	e008      	b.n	800d80c <__ulp+0x34>
 800d7fa:	f1a2 0314 	sub.w	r3, r2, #20
 800d7fe:	2b1e      	cmp	r3, #30
 800d800:	bfd6      	itet	le
 800d802:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d806:	2201      	movgt	r2, #1
 800d808:	40da      	lsrle	r2, r3
 800d80a:	2300      	movs	r3, #0
 800d80c:	4619      	mov	r1, r3
 800d80e:	4610      	mov	r0, r2
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop
 800d814:	7ff00000 	.word	0x7ff00000

0800d818 <__b2d>:
 800d818:	6902      	ldr	r2, [r0, #16]
 800d81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d81c:	f100 0614 	add.w	r6, r0, #20
 800d820:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d824:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d828:	4f1e      	ldr	r7, [pc, #120]	@ (800d8a4 <__b2d+0x8c>)
 800d82a:	4620      	mov	r0, r4
 800d82c:	f7ff fd5a 	bl	800d2e4 <__hi0bits>
 800d830:	4603      	mov	r3, r0
 800d832:	f1c0 0020 	rsb	r0, r0, #32
 800d836:	2b0a      	cmp	r3, #10
 800d838:	f1a2 0504 	sub.w	r5, r2, #4
 800d83c:	6008      	str	r0, [r1, #0]
 800d83e:	dc12      	bgt.n	800d866 <__b2d+0x4e>
 800d840:	42ae      	cmp	r6, r5
 800d842:	bf2c      	ite	cs
 800d844:	2200      	movcs	r2, #0
 800d846:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d84a:	f1c3 0c0b 	rsb	ip, r3, #11
 800d84e:	3315      	adds	r3, #21
 800d850:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d854:	fa04 f303 	lsl.w	r3, r4, r3
 800d858:	fa22 f20c 	lsr.w	r2, r2, ip
 800d85c:	ea4e 0107 	orr.w	r1, lr, r7
 800d860:	431a      	orrs	r2, r3
 800d862:	4610      	mov	r0, r2
 800d864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d866:	42ae      	cmp	r6, r5
 800d868:	bf36      	itet	cc
 800d86a:	f1a2 0508 	subcc.w	r5, r2, #8
 800d86e:	2200      	movcs	r2, #0
 800d870:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d874:	3b0b      	subs	r3, #11
 800d876:	d012      	beq.n	800d89e <__b2d+0x86>
 800d878:	f1c3 0720 	rsb	r7, r3, #32
 800d87c:	fa22 f107 	lsr.w	r1, r2, r7
 800d880:	409c      	lsls	r4, r3
 800d882:	430c      	orrs	r4, r1
 800d884:	42b5      	cmp	r5, r6
 800d886:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d88a:	bf94      	ite	ls
 800d88c:	2400      	movls	r4, #0
 800d88e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d892:	409a      	lsls	r2, r3
 800d894:	40fc      	lsrs	r4, r7
 800d896:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d89a:	4322      	orrs	r2, r4
 800d89c:	e7e1      	b.n	800d862 <__b2d+0x4a>
 800d89e:	ea44 0107 	orr.w	r1, r4, r7
 800d8a2:	e7de      	b.n	800d862 <__b2d+0x4a>
 800d8a4:	3ff00000 	.word	0x3ff00000

0800d8a8 <__d2b>:
 800d8a8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d8ac:	2101      	movs	r1, #1
 800d8ae:	4690      	mov	r8, r2
 800d8b0:	4699      	mov	r9, r3
 800d8b2:	9e08      	ldr	r6, [sp, #32]
 800d8b4:	f7ff fc24 	bl	800d100 <_Balloc>
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	b930      	cbnz	r0, 800d8ca <__d2b+0x22>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	f240 310f 	movw	r1, #783	@ 0x30f
 800d8c2:	4b23      	ldr	r3, [pc, #140]	@ (800d950 <__d2b+0xa8>)
 800d8c4:	4823      	ldr	r0, [pc, #140]	@ (800d954 <__d2b+0xac>)
 800d8c6:	f000 f9a9 	bl	800dc1c <__assert_func>
 800d8ca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d8ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d8d2:	b10d      	cbz	r5, 800d8d8 <__d2b+0x30>
 800d8d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d8d8:	9301      	str	r3, [sp, #4]
 800d8da:	f1b8 0300 	subs.w	r3, r8, #0
 800d8de:	d024      	beq.n	800d92a <__d2b+0x82>
 800d8e0:	4668      	mov	r0, sp
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	f7ff fd1d 	bl	800d322 <__lo0bits>
 800d8e8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d8ec:	b1d8      	cbz	r0, 800d926 <__d2b+0x7e>
 800d8ee:	f1c0 0320 	rsb	r3, r0, #32
 800d8f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d8f6:	430b      	orrs	r3, r1
 800d8f8:	40c2      	lsrs	r2, r0
 800d8fa:	6163      	str	r3, [r4, #20]
 800d8fc:	9201      	str	r2, [sp, #4]
 800d8fe:	9b01      	ldr	r3, [sp, #4]
 800d900:	2b00      	cmp	r3, #0
 800d902:	bf0c      	ite	eq
 800d904:	2201      	moveq	r2, #1
 800d906:	2202      	movne	r2, #2
 800d908:	61a3      	str	r3, [r4, #24]
 800d90a:	6122      	str	r2, [r4, #16]
 800d90c:	b1ad      	cbz	r5, 800d93a <__d2b+0x92>
 800d90e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d912:	4405      	add	r5, r0
 800d914:	6035      	str	r5, [r6, #0]
 800d916:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d91a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d91c:	6018      	str	r0, [r3, #0]
 800d91e:	4620      	mov	r0, r4
 800d920:	b002      	add	sp, #8
 800d922:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d926:	6161      	str	r1, [r4, #20]
 800d928:	e7e9      	b.n	800d8fe <__d2b+0x56>
 800d92a:	a801      	add	r0, sp, #4
 800d92c:	f7ff fcf9 	bl	800d322 <__lo0bits>
 800d930:	9b01      	ldr	r3, [sp, #4]
 800d932:	2201      	movs	r2, #1
 800d934:	6163      	str	r3, [r4, #20]
 800d936:	3020      	adds	r0, #32
 800d938:	e7e7      	b.n	800d90a <__d2b+0x62>
 800d93a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d93e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d942:	6030      	str	r0, [r6, #0]
 800d944:	6918      	ldr	r0, [r3, #16]
 800d946:	f7ff fccd 	bl	800d2e4 <__hi0bits>
 800d94a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d94e:	e7e4      	b.n	800d91a <__d2b+0x72>
 800d950:	0800ed21 	.word	0x0800ed21
 800d954:	0800eda3 	.word	0x0800eda3

0800d958 <__ratio>:
 800d958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d95c:	b085      	sub	sp, #20
 800d95e:	e9cd 1000 	strd	r1, r0, [sp]
 800d962:	a902      	add	r1, sp, #8
 800d964:	f7ff ff58 	bl	800d818 <__b2d>
 800d968:	468b      	mov	fp, r1
 800d96a:	4606      	mov	r6, r0
 800d96c:	460f      	mov	r7, r1
 800d96e:	9800      	ldr	r0, [sp, #0]
 800d970:	a903      	add	r1, sp, #12
 800d972:	f7ff ff51 	bl	800d818 <__b2d>
 800d976:	460d      	mov	r5, r1
 800d978:	9b01      	ldr	r3, [sp, #4]
 800d97a:	4689      	mov	r9, r1
 800d97c:	6919      	ldr	r1, [r3, #16]
 800d97e:	9b00      	ldr	r3, [sp, #0]
 800d980:	4604      	mov	r4, r0
 800d982:	691b      	ldr	r3, [r3, #16]
 800d984:	4630      	mov	r0, r6
 800d986:	1ac9      	subs	r1, r1, r3
 800d988:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d98c:	1a9b      	subs	r3, r3, r2
 800d98e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d992:	2b00      	cmp	r3, #0
 800d994:	bfcd      	iteet	gt
 800d996:	463a      	movgt	r2, r7
 800d998:	462a      	movle	r2, r5
 800d99a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d99e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d9a2:	bfd8      	it	le
 800d9a4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d9a8:	464b      	mov	r3, r9
 800d9aa:	4622      	mov	r2, r4
 800d9ac:	4659      	mov	r1, fp
 800d9ae:	f7f2 febd 	bl	800072c <__aeabi_ddiv>
 800d9b2:	b005      	add	sp, #20
 800d9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d9b8 <__copybits>:
 800d9b8:	3901      	subs	r1, #1
 800d9ba:	b570      	push	{r4, r5, r6, lr}
 800d9bc:	1149      	asrs	r1, r1, #5
 800d9be:	6914      	ldr	r4, [r2, #16]
 800d9c0:	3101      	adds	r1, #1
 800d9c2:	f102 0314 	add.w	r3, r2, #20
 800d9c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d9ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d9ce:	1f05      	subs	r5, r0, #4
 800d9d0:	42a3      	cmp	r3, r4
 800d9d2:	d30c      	bcc.n	800d9ee <__copybits+0x36>
 800d9d4:	1aa3      	subs	r3, r4, r2
 800d9d6:	3b11      	subs	r3, #17
 800d9d8:	f023 0303 	bic.w	r3, r3, #3
 800d9dc:	3211      	adds	r2, #17
 800d9de:	42a2      	cmp	r2, r4
 800d9e0:	bf88      	it	hi
 800d9e2:	2300      	movhi	r3, #0
 800d9e4:	4418      	add	r0, r3
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	4288      	cmp	r0, r1
 800d9ea:	d305      	bcc.n	800d9f8 <__copybits+0x40>
 800d9ec:	bd70      	pop	{r4, r5, r6, pc}
 800d9ee:	f853 6b04 	ldr.w	r6, [r3], #4
 800d9f2:	f845 6f04 	str.w	r6, [r5, #4]!
 800d9f6:	e7eb      	b.n	800d9d0 <__copybits+0x18>
 800d9f8:	f840 3b04 	str.w	r3, [r0], #4
 800d9fc:	e7f4      	b.n	800d9e8 <__copybits+0x30>

0800d9fe <__any_on>:
 800d9fe:	f100 0214 	add.w	r2, r0, #20
 800da02:	6900      	ldr	r0, [r0, #16]
 800da04:	114b      	asrs	r3, r1, #5
 800da06:	4298      	cmp	r0, r3
 800da08:	b510      	push	{r4, lr}
 800da0a:	db11      	blt.n	800da30 <__any_on+0x32>
 800da0c:	dd0a      	ble.n	800da24 <__any_on+0x26>
 800da0e:	f011 011f 	ands.w	r1, r1, #31
 800da12:	d007      	beq.n	800da24 <__any_on+0x26>
 800da14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800da18:	fa24 f001 	lsr.w	r0, r4, r1
 800da1c:	fa00 f101 	lsl.w	r1, r0, r1
 800da20:	428c      	cmp	r4, r1
 800da22:	d10b      	bne.n	800da3c <__any_on+0x3e>
 800da24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da28:	4293      	cmp	r3, r2
 800da2a:	d803      	bhi.n	800da34 <__any_on+0x36>
 800da2c:	2000      	movs	r0, #0
 800da2e:	bd10      	pop	{r4, pc}
 800da30:	4603      	mov	r3, r0
 800da32:	e7f7      	b.n	800da24 <__any_on+0x26>
 800da34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da38:	2900      	cmp	r1, #0
 800da3a:	d0f5      	beq.n	800da28 <__any_on+0x2a>
 800da3c:	2001      	movs	r0, #1
 800da3e:	e7f6      	b.n	800da2e <__any_on+0x30>

0800da40 <__sread>:
 800da40:	b510      	push	{r4, lr}
 800da42:	460c      	mov	r4, r1
 800da44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da48:	f000 f8a4 	bl	800db94 <_read_r>
 800da4c:	2800      	cmp	r0, #0
 800da4e:	bfab      	itete	ge
 800da50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800da52:	89a3      	ldrhlt	r3, [r4, #12]
 800da54:	181b      	addge	r3, r3, r0
 800da56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800da5a:	bfac      	ite	ge
 800da5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800da5e:	81a3      	strhlt	r3, [r4, #12]
 800da60:	bd10      	pop	{r4, pc}

0800da62 <__swrite>:
 800da62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da66:	461f      	mov	r7, r3
 800da68:	898b      	ldrh	r3, [r1, #12]
 800da6a:	4605      	mov	r5, r0
 800da6c:	05db      	lsls	r3, r3, #23
 800da6e:	460c      	mov	r4, r1
 800da70:	4616      	mov	r6, r2
 800da72:	d505      	bpl.n	800da80 <__swrite+0x1e>
 800da74:	2302      	movs	r3, #2
 800da76:	2200      	movs	r2, #0
 800da78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da7c:	f000 f878 	bl	800db70 <_lseek_r>
 800da80:	89a3      	ldrh	r3, [r4, #12]
 800da82:	4632      	mov	r2, r6
 800da84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800da88:	81a3      	strh	r3, [r4, #12]
 800da8a:	4628      	mov	r0, r5
 800da8c:	463b      	mov	r3, r7
 800da8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da96:	f000 b89f 	b.w	800dbd8 <_write_r>

0800da9a <__sseek>:
 800da9a:	b510      	push	{r4, lr}
 800da9c:	460c      	mov	r4, r1
 800da9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daa2:	f000 f865 	bl	800db70 <_lseek_r>
 800daa6:	1c43      	adds	r3, r0, #1
 800daa8:	89a3      	ldrh	r3, [r4, #12]
 800daaa:	bf15      	itete	ne
 800daac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800daae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dab2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dab6:	81a3      	strheq	r3, [r4, #12]
 800dab8:	bf18      	it	ne
 800daba:	81a3      	strhne	r3, [r4, #12]
 800dabc:	bd10      	pop	{r4, pc}

0800dabe <__sclose>:
 800dabe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dac2:	f000 b89b 	b.w	800dbfc <_close_r>

0800dac6 <_realloc_r>:
 800dac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daca:	4607      	mov	r7, r0
 800dacc:	4614      	mov	r4, r2
 800dace:	460d      	mov	r5, r1
 800dad0:	b921      	cbnz	r1, 800dadc <_realloc_r+0x16>
 800dad2:	4611      	mov	r1, r2
 800dad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dad8:	f7ff b9cc 	b.w	800ce74 <_malloc_r>
 800dadc:	b92a      	cbnz	r2, 800daea <_realloc_r+0x24>
 800dade:	f000 f8cf 	bl	800dc80 <_free_r>
 800dae2:	4625      	mov	r5, r4
 800dae4:	4628      	mov	r0, r5
 800dae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daea:	f000 f911 	bl	800dd10 <_malloc_usable_size_r>
 800daee:	4284      	cmp	r4, r0
 800daf0:	4606      	mov	r6, r0
 800daf2:	d802      	bhi.n	800dafa <_realloc_r+0x34>
 800daf4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800daf8:	d8f4      	bhi.n	800dae4 <_realloc_r+0x1e>
 800dafa:	4621      	mov	r1, r4
 800dafc:	4638      	mov	r0, r7
 800dafe:	f7ff f9b9 	bl	800ce74 <_malloc_r>
 800db02:	4680      	mov	r8, r0
 800db04:	b908      	cbnz	r0, 800db0a <_realloc_r+0x44>
 800db06:	4645      	mov	r5, r8
 800db08:	e7ec      	b.n	800dae4 <_realloc_r+0x1e>
 800db0a:	42b4      	cmp	r4, r6
 800db0c:	4622      	mov	r2, r4
 800db0e:	4629      	mov	r1, r5
 800db10:	bf28      	it	cs
 800db12:	4632      	movcs	r2, r6
 800db14:	f7fd fe80 	bl	800b818 <memcpy>
 800db18:	4629      	mov	r1, r5
 800db1a:	4638      	mov	r0, r7
 800db1c:	f000 f8b0 	bl	800dc80 <_free_r>
 800db20:	e7f1      	b.n	800db06 <_realloc_r+0x40>

0800db22 <__ascii_wctomb>:
 800db22:	4603      	mov	r3, r0
 800db24:	4608      	mov	r0, r1
 800db26:	b141      	cbz	r1, 800db3a <__ascii_wctomb+0x18>
 800db28:	2aff      	cmp	r2, #255	@ 0xff
 800db2a:	d904      	bls.n	800db36 <__ascii_wctomb+0x14>
 800db2c:	228a      	movs	r2, #138	@ 0x8a
 800db2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db32:	601a      	str	r2, [r3, #0]
 800db34:	4770      	bx	lr
 800db36:	2001      	movs	r0, #1
 800db38:	700a      	strb	r2, [r1, #0]
 800db3a:	4770      	bx	lr

0800db3c <memmove>:
 800db3c:	4288      	cmp	r0, r1
 800db3e:	b510      	push	{r4, lr}
 800db40:	eb01 0402 	add.w	r4, r1, r2
 800db44:	d902      	bls.n	800db4c <memmove+0x10>
 800db46:	4284      	cmp	r4, r0
 800db48:	4623      	mov	r3, r4
 800db4a:	d807      	bhi.n	800db5c <memmove+0x20>
 800db4c:	1e43      	subs	r3, r0, #1
 800db4e:	42a1      	cmp	r1, r4
 800db50:	d008      	beq.n	800db64 <memmove+0x28>
 800db52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db5a:	e7f8      	b.n	800db4e <memmove+0x12>
 800db5c:	4601      	mov	r1, r0
 800db5e:	4402      	add	r2, r0
 800db60:	428a      	cmp	r2, r1
 800db62:	d100      	bne.n	800db66 <memmove+0x2a>
 800db64:	bd10      	pop	{r4, pc}
 800db66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db6e:	e7f7      	b.n	800db60 <memmove+0x24>

0800db70 <_lseek_r>:
 800db70:	b538      	push	{r3, r4, r5, lr}
 800db72:	4604      	mov	r4, r0
 800db74:	4608      	mov	r0, r1
 800db76:	4611      	mov	r1, r2
 800db78:	2200      	movs	r2, #0
 800db7a:	4d05      	ldr	r5, [pc, #20]	@ (800db90 <_lseek_r+0x20>)
 800db7c:	602a      	str	r2, [r5, #0]
 800db7e:	461a      	mov	r2, r3
 800db80:	f7f5 ffd3 	bl	8003b2a <_lseek>
 800db84:	1c43      	adds	r3, r0, #1
 800db86:	d102      	bne.n	800db8e <_lseek_r+0x1e>
 800db88:	682b      	ldr	r3, [r5, #0]
 800db8a:	b103      	cbz	r3, 800db8e <_lseek_r+0x1e>
 800db8c:	6023      	str	r3, [r4, #0]
 800db8e:	bd38      	pop	{r3, r4, r5, pc}
 800db90:	20000b90 	.word	0x20000b90

0800db94 <_read_r>:
 800db94:	b538      	push	{r3, r4, r5, lr}
 800db96:	4604      	mov	r4, r0
 800db98:	4608      	mov	r0, r1
 800db9a:	4611      	mov	r1, r2
 800db9c:	2200      	movs	r2, #0
 800db9e:	4d05      	ldr	r5, [pc, #20]	@ (800dbb4 <_read_r+0x20>)
 800dba0:	602a      	str	r2, [r5, #0]
 800dba2:	461a      	mov	r2, r3
 800dba4:	f7f5 ff64 	bl	8003a70 <_read>
 800dba8:	1c43      	adds	r3, r0, #1
 800dbaa:	d102      	bne.n	800dbb2 <_read_r+0x1e>
 800dbac:	682b      	ldr	r3, [r5, #0]
 800dbae:	b103      	cbz	r3, 800dbb2 <_read_r+0x1e>
 800dbb0:	6023      	str	r3, [r4, #0]
 800dbb2:	bd38      	pop	{r3, r4, r5, pc}
 800dbb4:	20000b90 	.word	0x20000b90

0800dbb8 <_sbrk_r>:
 800dbb8:	b538      	push	{r3, r4, r5, lr}
 800dbba:	2300      	movs	r3, #0
 800dbbc:	4d05      	ldr	r5, [pc, #20]	@ (800dbd4 <_sbrk_r+0x1c>)
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	4608      	mov	r0, r1
 800dbc2:	602b      	str	r3, [r5, #0]
 800dbc4:	f7f5 ffbe 	bl	8003b44 <_sbrk>
 800dbc8:	1c43      	adds	r3, r0, #1
 800dbca:	d102      	bne.n	800dbd2 <_sbrk_r+0x1a>
 800dbcc:	682b      	ldr	r3, [r5, #0]
 800dbce:	b103      	cbz	r3, 800dbd2 <_sbrk_r+0x1a>
 800dbd0:	6023      	str	r3, [r4, #0]
 800dbd2:	bd38      	pop	{r3, r4, r5, pc}
 800dbd4:	20000b90 	.word	0x20000b90

0800dbd8 <_write_r>:
 800dbd8:	b538      	push	{r3, r4, r5, lr}
 800dbda:	4604      	mov	r4, r0
 800dbdc:	4608      	mov	r0, r1
 800dbde:	4611      	mov	r1, r2
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	4d05      	ldr	r5, [pc, #20]	@ (800dbf8 <_write_r+0x20>)
 800dbe4:	602a      	str	r2, [r5, #0]
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	f7f5 ff5f 	bl	8003aaa <_write>
 800dbec:	1c43      	adds	r3, r0, #1
 800dbee:	d102      	bne.n	800dbf6 <_write_r+0x1e>
 800dbf0:	682b      	ldr	r3, [r5, #0]
 800dbf2:	b103      	cbz	r3, 800dbf6 <_write_r+0x1e>
 800dbf4:	6023      	str	r3, [r4, #0]
 800dbf6:	bd38      	pop	{r3, r4, r5, pc}
 800dbf8:	20000b90 	.word	0x20000b90

0800dbfc <_close_r>:
 800dbfc:	b538      	push	{r3, r4, r5, lr}
 800dbfe:	2300      	movs	r3, #0
 800dc00:	4d05      	ldr	r5, [pc, #20]	@ (800dc18 <_close_r+0x1c>)
 800dc02:	4604      	mov	r4, r0
 800dc04:	4608      	mov	r0, r1
 800dc06:	602b      	str	r3, [r5, #0]
 800dc08:	f7f5 ff6b 	bl	8003ae2 <_close>
 800dc0c:	1c43      	adds	r3, r0, #1
 800dc0e:	d102      	bne.n	800dc16 <_close_r+0x1a>
 800dc10:	682b      	ldr	r3, [r5, #0]
 800dc12:	b103      	cbz	r3, 800dc16 <_close_r+0x1a>
 800dc14:	6023      	str	r3, [r4, #0]
 800dc16:	bd38      	pop	{r3, r4, r5, pc}
 800dc18:	20000b90 	.word	0x20000b90

0800dc1c <__assert_func>:
 800dc1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc1e:	4614      	mov	r4, r2
 800dc20:	461a      	mov	r2, r3
 800dc22:	4b09      	ldr	r3, [pc, #36]	@ (800dc48 <__assert_func+0x2c>)
 800dc24:	4605      	mov	r5, r0
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	68d8      	ldr	r0, [r3, #12]
 800dc2a:	b14c      	cbz	r4, 800dc40 <__assert_func+0x24>
 800dc2c:	4b07      	ldr	r3, [pc, #28]	@ (800dc4c <__assert_func+0x30>)
 800dc2e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc32:	9100      	str	r1, [sp, #0]
 800dc34:	462b      	mov	r3, r5
 800dc36:	4906      	ldr	r1, [pc, #24]	@ (800dc50 <__assert_func+0x34>)
 800dc38:	f000 f872 	bl	800dd20 <fiprintf>
 800dc3c:	f000 f882 	bl	800dd44 <abort>
 800dc40:	4b04      	ldr	r3, [pc, #16]	@ (800dc54 <__assert_func+0x38>)
 800dc42:	461c      	mov	r4, r3
 800dc44:	e7f3      	b.n	800dc2e <__assert_func+0x12>
 800dc46:	bf00      	nop
 800dc48:	20000184 	.word	0x20000184
 800dc4c:	0800edfc 	.word	0x0800edfc
 800dc50:	0800ee09 	.word	0x0800ee09
 800dc54:	0800ee37 	.word	0x0800ee37

0800dc58 <_calloc_r>:
 800dc58:	b570      	push	{r4, r5, r6, lr}
 800dc5a:	fba1 5402 	umull	r5, r4, r1, r2
 800dc5e:	b934      	cbnz	r4, 800dc6e <_calloc_r+0x16>
 800dc60:	4629      	mov	r1, r5
 800dc62:	f7ff f907 	bl	800ce74 <_malloc_r>
 800dc66:	4606      	mov	r6, r0
 800dc68:	b928      	cbnz	r0, 800dc76 <_calloc_r+0x1e>
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	bd70      	pop	{r4, r5, r6, pc}
 800dc6e:	220c      	movs	r2, #12
 800dc70:	2600      	movs	r6, #0
 800dc72:	6002      	str	r2, [r0, #0]
 800dc74:	e7f9      	b.n	800dc6a <_calloc_r+0x12>
 800dc76:	462a      	mov	r2, r5
 800dc78:	4621      	mov	r1, r4
 800dc7a:	f7fd fd73 	bl	800b764 <memset>
 800dc7e:	e7f4      	b.n	800dc6a <_calloc_r+0x12>

0800dc80 <_free_r>:
 800dc80:	b538      	push	{r3, r4, r5, lr}
 800dc82:	4605      	mov	r5, r0
 800dc84:	2900      	cmp	r1, #0
 800dc86:	d040      	beq.n	800dd0a <_free_r+0x8a>
 800dc88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc8c:	1f0c      	subs	r4, r1, #4
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	bfb8      	it	lt
 800dc92:	18e4      	addlt	r4, r4, r3
 800dc94:	f7ff fa28 	bl	800d0e8 <__malloc_lock>
 800dc98:	4a1c      	ldr	r2, [pc, #112]	@ (800dd0c <_free_r+0x8c>)
 800dc9a:	6813      	ldr	r3, [r2, #0]
 800dc9c:	b933      	cbnz	r3, 800dcac <_free_r+0x2c>
 800dc9e:	6063      	str	r3, [r4, #4]
 800dca0:	6014      	str	r4, [r2, #0]
 800dca2:	4628      	mov	r0, r5
 800dca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dca8:	f7ff ba24 	b.w	800d0f4 <__malloc_unlock>
 800dcac:	42a3      	cmp	r3, r4
 800dcae:	d908      	bls.n	800dcc2 <_free_r+0x42>
 800dcb0:	6820      	ldr	r0, [r4, #0]
 800dcb2:	1821      	adds	r1, r4, r0
 800dcb4:	428b      	cmp	r3, r1
 800dcb6:	bf01      	itttt	eq
 800dcb8:	6819      	ldreq	r1, [r3, #0]
 800dcba:	685b      	ldreq	r3, [r3, #4]
 800dcbc:	1809      	addeq	r1, r1, r0
 800dcbe:	6021      	streq	r1, [r4, #0]
 800dcc0:	e7ed      	b.n	800dc9e <_free_r+0x1e>
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	b10b      	cbz	r3, 800dccc <_free_r+0x4c>
 800dcc8:	42a3      	cmp	r3, r4
 800dcca:	d9fa      	bls.n	800dcc2 <_free_r+0x42>
 800dccc:	6811      	ldr	r1, [r2, #0]
 800dcce:	1850      	adds	r0, r2, r1
 800dcd0:	42a0      	cmp	r0, r4
 800dcd2:	d10b      	bne.n	800dcec <_free_r+0x6c>
 800dcd4:	6820      	ldr	r0, [r4, #0]
 800dcd6:	4401      	add	r1, r0
 800dcd8:	1850      	adds	r0, r2, r1
 800dcda:	4283      	cmp	r3, r0
 800dcdc:	6011      	str	r1, [r2, #0]
 800dcde:	d1e0      	bne.n	800dca2 <_free_r+0x22>
 800dce0:	6818      	ldr	r0, [r3, #0]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	4408      	add	r0, r1
 800dce6:	6010      	str	r0, [r2, #0]
 800dce8:	6053      	str	r3, [r2, #4]
 800dcea:	e7da      	b.n	800dca2 <_free_r+0x22>
 800dcec:	d902      	bls.n	800dcf4 <_free_r+0x74>
 800dcee:	230c      	movs	r3, #12
 800dcf0:	602b      	str	r3, [r5, #0]
 800dcf2:	e7d6      	b.n	800dca2 <_free_r+0x22>
 800dcf4:	6820      	ldr	r0, [r4, #0]
 800dcf6:	1821      	adds	r1, r4, r0
 800dcf8:	428b      	cmp	r3, r1
 800dcfa:	bf01      	itttt	eq
 800dcfc:	6819      	ldreq	r1, [r3, #0]
 800dcfe:	685b      	ldreq	r3, [r3, #4]
 800dd00:	1809      	addeq	r1, r1, r0
 800dd02:	6021      	streq	r1, [r4, #0]
 800dd04:	6063      	str	r3, [r4, #4]
 800dd06:	6054      	str	r4, [r2, #4]
 800dd08:	e7cb      	b.n	800dca2 <_free_r+0x22>
 800dd0a:	bd38      	pop	{r3, r4, r5, pc}
 800dd0c:	20000b8c 	.word	0x20000b8c

0800dd10 <_malloc_usable_size_r>:
 800dd10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd14:	1f18      	subs	r0, r3, #4
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	bfbc      	itt	lt
 800dd1a:	580b      	ldrlt	r3, [r1, r0]
 800dd1c:	18c0      	addlt	r0, r0, r3
 800dd1e:	4770      	bx	lr

0800dd20 <fiprintf>:
 800dd20:	b40e      	push	{r1, r2, r3}
 800dd22:	b503      	push	{r0, r1, lr}
 800dd24:	4601      	mov	r1, r0
 800dd26:	ab03      	add	r3, sp, #12
 800dd28:	4805      	ldr	r0, [pc, #20]	@ (800dd40 <fiprintf+0x20>)
 800dd2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd2e:	6800      	ldr	r0, [r0, #0]
 800dd30:	9301      	str	r3, [sp, #4]
 800dd32:	f000 f835 	bl	800dda0 <_vfiprintf_r>
 800dd36:	b002      	add	sp, #8
 800dd38:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd3c:	b003      	add	sp, #12
 800dd3e:	4770      	bx	lr
 800dd40:	20000184 	.word	0x20000184

0800dd44 <abort>:
 800dd44:	2006      	movs	r0, #6
 800dd46:	b508      	push	{r3, lr}
 800dd48:	f000 fa60 	bl	800e20c <raise>
 800dd4c:	2001      	movs	r0, #1
 800dd4e:	f7f5 fe84 	bl	8003a5a <_exit>

0800dd52 <__sfputc_r>:
 800dd52:	6893      	ldr	r3, [r2, #8]
 800dd54:	b410      	push	{r4}
 800dd56:	3b01      	subs	r3, #1
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	6093      	str	r3, [r2, #8]
 800dd5c:	da07      	bge.n	800dd6e <__sfputc_r+0x1c>
 800dd5e:	6994      	ldr	r4, [r2, #24]
 800dd60:	42a3      	cmp	r3, r4
 800dd62:	db01      	blt.n	800dd68 <__sfputc_r+0x16>
 800dd64:	290a      	cmp	r1, #10
 800dd66:	d102      	bne.n	800dd6e <__sfputc_r+0x1c>
 800dd68:	bc10      	pop	{r4}
 800dd6a:	f000 b931 	b.w	800dfd0 <__swbuf_r>
 800dd6e:	6813      	ldr	r3, [r2, #0]
 800dd70:	1c58      	adds	r0, r3, #1
 800dd72:	6010      	str	r0, [r2, #0]
 800dd74:	7019      	strb	r1, [r3, #0]
 800dd76:	4608      	mov	r0, r1
 800dd78:	bc10      	pop	{r4}
 800dd7a:	4770      	bx	lr

0800dd7c <__sfputs_r>:
 800dd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd7e:	4606      	mov	r6, r0
 800dd80:	460f      	mov	r7, r1
 800dd82:	4614      	mov	r4, r2
 800dd84:	18d5      	adds	r5, r2, r3
 800dd86:	42ac      	cmp	r4, r5
 800dd88:	d101      	bne.n	800dd8e <__sfputs_r+0x12>
 800dd8a:	2000      	movs	r0, #0
 800dd8c:	e007      	b.n	800dd9e <__sfputs_r+0x22>
 800dd8e:	463a      	mov	r2, r7
 800dd90:	4630      	mov	r0, r6
 800dd92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd96:	f7ff ffdc 	bl	800dd52 <__sfputc_r>
 800dd9a:	1c43      	adds	r3, r0, #1
 800dd9c:	d1f3      	bne.n	800dd86 <__sfputs_r+0xa>
 800dd9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dda0 <_vfiprintf_r>:
 800dda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda4:	460d      	mov	r5, r1
 800dda6:	4614      	mov	r4, r2
 800dda8:	4698      	mov	r8, r3
 800ddaa:	4606      	mov	r6, r0
 800ddac:	b09d      	sub	sp, #116	@ 0x74
 800ddae:	b118      	cbz	r0, 800ddb8 <_vfiprintf_r+0x18>
 800ddb0:	6a03      	ldr	r3, [r0, #32]
 800ddb2:	b90b      	cbnz	r3, 800ddb8 <_vfiprintf_r+0x18>
 800ddb4:	f7fc fe18 	bl	800a9e8 <__sinit>
 800ddb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ddba:	07d9      	lsls	r1, r3, #31
 800ddbc:	d405      	bmi.n	800ddca <_vfiprintf_r+0x2a>
 800ddbe:	89ab      	ldrh	r3, [r5, #12]
 800ddc0:	059a      	lsls	r2, r3, #22
 800ddc2:	d402      	bmi.n	800ddca <_vfiprintf_r+0x2a>
 800ddc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ddc6:	f7fd fd12 	bl	800b7ee <__retarget_lock_acquire_recursive>
 800ddca:	89ab      	ldrh	r3, [r5, #12]
 800ddcc:	071b      	lsls	r3, r3, #28
 800ddce:	d501      	bpl.n	800ddd4 <_vfiprintf_r+0x34>
 800ddd0:	692b      	ldr	r3, [r5, #16]
 800ddd2:	b99b      	cbnz	r3, 800ddfc <_vfiprintf_r+0x5c>
 800ddd4:	4629      	mov	r1, r5
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	f000 f938 	bl	800e04c <__swsetup_r>
 800dddc:	b170      	cbz	r0, 800ddfc <_vfiprintf_r+0x5c>
 800ddde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dde0:	07dc      	lsls	r4, r3, #31
 800dde2:	d504      	bpl.n	800ddee <_vfiprintf_r+0x4e>
 800dde4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dde8:	b01d      	add	sp, #116	@ 0x74
 800ddea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddee:	89ab      	ldrh	r3, [r5, #12]
 800ddf0:	0598      	lsls	r0, r3, #22
 800ddf2:	d4f7      	bmi.n	800dde4 <_vfiprintf_r+0x44>
 800ddf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ddf6:	f7fd fcfb 	bl	800b7f0 <__retarget_lock_release_recursive>
 800ddfa:	e7f3      	b.n	800dde4 <_vfiprintf_r+0x44>
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	9309      	str	r3, [sp, #36]	@ 0x24
 800de00:	2320      	movs	r3, #32
 800de02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800de06:	2330      	movs	r3, #48	@ 0x30
 800de08:	f04f 0901 	mov.w	r9, #1
 800de0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800de10:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800dfbc <_vfiprintf_r+0x21c>
 800de14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de18:	4623      	mov	r3, r4
 800de1a:	469a      	mov	sl, r3
 800de1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de20:	b10a      	cbz	r2, 800de26 <_vfiprintf_r+0x86>
 800de22:	2a25      	cmp	r2, #37	@ 0x25
 800de24:	d1f9      	bne.n	800de1a <_vfiprintf_r+0x7a>
 800de26:	ebba 0b04 	subs.w	fp, sl, r4
 800de2a:	d00b      	beq.n	800de44 <_vfiprintf_r+0xa4>
 800de2c:	465b      	mov	r3, fp
 800de2e:	4622      	mov	r2, r4
 800de30:	4629      	mov	r1, r5
 800de32:	4630      	mov	r0, r6
 800de34:	f7ff ffa2 	bl	800dd7c <__sfputs_r>
 800de38:	3001      	adds	r0, #1
 800de3a:	f000 80a7 	beq.w	800df8c <_vfiprintf_r+0x1ec>
 800de3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de40:	445a      	add	r2, fp
 800de42:	9209      	str	r2, [sp, #36]	@ 0x24
 800de44:	f89a 3000 	ldrb.w	r3, [sl]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	f000 809f 	beq.w	800df8c <_vfiprintf_r+0x1ec>
 800de4e:	2300      	movs	r3, #0
 800de50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800de54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de58:	f10a 0a01 	add.w	sl, sl, #1
 800de5c:	9304      	str	r3, [sp, #16]
 800de5e:	9307      	str	r3, [sp, #28]
 800de60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de64:	931a      	str	r3, [sp, #104]	@ 0x68
 800de66:	4654      	mov	r4, sl
 800de68:	2205      	movs	r2, #5
 800de6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de6e:	4853      	ldr	r0, [pc, #332]	@ (800dfbc <_vfiprintf_r+0x21c>)
 800de70:	f7fd fcc4 	bl	800b7fc <memchr>
 800de74:	9a04      	ldr	r2, [sp, #16]
 800de76:	b9d8      	cbnz	r0, 800deb0 <_vfiprintf_r+0x110>
 800de78:	06d1      	lsls	r1, r2, #27
 800de7a:	bf44      	itt	mi
 800de7c:	2320      	movmi	r3, #32
 800de7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de82:	0713      	lsls	r3, r2, #28
 800de84:	bf44      	itt	mi
 800de86:	232b      	movmi	r3, #43	@ 0x2b
 800de88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de8c:	f89a 3000 	ldrb.w	r3, [sl]
 800de90:	2b2a      	cmp	r3, #42	@ 0x2a
 800de92:	d015      	beq.n	800dec0 <_vfiprintf_r+0x120>
 800de94:	4654      	mov	r4, sl
 800de96:	2000      	movs	r0, #0
 800de98:	f04f 0c0a 	mov.w	ip, #10
 800de9c:	9a07      	ldr	r2, [sp, #28]
 800de9e:	4621      	mov	r1, r4
 800dea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dea4:	3b30      	subs	r3, #48	@ 0x30
 800dea6:	2b09      	cmp	r3, #9
 800dea8:	d94b      	bls.n	800df42 <_vfiprintf_r+0x1a2>
 800deaa:	b1b0      	cbz	r0, 800deda <_vfiprintf_r+0x13a>
 800deac:	9207      	str	r2, [sp, #28]
 800deae:	e014      	b.n	800deda <_vfiprintf_r+0x13a>
 800deb0:	eba0 0308 	sub.w	r3, r0, r8
 800deb4:	fa09 f303 	lsl.w	r3, r9, r3
 800deb8:	4313      	orrs	r3, r2
 800deba:	46a2      	mov	sl, r4
 800debc:	9304      	str	r3, [sp, #16]
 800debe:	e7d2      	b.n	800de66 <_vfiprintf_r+0xc6>
 800dec0:	9b03      	ldr	r3, [sp, #12]
 800dec2:	1d19      	adds	r1, r3, #4
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	9103      	str	r1, [sp, #12]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	bfbb      	ittet	lt
 800decc:	425b      	neglt	r3, r3
 800dece:	f042 0202 	orrlt.w	r2, r2, #2
 800ded2:	9307      	strge	r3, [sp, #28]
 800ded4:	9307      	strlt	r3, [sp, #28]
 800ded6:	bfb8      	it	lt
 800ded8:	9204      	strlt	r2, [sp, #16]
 800deda:	7823      	ldrb	r3, [r4, #0]
 800dedc:	2b2e      	cmp	r3, #46	@ 0x2e
 800dede:	d10a      	bne.n	800def6 <_vfiprintf_r+0x156>
 800dee0:	7863      	ldrb	r3, [r4, #1]
 800dee2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dee4:	d132      	bne.n	800df4c <_vfiprintf_r+0x1ac>
 800dee6:	9b03      	ldr	r3, [sp, #12]
 800dee8:	3402      	adds	r4, #2
 800deea:	1d1a      	adds	r2, r3, #4
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	9203      	str	r2, [sp, #12]
 800def0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800def4:	9305      	str	r3, [sp, #20]
 800def6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800dfc0 <_vfiprintf_r+0x220>
 800defa:	2203      	movs	r2, #3
 800defc:	4650      	mov	r0, sl
 800defe:	7821      	ldrb	r1, [r4, #0]
 800df00:	f7fd fc7c 	bl	800b7fc <memchr>
 800df04:	b138      	cbz	r0, 800df16 <_vfiprintf_r+0x176>
 800df06:	2240      	movs	r2, #64	@ 0x40
 800df08:	9b04      	ldr	r3, [sp, #16]
 800df0a:	eba0 000a 	sub.w	r0, r0, sl
 800df0e:	4082      	lsls	r2, r0
 800df10:	4313      	orrs	r3, r2
 800df12:	3401      	adds	r4, #1
 800df14:	9304      	str	r3, [sp, #16]
 800df16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df1a:	2206      	movs	r2, #6
 800df1c:	4829      	ldr	r0, [pc, #164]	@ (800dfc4 <_vfiprintf_r+0x224>)
 800df1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df22:	f7fd fc6b 	bl	800b7fc <memchr>
 800df26:	2800      	cmp	r0, #0
 800df28:	d03f      	beq.n	800dfaa <_vfiprintf_r+0x20a>
 800df2a:	4b27      	ldr	r3, [pc, #156]	@ (800dfc8 <_vfiprintf_r+0x228>)
 800df2c:	bb1b      	cbnz	r3, 800df76 <_vfiprintf_r+0x1d6>
 800df2e:	9b03      	ldr	r3, [sp, #12]
 800df30:	3307      	adds	r3, #7
 800df32:	f023 0307 	bic.w	r3, r3, #7
 800df36:	3308      	adds	r3, #8
 800df38:	9303      	str	r3, [sp, #12]
 800df3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df3c:	443b      	add	r3, r7
 800df3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800df40:	e76a      	b.n	800de18 <_vfiprintf_r+0x78>
 800df42:	460c      	mov	r4, r1
 800df44:	2001      	movs	r0, #1
 800df46:	fb0c 3202 	mla	r2, ip, r2, r3
 800df4a:	e7a8      	b.n	800de9e <_vfiprintf_r+0xfe>
 800df4c:	2300      	movs	r3, #0
 800df4e:	f04f 0c0a 	mov.w	ip, #10
 800df52:	4619      	mov	r1, r3
 800df54:	3401      	adds	r4, #1
 800df56:	9305      	str	r3, [sp, #20]
 800df58:	4620      	mov	r0, r4
 800df5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df5e:	3a30      	subs	r2, #48	@ 0x30
 800df60:	2a09      	cmp	r2, #9
 800df62:	d903      	bls.n	800df6c <_vfiprintf_r+0x1cc>
 800df64:	2b00      	cmp	r3, #0
 800df66:	d0c6      	beq.n	800def6 <_vfiprintf_r+0x156>
 800df68:	9105      	str	r1, [sp, #20]
 800df6a:	e7c4      	b.n	800def6 <_vfiprintf_r+0x156>
 800df6c:	4604      	mov	r4, r0
 800df6e:	2301      	movs	r3, #1
 800df70:	fb0c 2101 	mla	r1, ip, r1, r2
 800df74:	e7f0      	b.n	800df58 <_vfiprintf_r+0x1b8>
 800df76:	ab03      	add	r3, sp, #12
 800df78:	9300      	str	r3, [sp, #0]
 800df7a:	462a      	mov	r2, r5
 800df7c:	4630      	mov	r0, r6
 800df7e:	4b13      	ldr	r3, [pc, #76]	@ (800dfcc <_vfiprintf_r+0x22c>)
 800df80:	a904      	add	r1, sp, #16
 800df82:	f7fb fe87 	bl	8009c94 <_printf_float>
 800df86:	4607      	mov	r7, r0
 800df88:	1c78      	adds	r0, r7, #1
 800df8a:	d1d6      	bne.n	800df3a <_vfiprintf_r+0x19a>
 800df8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df8e:	07d9      	lsls	r1, r3, #31
 800df90:	d405      	bmi.n	800df9e <_vfiprintf_r+0x1fe>
 800df92:	89ab      	ldrh	r3, [r5, #12]
 800df94:	059a      	lsls	r2, r3, #22
 800df96:	d402      	bmi.n	800df9e <_vfiprintf_r+0x1fe>
 800df98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df9a:	f7fd fc29 	bl	800b7f0 <__retarget_lock_release_recursive>
 800df9e:	89ab      	ldrh	r3, [r5, #12]
 800dfa0:	065b      	lsls	r3, r3, #25
 800dfa2:	f53f af1f 	bmi.w	800dde4 <_vfiprintf_r+0x44>
 800dfa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dfa8:	e71e      	b.n	800dde8 <_vfiprintf_r+0x48>
 800dfaa:	ab03      	add	r3, sp, #12
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	462a      	mov	r2, r5
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	4b06      	ldr	r3, [pc, #24]	@ (800dfcc <_vfiprintf_r+0x22c>)
 800dfb4:	a904      	add	r1, sp, #16
 800dfb6:	f7fc f90b 	bl	800a1d0 <_printf_i>
 800dfba:	e7e4      	b.n	800df86 <_vfiprintf_r+0x1e6>
 800dfbc:	0800ed92 	.word	0x0800ed92
 800dfc0:	0800ed98 	.word	0x0800ed98
 800dfc4:	0800ed9c 	.word	0x0800ed9c
 800dfc8:	08009c95 	.word	0x08009c95
 800dfcc:	0800dd7d 	.word	0x0800dd7d

0800dfd0 <__swbuf_r>:
 800dfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfd2:	460e      	mov	r6, r1
 800dfd4:	4614      	mov	r4, r2
 800dfd6:	4605      	mov	r5, r0
 800dfd8:	b118      	cbz	r0, 800dfe2 <__swbuf_r+0x12>
 800dfda:	6a03      	ldr	r3, [r0, #32]
 800dfdc:	b90b      	cbnz	r3, 800dfe2 <__swbuf_r+0x12>
 800dfde:	f7fc fd03 	bl	800a9e8 <__sinit>
 800dfe2:	69a3      	ldr	r3, [r4, #24]
 800dfe4:	60a3      	str	r3, [r4, #8]
 800dfe6:	89a3      	ldrh	r3, [r4, #12]
 800dfe8:	071a      	lsls	r2, r3, #28
 800dfea:	d501      	bpl.n	800dff0 <__swbuf_r+0x20>
 800dfec:	6923      	ldr	r3, [r4, #16]
 800dfee:	b943      	cbnz	r3, 800e002 <__swbuf_r+0x32>
 800dff0:	4621      	mov	r1, r4
 800dff2:	4628      	mov	r0, r5
 800dff4:	f000 f82a 	bl	800e04c <__swsetup_r>
 800dff8:	b118      	cbz	r0, 800e002 <__swbuf_r+0x32>
 800dffa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800dffe:	4638      	mov	r0, r7
 800e000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e002:	6823      	ldr	r3, [r4, #0]
 800e004:	6922      	ldr	r2, [r4, #16]
 800e006:	b2f6      	uxtb	r6, r6
 800e008:	1a98      	subs	r0, r3, r2
 800e00a:	6963      	ldr	r3, [r4, #20]
 800e00c:	4637      	mov	r7, r6
 800e00e:	4283      	cmp	r3, r0
 800e010:	dc05      	bgt.n	800e01e <__swbuf_r+0x4e>
 800e012:	4621      	mov	r1, r4
 800e014:	4628      	mov	r0, r5
 800e016:	f7ff f83f 	bl	800d098 <_fflush_r>
 800e01a:	2800      	cmp	r0, #0
 800e01c:	d1ed      	bne.n	800dffa <__swbuf_r+0x2a>
 800e01e:	68a3      	ldr	r3, [r4, #8]
 800e020:	3b01      	subs	r3, #1
 800e022:	60a3      	str	r3, [r4, #8]
 800e024:	6823      	ldr	r3, [r4, #0]
 800e026:	1c5a      	adds	r2, r3, #1
 800e028:	6022      	str	r2, [r4, #0]
 800e02a:	701e      	strb	r6, [r3, #0]
 800e02c:	6962      	ldr	r2, [r4, #20]
 800e02e:	1c43      	adds	r3, r0, #1
 800e030:	429a      	cmp	r2, r3
 800e032:	d004      	beq.n	800e03e <__swbuf_r+0x6e>
 800e034:	89a3      	ldrh	r3, [r4, #12]
 800e036:	07db      	lsls	r3, r3, #31
 800e038:	d5e1      	bpl.n	800dffe <__swbuf_r+0x2e>
 800e03a:	2e0a      	cmp	r6, #10
 800e03c:	d1df      	bne.n	800dffe <__swbuf_r+0x2e>
 800e03e:	4621      	mov	r1, r4
 800e040:	4628      	mov	r0, r5
 800e042:	f7ff f829 	bl	800d098 <_fflush_r>
 800e046:	2800      	cmp	r0, #0
 800e048:	d0d9      	beq.n	800dffe <__swbuf_r+0x2e>
 800e04a:	e7d6      	b.n	800dffa <__swbuf_r+0x2a>

0800e04c <__swsetup_r>:
 800e04c:	b538      	push	{r3, r4, r5, lr}
 800e04e:	4b29      	ldr	r3, [pc, #164]	@ (800e0f4 <__swsetup_r+0xa8>)
 800e050:	4605      	mov	r5, r0
 800e052:	6818      	ldr	r0, [r3, #0]
 800e054:	460c      	mov	r4, r1
 800e056:	b118      	cbz	r0, 800e060 <__swsetup_r+0x14>
 800e058:	6a03      	ldr	r3, [r0, #32]
 800e05a:	b90b      	cbnz	r3, 800e060 <__swsetup_r+0x14>
 800e05c:	f7fc fcc4 	bl	800a9e8 <__sinit>
 800e060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e064:	0719      	lsls	r1, r3, #28
 800e066:	d422      	bmi.n	800e0ae <__swsetup_r+0x62>
 800e068:	06da      	lsls	r2, r3, #27
 800e06a:	d407      	bmi.n	800e07c <__swsetup_r+0x30>
 800e06c:	2209      	movs	r2, #9
 800e06e:	602a      	str	r2, [r5, #0]
 800e070:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e078:	81a3      	strh	r3, [r4, #12]
 800e07a:	e033      	b.n	800e0e4 <__swsetup_r+0x98>
 800e07c:	0758      	lsls	r0, r3, #29
 800e07e:	d512      	bpl.n	800e0a6 <__swsetup_r+0x5a>
 800e080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e082:	b141      	cbz	r1, 800e096 <__swsetup_r+0x4a>
 800e084:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e088:	4299      	cmp	r1, r3
 800e08a:	d002      	beq.n	800e092 <__swsetup_r+0x46>
 800e08c:	4628      	mov	r0, r5
 800e08e:	f7ff fdf7 	bl	800dc80 <_free_r>
 800e092:	2300      	movs	r3, #0
 800e094:	6363      	str	r3, [r4, #52]	@ 0x34
 800e096:	89a3      	ldrh	r3, [r4, #12]
 800e098:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e09c:	81a3      	strh	r3, [r4, #12]
 800e09e:	2300      	movs	r3, #0
 800e0a0:	6063      	str	r3, [r4, #4]
 800e0a2:	6923      	ldr	r3, [r4, #16]
 800e0a4:	6023      	str	r3, [r4, #0]
 800e0a6:	89a3      	ldrh	r3, [r4, #12]
 800e0a8:	f043 0308 	orr.w	r3, r3, #8
 800e0ac:	81a3      	strh	r3, [r4, #12]
 800e0ae:	6923      	ldr	r3, [r4, #16]
 800e0b0:	b94b      	cbnz	r3, 800e0c6 <__swsetup_r+0x7a>
 800e0b2:	89a3      	ldrh	r3, [r4, #12]
 800e0b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e0b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0bc:	d003      	beq.n	800e0c6 <__swsetup_r+0x7a>
 800e0be:	4621      	mov	r1, r4
 800e0c0:	4628      	mov	r0, r5
 800e0c2:	f000 f83e 	bl	800e142 <__smakebuf_r>
 800e0c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0ca:	f013 0201 	ands.w	r2, r3, #1
 800e0ce:	d00a      	beq.n	800e0e6 <__swsetup_r+0x9a>
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	60a2      	str	r2, [r4, #8]
 800e0d4:	6962      	ldr	r2, [r4, #20]
 800e0d6:	4252      	negs	r2, r2
 800e0d8:	61a2      	str	r2, [r4, #24]
 800e0da:	6922      	ldr	r2, [r4, #16]
 800e0dc:	b942      	cbnz	r2, 800e0f0 <__swsetup_r+0xa4>
 800e0de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e0e2:	d1c5      	bne.n	800e070 <__swsetup_r+0x24>
 800e0e4:	bd38      	pop	{r3, r4, r5, pc}
 800e0e6:	0799      	lsls	r1, r3, #30
 800e0e8:	bf58      	it	pl
 800e0ea:	6962      	ldrpl	r2, [r4, #20]
 800e0ec:	60a2      	str	r2, [r4, #8]
 800e0ee:	e7f4      	b.n	800e0da <__swsetup_r+0x8e>
 800e0f0:	2000      	movs	r0, #0
 800e0f2:	e7f7      	b.n	800e0e4 <__swsetup_r+0x98>
 800e0f4:	20000184 	.word	0x20000184

0800e0f8 <__swhatbuf_r>:
 800e0f8:	b570      	push	{r4, r5, r6, lr}
 800e0fa:	460c      	mov	r4, r1
 800e0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e100:	4615      	mov	r5, r2
 800e102:	2900      	cmp	r1, #0
 800e104:	461e      	mov	r6, r3
 800e106:	b096      	sub	sp, #88	@ 0x58
 800e108:	da0c      	bge.n	800e124 <__swhatbuf_r+0x2c>
 800e10a:	89a3      	ldrh	r3, [r4, #12]
 800e10c:	2100      	movs	r1, #0
 800e10e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e112:	bf14      	ite	ne
 800e114:	2340      	movne	r3, #64	@ 0x40
 800e116:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e11a:	2000      	movs	r0, #0
 800e11c:	6031      	str	r1, [r6, #0]
 800e11e:	602b      	str	r3, [r5, #0]
 800e120:	b016      	add	sp, #88	@ 0x58
 800e122:	bd70      	pop	{r4, r5, r6, pc}
 800e124:	466a      	mov	r2, sp
 800e126:	f000 f89d 	bl	800e264 <_fstat_r>
 800e12a:	2800      	cmp	r0, #0
 800e12c:	dbed      	blt.n	800e10a <__swhatbuf_r+0x12>
 800e12e:	9901      	ldr	r1, [sp, #4]
 800e130:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e134:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e138:	4259      	negs	r1, r3
 800e13a:	4159      	adcs	r1, r3
 800e13c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e140:	e7eb      	b.n	800e11a <__swhatbuf_r+0x22>

0800e142 <__smakebuf_r>:
 800e142:	898b      	ldrh	r3, [r1, #12]
 800e144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e146:	079d      	lsls	r5, r3, #30
 800e148:	4606      	mov	r6, r0
 800e14a:	460c      	mov	r4, r1
 800e14c:	d507      	bpl.n	800e15e <__smakebuf_r+0x1c>
 800e14e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e152:	6023      	str	r3, [r4, #0]
 800e154:	6123      	str	r3, [r4, #16]
 800e156:	2301      	movs	r3, #1
 800e158:	6163      	str	r3, [r4, #20]
 800e15a:	b003      	add	sp, #12
 800e15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e15e:	466a      	mov	r2, sp
 800e160:	ab01      	add	r3, sp, #4
 800e162:	f7ff ffc9 	bl	800e0f8 <__swhatbuf_r>
 800e166:	9f00      	ldr	r7, [sp, #0]
 800e168:	4605      	mov	r5, r0
 800e16a:	4639      	mov	r1, r7
 800e16c:	4630      	mov	r0, r6
 800e16e:	f7fe fe81 	bl	800ce74 <_malloc_r>
 800e172:	b948      	cbnz	r0, 800e188 <__smakebuf_r+0x46>
 800e174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e178:	059a      	lsls	r2, r3, #22
 800e17a:	d4ee      	bmi.n	800e15a <__smakebuf_r+0x18>
 800e17c:	f023 0303 	bic.w	r3, r3, #3
 800e180:	f043 0302 	orr.w	r3, r3, #2
 800e184:	81a3      	strh	r3, [r4, #12]
 800e186:	e7e2      	b.n	800e14e <__smakebuf_r+0xc>
 800e188:	89a3      	ldrh	r3, [r4, #12]
 800e18a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e18e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e192:	81a3      	strh	r3, [r4, #12]
 800e194:	9b01      	ldr	r3, [sp, #4]
 800e196:	6020      	str	r0, [r4, #0]
 800e198:	b15b      	cbz	r3, 800e1b2 <__smakebuf_r+0x70>
 800e19a:	4630      	mov	r0, r6
 800e19c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1a0:	f000 f83c 	bl	800e21c <_isatty_r>
 800e1a4:	b128      	cbz	r0, 800e1b2 <__smakebuf_r+0x70>
 800e1a6:	89a3      	ldrh	r3, [r4, #12]
 800e1a8:	f023 0303 	bic.w	r3, r3, #3
 800e1ac:	f043 0301 	orr.w	r3, r3, #1
 800e1b0:	81a3      	strh	r3, [r4, #12]
 800e1b2:	89a3      	ldrh	r3, [r4, #12]
 800e1b4:	431d      	orrs	r5, r3
 800e1b6:	81a5      	strh	r5, [r4, #12]
 800e1b8:	e7cf      	b.n	800e15a <__smakebuf_r+0x18>

0800e1ba <_raise_r>:
 800e1ba:	291f      	cmp	r1, #31
 800e1bc:	b538      	push	{r3, r4, r5, lr}
 800e1be:	4605      	mov	r5, r0
 800e1c0:	460c      	mov	r4, r1
 800e1c2:	d904      	bls.n	800e1ce <_raise_r+0x14>
 800e1c4:	2316      	movs	r3, #22
 800e1c6:	6003      	str	r3, [r0, #0]
 800e1c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e1cc:	bd38      	pop	{r3, r4, r5, pc}
 800e1ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e1d0:	b112      	cbz	r2, 800e1d8 <_raise_r+0x1e>
 800e1d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1d6:	b94b      	cbnz	r3, 800e1ec <_raise_r+0x32>
 800e1d8:	4628      	mov	r0, r5
 800e1da:	f000 f841 	bl	800e260 <_getpid_r>
 800e1de:	4622      	mov	r2, r4
 800e1e0:	4601      	mov	r1, r0
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1e8:	f000 b828 	b.w	800e23c <_kill_r>
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d00a      	beq.n	800e206 <_raise_r+0x4c>
 800e1f0:	1c59      	adds	r1, r3, #1
 800e1f2:	d103      	bne.n	800e1fc <_raise_r+0x42>
 800e1f4:	2316      	movs	r3, #22
 800e1f6:	6003      	str	r3, [r0, #0]
 800e1f8:	2001      	movs	r0, #1
 800e1fa:	e7e7      	b.n	800e1cc <_raise_r+0x12>
 800e1fc:	2100      	movs	r1, #0
 800e1fe:	4620      	mov	r0, r4
 800e200:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e204:	4798      	blx	r3
 800e206:	2000      	movs	r0, #0
 800e208:	e7e0      	b.n	800e1cc <_raise_r+0x12>
	...

0800e20c <raise>:
 800e20c:	4b02      	ldr	r3, [pc, #8]	@ (800e218 <raise+0xc>)
 800e20e:	4601      	mov	r1, r0
 800e210:	6818      	ldr	r0, [r3, #0]
 800e212:	f7ff bfd2 	b.w	800e1ba <_raise_r>
 800e216:	bf00      	nop
 800e218:	20000184 	.word	0x20000184

0800e21c <_isatty_r>:
 800e21c:	b538      	push	{r3, r4, r5, lr}
 800e21e:	2300      	movs	r3, #0
 800e220:	4d05      	ldr	r5, [pc, #20]	@ (800e238 <_isatty_r+0x1c>)
 800e222:	4604      	mov	r4, r0
 800e224:	4608      	mov	r0, r1
 800e226:	602b      	str	r3, [r5, #0]
 800e228:	f7f5 fc75 	bl	8003b16 <_isatty>
 800e22c:	1c43      	adds	r3, r0, #1
 800e22e:	d102      	bne.n	800e236 <_isatty_r+0x1a>
 800e230:	682b      	ldr	r3, [r5, #0]
 800e232:	b103      	cbz	r3, 800e236 <_isatty_r+0x1a>
 800e234:	6023      	str	r3, [r4, #0]
 800e236:	bd38      	pop	{r3, r4, r5, pc}
 800e238:	20000b90 	.word	0x20000b90

0800e23c <_kill_r>:
 800e23c:	b538      	push	{r3, r4, r5, lr}
 800e23e:	2300      	movs	r3, #0
 800e240:	4d06      	ldr	r5, [pc, #24]	@ (800e25c <_kill_r+0x20>)
 800e242:	4604      	mov	r4, r0
 800e244:	4608      	mov	r0, r1
 800e246:	4611      	mov	r1, r2
 800e248:	602b      	str	r3, [r5, #0]
 800e24a:	f7f5 fbf6 	bl	8003a3a <_kill>
 800e24e:	1c43      	adds	r3, r0, #1
 800e250:	d102      	bne.n	800e258 <_kill_r+0x1c>
 800e252:	682b      	ldr	r3, [r5, #0]
 800e254:	b103      	cbz	r3, 800e258 <_kill_r+0x1c>
 800e256:	6023      	str	r3, [r4, #0]
 800e258:	bd38      	pop	{r3, r4, r5, pc}
 800e25a:	bf00      	nop
 800e25c:	20000b90 	.word	0x20000b90

0800e260 <_getpid_r>:
 800e260:	f7f5 bbe4 	b.w	8003a2c <_getpid>

0800e264 <_fstat_r>:
 800e264:	b538      	push	{r3, r4, r5, lr}
 800e266:	2300      	movs	r3, #0
 800e268:	4d06      	ldr	r5, [pc, #24]	@ (800e284 <_fstat_r+0x20>)
 800e26a:	4604      	mov	r4, r0
 800e26c:	4608      	mov	r0, r1
 800e26e:	4611      	mov	r1, r2
 800e270:	602b      	str	r3, [r5, #0]
 800e272:	f7f5 fc41 	bl	8003af8 <_fstat>
 800e276:	1c43      	adds	r3, r0, #1
 800e278:	d102      	bne.n	800e280 <_fstat_r+0x1c>
 800e27a:	682b      	ldr	r3, [r5, #0]
 800e27c:	b103      	cbz	r3, 800e280 <_fstat_r+0x1c>
 800e27e:	6023      	str	r3, [r4, #0]
 800e280:	bd38      	pop	{r3, r4, r5, pc}
 800e282:	bf00      	nop
 800e284:	20000b90 	.word	0x20000b90

0800e288 <asinf>:
 800e288:	b538      	push	{r3, r4, r5, lr}
 800e28a:	4604      	mov	r4, r0
 800e28c:	f000 f83c 	bl	800e308 <__ieee754_asinf>
 800e290:	4621      	mov	r1, r4
 800e292:	4605      	mov	r5, r0
 800e294:	4620      	mov	r0, r4
 800e296:	f7f2 ff3b 	bl	8001110 <__aeabi_fcmpun>
 800e29a:	b980      	cbnz	r0, 800e2be <asinf+0x36>
 800e29c:	4620      	mov	r0, r4
 800e29e:	f000 f82f 	bl	800e300 <fabsf>
 800e2a2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e2a6:	f7f2 ff29 	bl	80010fc <__aeabi_fcmpgt>
 800e2aa:	b140      	cbz	r0, 800e2be <asinf+0x36>
 800e2ac:	f7fd fa74 	bl	800b798 <__errno>
 800e2b0:	2321      	movs	r3, #33	@ 0x21
 800e2b2:	6003      	str	r3, [r0, #0]
 800e2b4:	4803      	ldr	r0, [pc, #12]	@ (800e2c4 <asinf+0x3c>)
 800e2b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2ba:	f7fd bac1 	b.w	800b840 <nanf>
 800e2be:	4628      	mov	r0, r5
 800e2c0:	bd38      	pop	{r3, r4, r5, pc}
 800e2c2:	bf00      	nop
 800e2c4:	0800ee37 	.word	0x0800ee37

0800e2c8 <atan2f>:
 800e2c8:	f000 b960 	b.w	800e58c <__ieee754_atan2f>

0800e2cc <sqrtf>:
 800e2cc:	b538      	push	{r3, r4, r5, lr}
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	f000 f9e4 	bl	800e69c <__ieee754_sqrtf>
 800e2d4:	4629      	mov	r1, r5
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	4628      	mov	r0, r5
 800e2da:	f7f2 ff19 	bl	8001110 <__aeabi_fcmpun>
 800e2de:	b968      	cbnz	r0, 800e2fc <sqrtf+0x30>
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	f7f2 feec 	bl	80010c0 <__aeabi_fcmplt>
 800e2e8:	b140      	cbz	r0, 800e2fc <sqrtf+0x30>
 800e2ea:	f7fd fa55 	bl	800b798 <__errno>
 800e2ee:	2321      	movs	r3, #33	@ 0x21
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	6003      	str	r3, [r0, #0]
 800e2f4:	4608      	mov	r0, r1
 800e2f6:	f7f2 fdf9 	bl	8000eec <__aeabi_fdiv>
 800e2fa:	4604      	mov	r4, r0
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	bd38      	pop	{r3, r4, r5, pc}

0800e300 <fabsf>:
 800e300:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e304:	4770      	bx	lr
	...

0800e308 <__ieee754_asinf>:
 800e308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e30c:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800e310:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800e314:	4604      	mov	r4, r0
 800e316:	4605      	mov	r5, r0
 800e318:	d10c      	bne.n	800e334 <__ieee754_asinf+0x2c>
 800e31a:	498c      	ldr	r1, [pc, #560]	@ (800e54c <__ieee754_asinf+0x244>)
 800e31c:	f7f2 fd32 	bl	8000d84 <__aeabi_fmul>
 800e320:	498b      	ldr	r1, [pc, #556]	@ (800e550 <__ieee754_asinf+0x248>)
 800e322:	4605      	mov	r5, r0
 800e324:	4620      	mov	r0, r4
 800e326:	f7f2 fd2d 	bl	8000d84 <__aeabi_fmul>
 800e32a:	4601      	mov	r1, r0
 800e32c:	4628      	mov	r0, r5
 800e32e:	f7f2 fc21 	bl	8000b74 <__addsf3>
 800e332:	e006      	b.n	800e342 <__ieee754_asinf+0x3a>
 800e334:	d909      	bls.n	800e34a <__ieee754_asinf+0x42>
 800e336:	4601      	mov	r1, r0
 800e338:	f7f2 fc1a 	bl	8000b70 <__aeabi_fsub>
 800e33c:	4601      	mov	r1, r0
 800e33e:	f7f2 fdd5 	bl	8000eec <__aeabi_fdiv>
 800e342:	4604      	mov	r4, r0
 800e344:	4620      	mov	r0, r4
 800e346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e34a:	f1b6 5f7c 	cmp.w	r6, #1056964608	@ 0x3f000000
 800e34e:	d20b      	bcs.n	800e368 <__ieee754_asinf+0x60>
 800e350:	f1b6 5f48 	cmp.w	r6, #838860800	@ 0x32000000
 800e354:	d273      	bcs.n	800e43e <__ieee754_asinf+0x136>
 800e356:	497f      	ldr	r1, [pc, #508]	@ (800e554 <__ieee754_asinf+0x24c>)
 800e358:	f7f2 fc0c 	bl	8000b74 <__addsf3>
 800e35c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e360:	f7f2 fecc 	bl	80010fc <__aeabi_fcmpgt>
 800e364:	2800      	cmp	r0, #0
 800e366:	d1ed      	bne.n	800e344 <__ieee754_asinf+0x3c>
 800e368:	4620      	mov	r0, r4
 800e36a:	f7ff ffc9 	bl	800e300 <fabsf>
 800e36e:	4601      	mov	r1, r0
 800e370:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e374:	f7f2 fbfc 	bl	8000b70 <__aeabi_fsub>
 800e378:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800e37c:	f7f2 fd02 	bl	8000d84 <__aeabi_fmul>
 800e380:	4607      	mov	r7, r0
 800e382:	4975      	ldr	r1, [pc, #468]	@ (800e558 <__ieee754_asinf+0x250>)
 800e384:	f7f2 fcfe 	bl	8000d84 <__aeabi_fmul>
 800e388:	4974      	ldr	r1, [pc, #464]	@ (800e55c <__ieee754_asinf+0x254>)
 800e38a:	f7f2 fbf3 	bl	8000b74 <__addsf3>
 800e38e:	4639      	mov	r1, r7
 800e390:	f7f2 fcf8 	bl	8000d84 <__aeabi_fmul>
 800e394:	4972      	ldr	r1, [pc, #456]	@ (800e560 <__ieee754_asinf+0x258>)
 800e396:	f7f2 fbeb 	bl	8000b70 <__aeabi_fsub>
 800e39a:	4639      	mov	r1, r7
 800e39c:	f7f2 fcf2 	bl	8000d84 <__aeabi_fmul>
 800e3a0:	4970      	ldr	r1, [pc, #448]	@ (800e564 <__ieee754_asinf+0x25c>)
 800e3a2:	f7f2 fbe7 	bl	8000b74 <__addsf3>
 800e3a6:	4639      	mov	r1, r7
 800e3a8:	f7f2 fcec 	bl	8000d84 <__aeabi_fmul>
 800e3ac:	496e      	ldr	r1, [pc, #440]	@ (800e568 <__ieee754_asinf+0x260>)
 800e3ae:	f7f2 fbdf 	bl	8000b70 <__aeabi_fsub>
 800e3b2:	4639      	mov	r1, r7
 800e3b4:	f7f2 fce6 	bl	8000d84 <__aeabi_fmul>
 800e3b8:	496c      	ldr	r1, [pc, #432]	@ (800e56c <__ieee754_asinf+0x264>)
 800e3ba:	f7f2 fbdb 	bl	8000b74 <__addsf3>
 800e3be:	4639      	mov	r1, r7
 800e3c0:	f7f2 fce0 	bl	8000d84 <__aeabi_fmul>
 800e3c4:	496a      	ldr	r1, [pc, #424]	@ (800e570 <__ieee754_asinf+0x268>)
 800e3c6:	4681      	mov	r9, r0
 800e3c8:	4638      	mov	r0, r7
 800e3ca:	f7f2 fcdb 	bl	8000d84 <__aeabi_fmul>
 800e3ce:	4969      	ldr	r1, [pc, #420]	@ (800e574 <__ieee754_asinf+0x26c>)
 800e3d0:	f7f2 fbce 	bl	8000b70 <__aeabi_fsub>
 800e3d4:	4639      	mov	r1, r7
 800e3d6:	f7f2 fcd5 	bl	8000d84 <__aeabi_fmul>
 800e3da:	4967      	ldr	r1, [pc, #412]	@ (800e578 <__ieee754_asinf+0x270>)
 800e3dc:	f7f2 fbca 	bl	8000b74 <__addsf3>
 800e3e0:	4639      	mov	r1, r7
 800e3e2:	f7f2 fccf 	bl	8000d84 <__aeabi_fmul>
 800e3e6:	4965      	ldr	r1, [pc, #404]	@ (800e57c <__ieee754_asinf+0x274>)
 800e3e8:	f7f2 fbc2 	bl	8000b70 <__aeabi_fsub>
 800e3ec:	4639      	mov	r1, r7
 800e3ee:	f7f2 fcc9 	bl	8000d84 <__aeabi_fmul>
 800e3f2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e3f6:	f7f2 fbbd 	bl	8000b74 <__addsf3>
 800e3fa:	4682      	mov	sl, r0
 800e3fc:	4638      	mov	r0, r7
 800e3fe:	f000 f94d 	bl	800e69c <__ieee754_sqrtf>
 800e402:	4b5f      	ldr	r3, [pc, #380]	@ (800e580 <__ieee754_asinf+0x278>)
 800e404:	4680      	mov	r8, r0
 800e406:	429e      	cmp	r6, r3
 800e408:	d963      	bls.n	800e4d2 <__ieee754_asinf+0x1ca>
 800e40a:	4651      	mov	r1, sl
 800e40c:	4648      	mov	r0, r9
 800e40e:	f7f2 fd6d 	bl	8000eec <__aeabi_fdiv>
 800e412:	4641      	mov	r1, r8
 800e414:	f7f2 fcb6 	bl	8000d84 <__aeabi_fmul>
 800e418:	4641      	mov	r1, r8
 800e41a:	f7f2 fbab 	bl	8000b74 <__addsf3>
 800e41e:	4601      	mov	r1, r0
 800e420:	f7f2 fba8 	bl	8000b74 <__addsf3>
 800e424:	4957      	ldr	r1, [pc, #348]	@ (800e584 <__ieee754_asinf+0x27c>)
 800e426:	f7f2 fba5 	bl	8000b74 <__addsf3>
 800e42a:	4601      	mov	r1, r0
 800e42c:	4847      	ldr	r0, [pc, #284]	@ (800e54c <__ieee754_asinf+0x244>)
 800e42e:	f7f2 fb9f 	bl	8000b70 <__aeabi_fsub>
 800e432:	2d00      	cmp	r5, #0
 800e434:	4604      	mov	r4, r0
 800e436:	bfd8      	it	le
 800e438:	f100 4400 	addle.w	r4, r0, #2147483648	@ 0x80000000
 800e43c:	e782      	b.n	800e344 <__ieee754_asinf+0x3c>
 800e43e:	4601      	mov	r1, r0
 800e440:	f7f2 fca0 	bl	8000d84 <__aeabi_fmul>
 800e444:	4605      	mov	r5, r0
 800e446:	4944      	ldr	r1, [pc, #272]	@ (800e558 <__ieee754_asinf+0x250>)
 800e448:	f7f2 fc9c 	bl	8000d84 <__aeabi_fmul>
 800e44c:	4943      	ldr	r1, [pc, #268]	@ (800e55c <__ieee754_asinf+0x254>)
 800e44e:	f7f2 fb91 	bl	8000b74 <__addsf3>
 800e452:	4629      	mov	r1, r5
 800e454:	f7f2 fc96 	bl	8000d84 <__aeabi_fmul>
 800e458:	4941      	ldr	r1, [pc, #260]	@ (800e560 <__ieee754_asinf+0x258>)
 800e45a:	f7f2 fb89 	bl	8000b70 <__aeabi_fsub>
 800e45e:	4629      	mov	r1, r5
 800e460:	f7f2 fc90 	bl	8000d84 <__aeabi_fmul>
 800e464:	493f      	ldr	r1, [pc, #252]	@ (800e564 <__ieee754_asinf+0x25c>)
 800e466:	f7f2 fb85 	bl	8000b74 <__addsf3>
 800e46a:	4629      	mov	r1, r5
 800e46c:	f7f2 fc8a 	bl	8000d84 <__aeabi_fmul>
 800e470:	493d      	ldr	r1, [pc, #244]	@ (800e568 <__ieee754_asinf+0x260>)
 800e472:	f7f2 fb7d 	bl	8000b70 <__aeabi_fsub>
 800e476:	4629      	mov	r1, r5
 800e478:	f7f2 fc84 	bl	8000d84 <__aeabi_fmul>
 800e47c:	493b      	ldr	r1, [pc, #236]	@ (800e56c <__ieee754_asinf+0x264>)
 800e47e:	f7f2 fb79 	bl	8000b74 <__addsf3>
 800e482:	4629      	mov	r1, r5
 800e484:	f7f2 fc7e 	bl	8000d84 <__aeabi_fmul>
 800e488:	4939      	ldr	r1, [pc, #228]	@ (800e570 <__ieee754_asinf+0x268>)
 800e48a:	4606      	mov	r6, r0
 800e48c:	4628      	mov	r0, r5
 800e48e:	f7f2 fc79 	bl	8000d84 <__aeabi_fmul>
 800e492:	4938      	ldr	r1, [pc, #224]	@ (800e574 <__ieee754_asinf+0x26c>)
 800e494:	f7f2 fb6c 	bl	8000b70 <__aeabi_fsub>
 800e498:	4629      	mov	r1, r5
 800e49a:	f7f2 fc73 	bl	8000d84 <__aeabi_fmul>
 800e49e:	4936      	ldr	r1, [pc, #216]	@ (800e578 <__ieee754_asinf+0x270>)
 800e4a0:	f7f2 fb68 	bl	8000b74 <__addsf3>
 800e4a4:	4629      	mov	r1, r5
 800e4a6:	f7f2 fc6d 	bl	8000d84 <__aeabi_fmul>
 800e4aa:	4934      	ldr	r1, [pc, #208]	@ (800e57c <__ieee754_asinf+0x274>)
 800e4ac:	f7f2 fb60 	bl	8000b70 <__aeabi_fsub>
 800e4b0:	4629      	mov	r1, r5
 800e4b2:	f7f2 fc67 	bl	8000d84 <__aeabi_fmul>
 800e4b6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e4ba:	f7f2 fb5b 	bl	8000b74 <__addsf3>
 800e4be:	4601      	mov	r1, r0
 800e4c0:	4630      	mov	r0, r6
 800e4c2:	f7f2 fd13 	bl	8000eec <__aeabi_fdiv>
 800e4c6:	4621      	mov	r1, r4
 800e4c8:	f7f2 fc5c 	bl	8000d84 <__aeabi_fmul>
 800e4cc:	4601      	mov	r1, r0
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	e72d      	b.n	800e32e <__ieee754_asinf+0x26>
 800e4d2:	4601      	mov	r1, r0
 800e4d4:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800e4d8:	f7f2 fb4c 	bl	8000b74 <__addsf3>
 800e4dc:	4651      	mov	r1, sl
 800e4de:	4604      	mov	r4, r0
 800e4e0:	4648      	mov	r0, r9
 800e4e2:	f7f2 fd03 	bl	8000eec <__aeabi_fdiv>
 800e4e6:	4601      	mov	r1, r0
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	f7f2 fc4b 	bl	8000d84 <__aeabi_fmul>
 800e4ee:	f026 060f 	bic.w	r6, r6, #15
 800e4f2:	4681      	mov	r9, r0
 800e4f4:	4631      	mov	r1, r6
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	f7f2 fc44 	bl	8000d84 <__aeabi_fmul>
 800e4fc:	4601      	mov	r1, r0
 800e4fe:	4638      	mov	r0, r7
 800e500:	f7f2 fb36 	bl	8000b70 <__aeabi_fsub>
 800e504:	4631      	mov	r1, r6
 800e506:	4604      	mov	r4, r0
 800e508:	4640      	mov	r0, r8
 800e50a:	f7f2 fb33 	bl	8000b74 <__addsf3>
 800e50e:	4601      	mov	r1, r0
 800e510:	4620      	mov	r0, r4
 800e512:	f7f2 fceb 	bl	8000eec <__aeabi_fdiv>
 800e516:	4601      	mov	r1, r0
 800e518:	f7f2 fb2c 	bl	8000b74 <__addsf3>
 800e51c:	4601      	mov	r1, r0
 800e51e:	480c      	ldr	r0, [pc, #48]	@ (800e550 <__ieee754_asinf+0x248>)
 800e520:	f7f2 fb26 	bl	8000b70 <__aeabi_fsub>
 800e524:	4601      	mov	r1, r0
 800e526:	4648      	mov	r0, r9
 800e528:	f7f2 fb22 	bl	8000b70 <__aeabi_fsub>
 800e52c:	4631      	mov	r1, r6
 800e52e:	4604      	mov	r4, r0
 800e530:	4630      	mov	r0, r6
 800e532:	f7f2 fb1f 	bl	8000b74 <__addsf3>
 800e536:	4601      	mov	r1, r0
 800e538:	4813      	ldr	r0, [pc, #76]	@ (800e588 <__ieee754_asinf+0x280>)
 800e53a:	f7f2 fb19 	bl	8000b70 <__aeabi_fsub>
 800e53e:	4601      	mov	r1, r0
 800e540:	4620      	mov	r0, r4
 800e542:	f7f2 fb15 	bl	8000b70 <__aeabi_fsub>
 800e546:	4601      	mov	r1, r0
 800e548:	480f      	ldr	r0, [pc, #60]	@ (800e588 <__ieee754_asinf+0x280>)
 800e54a:	e770      	b.n	800e42e <__ieee754_asinf+0x126>
 800e54c:	3fc90fdb 	.word	0x3fc90fdb
 800e550:	b33bbd2e 	.word	0xb33bbd2e
 800e554:	7149f2ca 	.word	0x7149f2ca
 800e558:	3811ef08 	.word	0x3811ef08
 800e55c:	3a4f7f04 	.word	0x3a4f7f04
 800e560:	3d241146 	.word	0x3d241146
 800e564:	3e4e0aa8 	.word	0x3e4e0aa8
 800e568:	3ea6b090 	.word	0x3ea6b090
 800e56c:	3e2aaaab 	.word	0x3e2aaaab
 800e570:	3d9dc62e 	.word	0x3d9dc62e
 800e574:	3f303361 	.word	0x3f303361
 800e578:	4001572d 	.word	0x4001572d
 800e57c:	4019d139 	.word	0x4019d139
 800e580:	3f799999 	.word	0x3f799999
 800e584:	333bbd2e 	.word	0x333bbd2e
 800e588:	3f490fdb 	.word	0x3f490fdb

0800e58c <__ieee754_atan2f>:
 800e58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e58e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800e592:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800e596:	4603      	mov	r3, r0
 800e598:	d805      	bhi.n	800e5a6 <__ieee754_atan2f+0x1a>
 800e59a:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800e59e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e5a2:	4607      	mov	r7, r0
 800e5a4:	d904      	bls.n	800e5b0 <__ieee754_atan2f+0x24>
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7f2 fae4 	bl	8000b74 <__addsf3>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	e010      	b.n	800e5d2 <__ieee754_atan2f+0x46>
 800e5b0:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800e5b4:	d103      	bne.n	800e5be <__ieee754_atan2f+0x32>
 800e5b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e5ba:	f000 b8df 	b.w	800e77c <atanf>
 800e5be:	178c      	asrs	r4, r1, #30
 800e5c0:	f004 0402 	and.w	r4, r4, #2
 800e5c4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e5c8:	b92a      	cbnz	r2, 800e5d6 <__ieee754_atan2f+0x4a>
 800e5ca:	2c02      	cmp	r4, #2
 800e5cc:	d04b      	beq.n	800e666 <__ieee754_atan2f+0xda>
 800e5ce:	2c03      	cmp	r4, #3
 800e5d0:	d04b      	beq.n	800e66a <__ieee754_atan2f+0xde>
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5d6:	b91e      	cbnz	r6, 800e5e0 <__ieee754_atan2f+0x54>
 800e5d8:	2f00      	cmp	r7, #0
 800e5da:	db4c      	blt.n	800e676 <__ieee754_atan2f+0xea>
 800e5dc:	4b27      	ldr	r3, [pc, #156]	@ (800e67c <__ieee754_atan2f+0xf0>)
 800e5de:	e7f8      	b.n	800e5d2 <__ieee754_atan2f+0x46>
 800e5e0:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800e5e4:	d10e      	bne.n	800e604 <__ieee754_atan2f+0x78>
 800e5e6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e5ea:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800e5ee:	d105      	bne.n	800e5fc <__ieee754_atan2f+0x70>
 800e5f0:	2c02      	cmp	r4, #2
 800e5f2:	d83c      	bhi.n	800e66e <__ieee754_atan2f+0xe2>
 800e5f4:	4b22      	ldr	r3, [pc, #136]	@ (800e680 <__ieee754_atan2f+0xf4>)
 800e5f6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e5fa:	e7ea      	b.n	800e5d2 <__ieee754_atan2f+0x46>
 800e5fc:	2c02      	cmp	r4, #2
 800e5fe:	d838      	bhi.n	800e672 <__ieee754_atan2f+0xe6>
 800e600:	4b20      	ldr	r3, [pc, #128]	@ (800e684 <__ieee754_atan2f+0xf8>)
 800e602:	e7f8      	b.n	800e5f6 <__ieee754_atan2f+0x6a>
 800e604:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e608:	d0e6      	beq.n	800e5d8 <__ieee754_atan2f+0x4c>
 800e60a:	1b92      	subs	r2, r2, r6
 800e60c:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800e610:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800e614:	da17      	bge.n	800e646 <__ieee754_atan2f+0xba>
 800e616:	2900      	cmp	r1, #0
 800e618:	da01      	bge.n	800e61e <__ieee754_atan2f+0x92>
 800e61a:	303c      	adds	r0, #60	@ 0x3c
 800e61c:	db15      	blt.n	800e64a <__ieee754_atan2f+0xbe>
 800e61e:	4618      	mov	r0, r3
 800e620:	f7f2 fc64 	bl	8000eec <__aeabi_fdiv>
 800e624:	f7ff fe6c 	bl	800e300 <fabsf>
 800e628:	f000 f8a8 	bl	800e77c <atanf>
 800e62c:	4603      	mov	r3, r0
 800e62e:	2c01      	cmp	r4, #1
 800e630:	d00d      	beq.n	800e64e <__ieee754_atan2f+0xc2>
 800e632:	2c02      	cmp	r4, #2
 800e634:	d00e      	beq.n	800e654 <__ieee754_atan2f+0xc8>
 800e636:	2c00      	cmp	r4, #0
 800e638:	d0cb      	beq.n	800e5d2 <__ieee754_atan2f+0x46>
 800e63a:	4913      	ldr	r1, [pc, #76]	@ (800e688 <__ieee754_atan2f+0xfc>)
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7f2 fa99 	bl	8000b74 <__addsf3>
 800e642:	4912      	ldr	r1, [pc, #72]	@ (800e68c <__ieee754_atan2f+0x100>)
 800e644:	e00c      	b.n	800e660 <__ieee754_atan2f+0xd4>
 800e646:	4b0d      	ldr	r3, [pc, #52]	@ (800e67c <__ieee754_atan2f+0xf0>)
 800e648:	e7f1      	b.n	800e62e <__ieee754_atan2f+0xa2>
 800e64a:	2300      	movs	r3, #0
 800e64c:	e7ef      	b.n	800e62e <__ieee754_atan2f+0xa2>
 800e64e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e652:	e7be      	b.n	800e5d2 <__ieee754_atan2f+0x46>
 800e654:	490c      	ldr	r1, [pc, #48]	@ (800e688 <__ieee754_atan2f+0xfc>)
 800e656:	4618      	mov	r0, r3
 800e658:	f7f2 fa8c 	bl	8000b74 <__addsf3>
 800e65c:	4601      	mov	r1, r0
 800e65e:	480b      	ldr	r0, [pc, #44]	@ (800e68c <__ieee754_atan2f+0x100>)
 800e660:	f7f2 fa86 	bl	8000b70 <__aeabi_fsub>
 800e664:	e7a2      	b.n	800e5ac <__ieee754_atan2f+0x20>
 800e666:	4b09      	ldr	r3, [pc, #36]	@ (800e68c <__ieee754_atan2f+0x100>)
 800e668:	e7b3      	b.n	800e5d2 <__ieee754_atan2f+0x46>
 800e66a:	4b09      	ldr	r3, [pc, #36]	@ (800e690 <__ieee754_atan2f+0x104>)
 800e66c:	e7b1      	b.n	800e5d2 <__ieee754_atan2f+0x46>
 800e66e:	4b09      	ldr	r3, [pc, #36]	@ (800e694 <__ieee754_atan2f+0x108>)
 800e670:	e7af      	b.n	800e5d2 <__ieee754_atan2f+0x46>
 800e672:	2300      	movs	r3, #0
 800e674:	e7ad      	b.n	800e5d2 <__ieee754_atan2f+0x46>
 800e676:	4b08      	ldr	r3, [pc, #32]	@ (800e698 <__ieee754_atan2f+0x10c>)
 800e678:	e7ab      	b.n	800e5d2 <__ieee754_atan2f+0x46>
 800e67a:	bf00      	nop
 800e67c:	3fc90fdb 	.word	0x3fc90fdb
 800e680:	0800f094 	.word	0x0800f094
 800e684:	0800f088 	.word	0x0800f088
 800e688:	33bbbd2e 	.word	0x33bbbd2e
 800e68c:	40490fdb 	.word	0x40490fdb
 800e690:	c0490fdb 	.word	0xc0490fdb
 800e694:	3f490fdb 	.word	0x3f490fdb
 800e698:	bfc90fdb 	.word	0xbfc90fdb

0800e69c <__ieee754_sqrtf>:
 800e69c:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800e6a0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	d30a      	bcc.n	800e6c4 <__ieee754_sqrtf+0x28>
 800e6ae:	4601      	mov	r1, r0
 800e6b0:	f7f2 fb68 	bl	8000d84 <__aeabi_fmul>
 800e6b4:	4601      	mov	r1, r0
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	f7f2 fa5c 	bl	8000b74 <__addsf3>
 800e6bc:	4604      	mov	r4, r0
 800e6be:	4620      	mov	r0, r4
 800e6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6c4:	2a00      	cmp	r2, #0
 800e6c6:	d0fa      	beq.n	800e6be <__ieee754_sqrtf+0x22>
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	da06      	bge.n	800e6da <__ieee754_sqrtf+0x3e>
 800e6cc:	4601      	mov	r1, r0
 800e6ce:	f7f2 fa4f 	bl	8000b70 <__aeabi_fsub>
 800e6d2:	4601      	mov	r1, r0
 800e6d4:	f7f2 fc0a 	bl	8000eec <__aeabi_fdiv>
 800e6d8:	e7f0      	b.n	800e6bc <__ieee754_sqrtf+0x20>
 800e6da:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800e6de:	d03c      	beq.n	800e75a <__ieee754_sqrtf+0xbe>
 800e6e0:	15c2      	asrs	r2, r0, #23
 800e6e2:	2400      	movs	r4, #0
 800e6e4:	2019      	movs	r0, #25
 800e6e6:	4626      	mov	r6, r4
 800e6e8:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800e6ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e6f0:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800e6f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e6f8:	07d2      	lsls	r2, r2, #31
 800e6fa:	bf58      	it	pl
 800e6fc:	005b      	lslpl	r3, r3, #1
 800e6fe:	106d      	asrs	r5, r5, #1
 800e700:	005b      	lsls	r3, r3, #1
 800e702:	1872      	adds	r2, r6, r1
 800e704:	429a      	cmp	r2, r3
 800e706:	bfcf      	iteee	gt
 800e708:	461a      	movgt	r2, r3
 800e70a:	1856      	addle	r6, r2, r1
 800e70c:	1864      	addle	r4, r4, r1
 800e70e:	1a9a      	suble	r2, r3, r2
 800e710:	3801      	subs	r0, #1
 800e712:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800e716:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e71a:	d1f2      	bne.n	800e702 <__ieee754_sqrtf+0x66>
 800e71c:	b1ba      	cbz	r2, 800e74e <__ieee754_sqrtf+0xb2>
 800e71e:	4e15      	ldr	r6, [pc, #84]	@ (800e774 <__ieee754_sqrtf+0xd8>)
 800e720:	4f15      	ldr	r7, [pc, #84]	@ (800e778 <__ieee754_sqrtf+0xdc>)
 800e722:	6830      	ldr	r0, [r6, #0]
 800e724:	6839      	ldr	r1, [r7, #0]
 800e726:	f7f2 fa23 	bl	8000b70 <__aeabi_fsub>
 800e72a:	f8d6 8000 	ldr.w	r8, [r6]
 800e72e:	4601      	mov	r1, r0
 800e730:	4640      	mov	r0, r8
 800e732:	f7f2 fccf 	bl	80010d4 <__aeabi_fcmple>
 800e736:	b150      	cbz	r0, 800e74e <__ieee754_sqrtf+0xb2>
 800e738:	6830      	ldr	r0, [r6, #0]
 800e73a:	6839      	ldr	r1, [r7, #0]
 800e73c:	f7f2 fa1a 	bl	8000b74 <__addsf3>
 800e740:	6836      	ldr	r6, [r6, #0]
 800e742:	4601      	mov	r1, r0
 800e744:	4630      	mov	r0, r6
 800e746:	f7f2 fcbb 	bl	80010c0 <__aeabi_fcmplt>
 800e74a:	b170      	cbz	r0, 800e76a <__ieee754_sqrtf+0xce>
 800e74c:	3402      	adds	r4, #2
 800e74e:	1064      	asrs	r4, r4, #1
 800e750:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800e754:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800e758:	e7b1      	b.n	800e6be <__ieee754_sqrtf+0x22>
 800e75a:	005b      	lsls	r3, r3, #1
 800e75c:	0218      	lsls	r0, r3, #8
 800e75e:	460a      	mov	r2, r1
 800e760:	f101 0101 	add.w	r1, r1, #1
 800e764:	d5f9      	bpl.n	800e75a <__ieee754_sqrtf+0xbe>
 800e766:	4252      	negs	r2, r2
 800e768:	e7bb      	b.n	800e6e2 <__ieee754_sqrtf+0x46>
 800e76a:	3401      	adds	r4, #1
 800e76c:	f024 0401 	bic.w	r4, r4, #1
 800e770:	e7ed      	b.n	800e74e <__ieee754_sqrtf+0xb2>
 800e772:	bf00      	nop
 800e774:	0800f0a4 	.word	0x0800f0a4
 800e778:	0800f0a0 	.word	0x0800f0a0

0800e77c <atanf>:
 800e77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e780:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800e784:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 800e788:	4604      	mov	r4, r0
 800e78a:	4680      	mov	r8, r0
 800e78c:	d30e      	bcc.n	800e7ac <atanf+0x30>
 800e78e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800e792:	d904      	bls.n	800e79e <atanf+0x22>
 800e794:	4601      	mov	r1, r0
 800e796:	f7f2 f9ed 	bl	8000b74 <__addsf3>
 800e79a:	4604      	mov	r4, r0
 800e79c:	e003      	b.n	800e7a6 <atanf+0x2a>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	f340 80ce 	ble.w	800e940 <atanf+0x1c4>
 800e7a4:	4c67      	ldr	r4, [pc, #412]	@ (800e944 <atanf+0x1c8>)
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ac:	4b66      	ldr	r3, [pc, #408]	@ (800e948 <atanf+0x1cc>)
 800e7ae:	429d      	cmp	r5, r3
 800e7b0:	d80e      	bhi.n	800e7d0 <atanf+0x54>
 800e7b2:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800e7b6:	d208      	bcs.n	800e7ca <atanf+0x4e>
 800e7b8:	4964      	ldr	r1, [pc, #400]	@ (800e94c <atanf+0x1d0>)
 800e7ba:	f7f2 f9db 	bl	8000b74 <__addsf3>
 800e7be:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e7c2:	f7f2 fc9b 	bl	80010fc <__aeabi_fcmpgt>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	d1ed      	bne.n	800e7a6 <atanf+0x2a>
 800e7ca:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800e7ce:	e01c      	b.n	800e80a <atanf+0x8e>
 800e7d0:	f7ff fd96 	bl	800e300 <fabsf>
 800e7d4:	4b5e      	ldr	r3, [pc, #376]	@ (800e950 <atanf+0x1d4>)
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	429d      	cmp	r5, r3
 800e7da:	d87c      	bhi.n	800e8d6 <atanf+0x15a>
 800e7dc:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800e7e0:	429d      	cmp	r5, r3
 800e7e2:	d867      	bhi.n	800e8b4 <atanf+0x138>
 800e7e4:	4601      	mov	r1, r0
 800e7e6:	f7f2 f9c5 	bl	8000b74 <__addsf3>
 800e7ea:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e7ee:	f7f2 f9bf 	bl	8000b70 <__aeabi_fsub>
 800e7f2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800e7f6:	4605      	mov	r5, r0
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	f7f2 f9bb 	bl	8000b74 <__addsf3>
 800e7fe:	4601      	mov	r1, r0
 800e800:	4628      	mov	r0, r5
 800e802:	f7f2 fb73 	bl	8000eec <__aeabi_fdiv>
 800e806:	2600      	movs	r6, #0
 800e808:	4604      	mov	r4, r0
 800e80a:	4621      	mov	r1, r4
 800e80c:	4620      	mov	r0, r4
 800e80e:	f7f2 fab9 	bl	8000d84 <__aeabi_fmul>
 800e812:	4601      	mov	r1, r0
 800e814:	4607      	mov	r7, r0
 800e816:	f7f2 fab5 	bl	8000d84 <__aeabi_fmul>
 800e81a:	4605      	mov	r5, r0
 800e81c:	494d      	ldr	r1, [pc, #308]	@ (800e954 <atanf+0x1d8>)
 800e81e:	f7f2 fab1 	bl	8000d84 <__aeabi_fmul>
 800e822:	494d      	ldr	r1, [pc, #308]	@ (800e958 <atanf+0x1dc>)
 800e824:	f7f2 f9a6 	bl	8000b74 <__addsf3>
 800e828:	4629      	mov	r1, r5
 800e82a:	f7f2 faab 	bl	8000d84 <__aeabi_fmul>
 800e82e:	494b      	ldr	r1, [pc, #300]	@ (800e95c <atanf+0x1e0>)
 800e830:	f7f2 f9a0 	bl	8000b74 <__addsf3>
 800e834:	4629      	mov	r1, r5
 800e836:	f7f2 faa5 	bl	8000d84 <__aeabi_fmul>
 800e83a:	4949      	ldr	r1, [pc, #292]	@ (800e960 <atanf+0x1e4>)
 800e83c:	f7f2 f99a 	bl	8000b74 <__addsf3>
 800e840:	4629      	mov	r1, r5
 800e842:	f7f2 fa9f 	bl	8000d84 <__aeabi_fmul>
 800e846:	4947      	ldr	r1, [pc, #284]	@ (800e964 <atanf+0x1e8>)
 800e848:	f7f2 f994 	bl	8000b74 <__addsf3>
 800e84c:	4629      	mov	r1, r5
 800e84e:	f7f2 fa99 	bl	8000d84 <__aeabi_fmul>
 800e852:	4945      	ldr	r1, [pc, #276]	@ (800e968 <atanf+0x1ec>)
 800e854:	f7f2 f98e 	bl	8000b74 <__addsf3>
 800e858:	4639      	mov	r1, r7
 800e85a:	f7f2 fa93 	bl	8000d84 <__aeabi_fmul>
 800e85e:	4943      	ldr	r1, [pc, #268]	@ (800e96c <atanf+0x1f0>)
 800e860:	4607      	mov	r7, r0
 800e862:	4628      	mov	r0, r5
 800e864:	f7f2 fa8e 	bl	8000d84 <__aeabi_fmul>
 800e868:	4941      	ldr	r1, [pc, #260]	@ (800e970 <atanf+0x1f4>)
 800e86a:	f7f2 f981 	bl	8000b70 <__aeabi_fsub>
 800e86e:	4629      	mov	r1, r5
 800e870:	f7f2 fa88 	bl	8000d84 <__aeabi_fmul>
 800e874:	493f      	ldr	r1, [pc, #252]	@ (800e974 <atanf+0x1f8>)
 800e876:	f7f2 f97b 	bl	8000b70 <__aeabi_fsub>
 800e87a:	4629      	mov	r1, r5
 800e87c:	f7f2 fa82 	bl	8000d84 <__aeabi_fmul>
 800e880:	493d      	ldr	r1, [pc, #244]	@ (800e978 <atanf+0x1fc>)
 800e882:	f7f2 f975 	bl	8000b70 <__aeabi_fsub>
 800e886:	4629      	mov	r1, r5
 800e888:	f7f2 fa7c 	bl	8000d84 <__aeabi_fmul>
 800e88c:	493b      	ldr	r1, [pc, #236]	@ (800e97c <atanf+0x200>)
 800e88e:	f7f2 f96f 	bl	8000b70 <__aeabi_fsub>
 800e892:	4629      	mov	r1, r5
 800e894:	f7f2 fa76 	bl	8000d84 <__aeabi_fmul>
 800e898:	4601      	mov	r1, r0
 800e89a:	4638      	mov	r0, r7
 800e89c:	f7f2 f96a 	bl	8000b74 <__addsf3>
 800e8a0:	4621      	mov	r1, r4
 800e8a2:	f7f2 fa6f 	bl	8000d84 <__aeabi_fmul>
 800e8a6:	1c73      	adds	r3, r6, #1
 800e8a8:	4601      	mov	r1, r0
 800e8aa:	d133      	bne.n	800e914 <atanf+0x198>
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	f7f2 f95f 	bl	8000b70 <__aeabi_fsub>
 800e8b2:	e772      	b.n	800e79a <atanf+0x1e>
 800e8b4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e8b8:	f7f2 f95a 	bl	8000b70 <__aeabi_fsub>
 800e8bc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e8c0:	4605      	mov	r5, r0
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	f7f2 f956 	bl	8000b74 <__addsf3>
 800e8c8:	4601      	mov	r1, r0
 800e8ca:	4628      	mov	r0, r5
 800e8cc:	f7f2 fb0e 	bl	8000eec <__aeabi_fdiv>
 800e8d0:	2601      	movs	r6, #1
 800e8d2:	4604      	mov	r4, r0
 800e8d4:	e799      	b.n	800e80a <atanf+0x8e>
 800e8d6:	4b2a      	ldr	r3, [pc, #168]	@ (800e980 <atanf+0x204>)
 800e8d8:	429d      	cmp	r5, r3
 800e8da:	d814      	bhi.n	800e906 <atanf+0x18a>
 800e8dc:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800e8e0:	f7f2 f946 	bl	8000b70 <__aeabi_fsub>
 800e8e4:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800e8e8:	4605      	mov	r5, r0
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f7f2 fa4a 	bl	8000d84 <__aeabi_fmul>
 800e8f0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e8f4:	f7f2 f93e 	bl	8000b74 <__addsf3>
 800e8f8:	4601      	mov	r1, r0
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	f7f2 faf6 	bl	8000eec <__aeabi_fdiv>
 800e900:	2602      	movs	r6, #2
 800e902:	4604      	mov	r4, r0
 800e904:	e781      	b.n	800e80a <atanf+0x8e>
 800e906:	4601      	mov	r1, r0
 800e908:	481e      	ldr	r0, [pc, #120]	@ (800e984 <atanf+0x208>)
 800e90a:	f7f2 faef 	bl	8000eec <__aeabi_fdiv>
 800e90e:	2603      	movs	r6, #3
 800e910:	4604      	mov	r4, r0
 800e912:	e77a      	b.n	800e80a <atanf+0x8e>
 800e914:	4b1c      	ldr	r3, [pc, #112]	@ (800e988 <atanf+0x20c>)
 800e916:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800e91a:	f7f2 f929 	bl	8000b70 <__aeabi_fsub>
 800e91e:	4621      	mov	r1, r4
 800e920:	f7f2 f926 	bl	8000b70 <__aeabi_fsub>
 800e924:	4b19      	ldr	r3, [pc, #100]	@ (800e98c <atanf+0x210>)
 800e926:	4601      	mov	r1, r0
 800e928:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e92c:	f7f2 f920 	bl	8000b70 <__aeabi_fsub>
 800e930:	f1b8 0f00 	cmp.w	r8, #0
 800e934:	4604      	mov	r4, r0
 800e936:	f6bf af36 	bge.w	800e7a6 <atanf+0x2a>
 800e93a:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800e93e:	e732      	b.n	800e7a6 <atanf+0x2a>
 800e940:	4c13      	ldr	r4, [pc, #76]	@ (800e990 <atanf+0x214>)
 800e942:	e730      	b.n	800e7a6 <atanf+0x2a>
 800e944:	3fc90fdb 	.word	0x3fc90fdb
 800e948:	3edfffff 	.word	0x3edfffff
 800e94c:	7149f2ca 	.word	0x7149f2ca
 800e950:	3f97ffff 	.word	0x3f97ffff
 800e954:	3c8569d7 	.word	0x3c8569d7
 800e958:	3d4bda59 	.word	0x3d4bda59
 800e95c:	3d886b35 	.word	0x3d886b35
 800e960:	3dba2e6e 	.word	0x3dba2e6e
 800e964:	3e124925 	.word	0x3e124925
 800e968:	3eaaaaab 	.word	0x3eaaaaab
 800e96c:	bd15a221 	.word	0xbd15a221
 800e970:	3d6ef16b 	.word	0x3d6ef16b
 800e974:	3d9d8795 	.word	0x3d9d8795
 800e978:	3de38e38 	.word	0x3de38e38
 800e97c:	3e4ccccd 	.word	0x3e4ccccd
 800e980:	401bffff 	.word	0x401bffff
 800e984:	bf800000 	.word	0xbf800000
 800e988:	0800f0a8 	.word	0x0800f0a8
 800e98c:	0800f0b8 	.word	0x0800f0b8
 800e990:	bfc90fdb 	.word	0xbfc90fdb

0800e994 <_init>:
 800e994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e996:	bf00      	nop
 800e998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e99a:	bc08      	pop	{r3}
 800e99c:	469e      	mov	lr, r3
 800e99e:	4770      	bx	lr

0800e9a0 <_fini>:
 800e9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9a2:	bf00      	nop
 800e9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9a6:	bc08      	pop	{r3}
 800e9a8:	469e      	mov	lr, r3
 800e9aa:	4770      	bx	lr
